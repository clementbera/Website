THERE_BE_DRAGONS_HERE
Error: Command line handler failed
27 January 2018 1:13:54.402989 pm

VM: Mac OS - intel - 1011.6 - CoInterpreter VMMaker.oscog-eem.2254 uuid: 4f2c2cce-f4a2-469a-93f1-97ed941df0ad Jul 20 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2252 uuid: 2f3e9b0e-ecd3-4adf-b092-cce2e2587a5c Jul 20 2017
VM: 201707201942 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Thu Jul 20 12:42:21 2017 -0700 $ Plugins: 201707201942 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60528]

ETCommandLineHandler(BasicCommandLineHandler)>>handleExit:for:
	Receiver: an ETCommandLineHandler
	Arguments and temporary variables: 
		exit: 	Exit: Command line handler failed 1
		aCommandLinehandler: 	an ETCommandLineHandler
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


ETCommandLineHandler(BasicCommandLineHandler)>>handleExit:
	Receiver: an ETCommandLineHandler
	Arguments and temporary variables: 
		exit: 	Exit: Command line handler failed 1
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


[ :exit | ^ self handleExit: exit ] in ETCommandLineHandler(BasicCommandLineHandler)>>activate
	Receiver: an ETCommandLineHandler
	Arguments and temporary variables: 
		exit: 	Exit: Command line handler failed 1
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


BlockClosure>>cull:
	Receiver: [ :exit | ^ self handleExit: exit ]
	Arguments and temporary variables: 
		anArg: 	Exit: Command line handler failed 1
	Receiver's instance variables: 
		outerContext: 	ETCommandLineHandler(BasicCommandLineHandler)>>activate
		startpc: 	73
		numArgs: 	1


Context>>evaluateSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Exit: Command line handler failed 1
		value: 	nil
	Receiver's instance variables: 
		sender: 	ETCommandLineHandler(BasicCommandLineHandler)>>activate
		pc: 	18
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNot...etc...


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Exit: Command line handler failed 1
	Receiver's instance variables: 
		sender: 	ETCommandLineHandler(BasicCommandLineHandler)>>activate
		pc: 	18
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNot...etc...


Exit(Exception)>>signal
	Receiver: Exit: Command line handler failed 1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'Command line handler failed'
		tag: 	nil
		signaler: 	an ETCommandLineHandler
		signalContext: 	Exit(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		status: 	1


Exit(Exception)>>signal:
	Receiver: Exit: Command line handler failed 1
	Arguments and temporary variables: 
		signalerText: 	'Command line handler failed'
	Receiver's instance variables: 
		messageText: 	'Command line handler failed'
		tag: 	nil
		signaler: 	an ETCommandLineHandler
		signalContext: 	Exit(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		status: 	1


Exit class>>signalFailure:
	Receiver: Exit
	Arguments and temporary variables: 
		aMessage: 	'Command line handler failed'
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->Exit>>#defaultAction #isSuccess-...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Exit
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-CommandLine'
		traitComposition: 	{}
		localSelectors: 	nil


ETCommandLineHandler(CommandLineHandler)>>exitFailure:
	Receiver: an ETCommandLineHandler
	Arguments and temporary variables: 
		aMessage: 	'Command line handler failed'
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


ETCommandLineHandler(CommandLineHandler)>>exitFailure
	Receiver: an ETCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


ETCommandLineHandler(BasicCommandLineHandler)>>error
	Receiver: an ETCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


ETCommandLineHandler(BasicCommandLineHandler)>>handleArgument:
	Receiver: an ETCommandLineHandler
	Arguments and temporary variables: 
		aString: 	'/Users/clementbera'
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


[ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments | arguments first ]) ] in ETCommandLineHandler(BasicCommandLineHandler)>>activate
	Receiver: an ETCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


BlockClosure>>on:do:
	Receiver: [ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments |...etc...
	Arguments and temporary variables: 
		exception: 	Exit
		handlerAction: 	[ :exit | ^ self handleExit: exit ]
	Receiver's instance variables: 
		outerContext: 	ETCommandLineHandler(BasicCommandLineHandler)>>activate
		startpc: 	49
		numArgs: 	0


ETCommandLineHandler(BasicCommandLineHandler)>>activate
	Receiver: an ETCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


ETCommandLineHandler class(CommandLineHandler class)>>activateWith:
	Receiver: ETCommandLineHandler
	Arguments and temporary variables: 
		aCommandLine: 	a CommandLineArguments
	Receiver's instance variables: 
		superclass: 	BasicCommandLineHandler
		methodDict: 	a MethodDictionary(#list->ETCommandLineHandler>>#list #subCommandsR...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ETCommandLineHandler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Ecstatic-CommandLine'
		traitComposition: 	{}
		localSelectors: 	nil


[ aCommandLinehandler activateWith: commandLine ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 
		aCommandLinehandler: 	ETCommandLineHandler
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


BlockClosure>>on:do:
	Receiver: [ aCommandLinehandler activateWith: commandLine ]
	Arguments and temporary variables: 
		exception: 	Exit
		handlerAction: 	[ :exit | ^ self handleExit: exit for: aCommandLinehandler ]
	Receiver's instance variables: 
		outerContext: 	PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubComm...etc...
		startpc: 	34
		numArgs: 	0


PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 
		aCommandLinehandler: 	ETCommandLineHandler
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


PharoCommandLineHandler(BasicCommandLineHandler)>>handleSubcommand
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 
		handlers: 	an OrderedCollection(ETCommandLineHandler)
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


PharoCommandLineHandler(BasicCommandLineHandler)>>handleArgument:
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 
		aString: 	'ecstatic'
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


[ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments | arguments first ]) ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activate
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


BlockClosure>>on:do:
	Receiver: [ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments |...etc...
	Arguments and temporary variables: 
		exception: 	Exit
		handlerAction: 	[ :exit | ^ self handleExit: exit ]
	Receiver's instance variables: 
		outerContext: 	PharoCommandLineHandler(BasicCommandLineHandler)>>activate
		startpc: 	49
		numArgs: 	0


PharoCommandLineHandler(BasicCommandLineHandler)>>activate
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


PharoCommandLineHandler>>activate
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


PharoCommandLineHandler class(CommandLineHandler class)>>activateWith:
	Receiver: PharoCommandLineHandler
	Arguments and temporary variables: 
		aCommandLine: 	a CommandLineArguments
	Receiver's instance variables: 
		superclass: 	BasicCommandLineHandler
		methodDict: 	a MethodDictionary(#activate->PharoCommandLineHandler>>#activate #c...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoCommandLineHandler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-CommandLineHandler'
		traitComposition: 	{}
		localSelectors: 	nil


[ super activateWith: aCommandLine ] in PharoCommandLineHandler class>>activateWith:
	Receiver: PharoCommandLineHandler
	Arguments and temporary variables: 
		aCommandLine: 	a CommandLineArguments
	Receiver's instance variables: 
		superclass: 	BasicCommandLineHandler
		methodDict: 	a MethodDictionary(#activate->PharoCommandLineHandler>>#activate #c...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoCommandLineHandler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-CommandLineHandler'
		traitComposition: 	{}
		localSelectors: 	nil


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 3 items
		nextInQueue: 	[ super activateWith: aCommandLine ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1520@930)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(817359104))(a DropList...etc...
		lastStepTime: 	271483
		lastStepMessage: 	nil
		lastCycleTime: 	271505
		alarms: 	a Heap()
		lastAlarmTime: 	271483
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@930)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(458596096) an Im...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (263194112) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1520@930)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(817359104))(a DropList...etc...
		lastStepTime: 	271483
		lastStepMessage: 	nil
		lastCycleTime: 	271505
		alarms: 	a Heap()
		lastAlarmTime: 	271483
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1520@930)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(817359104))(a DropList...etc...
		lastStepTime: 	271483
		lastStepMessage: 	nil
		lastCycleTime: 	271505
		alarms: 	a Heap()
		lastAlarmTime: 	271483
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@930)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(458596096) an Im...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (263194112) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
ETCommandLineHandler(BasicCommandLineHandler)>>handleExit:for:
ETCommandLineHandler(BasicCommandLineHandler)>>handleExit:
[ :exit | ^ self handleExit: exit ] in ETCommandLineHandler(BasicCommandLineHandler)>>activate
BlockClosure>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
Exit(Exception)>>signal
Exit(Exception)>>signal:
Exit class>>signalFailure:
ETCommandLineHandler(CommandLineHandler)>>exitFailure:
ETCommandLineHandler(CommandLineHandler)>>exitFailure
ETCommandLineHandler(BasicCommandLineHandler)>>error
ETCommandLineHandler(BasicCommandLineHandler)>>handleArgument:
[ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments | arguments first ]) ] in ETCommandLineHandler(BasicCommandLineHandler)>>activate
BlockClosure>>on:do:
ETCommandLineHandler(BasicCommandLineHandler)>>activate
ETCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ aCommandLinehandler activateWith: commandLine ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
PharoCommandLineHandler(BasicCommandLineHandler)>>handleSubcommand
PharoCommandLineHandler(BasicCommandLineHandler)>>handleArgument:
[ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments | arguments first ]) ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activate
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activate
PharoCommandLineHandler>>activate
PharoCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ super activateWith: aCommandLine ] in PharoCommandLineHandler class>>activateWith:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------


*** Warning: PRLinkWarning: Reference :  chipped topaz/Y1  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_y1  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawed aquamarine/Q2  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_q11  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  normal topaz/Y3  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_y111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  silver knight  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_baiyinqishi  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  huge diamond/D6  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_d111111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  chipped aquamarine/Q1  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_q1  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawed diamond/D2  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_d11  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawed opal/E2  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_e11  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  huge malachite  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_xianyandekongqueshi  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  huge topaz/Y6  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_y111111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  chipped ruby/R1  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_r1  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawless  ruby/R4  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_r1111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawless  aquamarine/Q4  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_q1111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  volcano  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_xuehonghuoshan  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  huge ruby/R6  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_r111111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  normal opal/E3  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_e111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  normal ruby/R3  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_r111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawless  sapphire/B4  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_b1111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawless  emerald/G4  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_g1111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  quartz  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_furongshi  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawless  amethyst/P4  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_p1111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawless  amethyst/P4  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_p1111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  perfect amethyst/P5  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_p11111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawless  sapphire/B4  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_b1111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  dark emerald  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_heianfeicui  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawless  opal/E4  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_e1111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  dark emerald  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_heianfeicui  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawless  diamond/D4  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_d1111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawless  diamond/D4  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_d1111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  DeepSea Pearl  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_shenhaizhenzhu  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  perfect emerald/G5  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_g11111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawless  topaz/Y4  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_y1111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  bloodstone  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_jixueshi  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  huge sapphire/B6  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_b111111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawed diamond/D2
gemtd_youbushiban = gemtd_y111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawed opal/E2
gemtd_zhangqishiban = gemtd_g111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawed aquamarine/Q2
gemtd_hongliushiban = gemtd_b111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawed ruby/R2
gemtd_haojiaoshiban = gemtd_p111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawed topaz/Y2
gemtd_suanwushiban = gemtd_q111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawed emerald/G2
gemtd_mabishiban = gemtd_r111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  perfect topaz/Y5  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_y11111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  perfect opal/E5  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_e11111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  perfect emerald/G5  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_g11111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  perfect amethyst/P5  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawless  amethyst/P4
gemtd_ranshaozhishi = gemtd_r11111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_r1111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawed opal/E2  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawless  opal/E4  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_e11  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_e1111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawed topaz/Y2  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawless  topaz/Y4  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_y11  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_y1111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawed diamond/D2  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawless  diamond/D4  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_d11  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_d1111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawed sapphire/B2  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawless  sapphire/B4  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_b11  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_b1111  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawed amethyst/P2  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  flawless  amethyst/P4  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_p11  should end with .pillar or .pier

*** Warning: PRLinkWarning: Reference :  gemtd_p1111  should end with .pillar or .pier
THERE_BE_DRAGONS_HERE
FileDoesNotExist: File @ /Users/clementbera/Desktop/Perso/GemTDWebsite/Website/resource/addon_english.txt
1 May 2018 9:54:07.610459 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

FileHandle>>streamError
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /Users/clementbera/Desktop/Perso/GemTDWebsite/Website/resourc...etc...
		writable: 	false
		id: 	nil


FileHandle>>readStream
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /Users/clementbera/Desktop/Perso/GemTDWebsite/Website/resourc...etc...
		writable: 	false
		id: 	nil


FileSystem>>readStreamOn:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path * 'resource' / 'addon_english.txt'
	Receiver's instance variables: 
		store: 	a MacStore


FileReference>>readStream
	Receiver: File @ resource/addon_english.txt
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path * 'resource' / 'addon_english.txt'


[ :id | 
GemTDParser new
	parse:
		('resource/' , id) asFileReference readStream binary contents asString
			readStream ] in GemTDImporter>>importResources
	Receiver: a GemTDImporter
	Arguments and temporary variables: 
		id: 	'addon_english.txt'
	Receiver's instance variables: 
		resources: 	nil
		scripts: 	nil
		npcs: 	nil
		combinations: 	nil
		creepExtraAbilities: 	nil
		scriptSpecials: 	nil
		difficultyHP: 	nil
		difficultyHPSpeed: 	nil
		slateMap: 	nil
		heroAbilities: 	nil


Array(SequenceableCollection)>>collect:
	Receiver: #('addon_english.txt')
	Arguments and temporary variables: 
		aBlock: 	[ :id | 
GemTDParser new
	parse:
		('resource/' , id) asFileReference r...etc...
		newCollection: 	#(nil)
		index: 	1
	Receiver's instance variables: 
#('addon_english.txt')

GemTDImporter>>importResources
	Receiver: a GemTDImporter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		resources: 	nil
		scripts: 	nil
		npcs: 	nil
		combinations: 	nil
		creepExtraAbilities: 	nil
		scriptSpecials: 	nil
		difficultyHP: 	nil
		difficultyHPSpeed: 	nil
		slateMap: 	nil
		heroAbilities: 	nil


GemTDImporter>>importAll
	Receiver: a GemTDImporter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		resources: 	nil
		scripts: 	nil
		npcs: 	nil
		combinations: 	nil
		creepExtraAbilities: 	nil
		scriptSpecials: 	nil
		difficultyHP: 	nil
		difficultyHPSpeed: 	nil
		slateMap: 	nil
		heroAbilities: 	nil


GemTDGod>>rawProcess
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new rawProcess
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(324117248)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(324117248)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(331882496)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(324117248)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (308@69)
		owner: 	a TransformWithLayoutMorph(348465152)
		submorphs: 	an Array(a RubPrimarySelectionMorph(888980224) a RubCursor(917447424...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (82128128) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(468052736)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(917447424)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(25125888))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(331882496)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1712@971)
		canvas: 	a FormCanvas on: DisplayScreen(1712x971x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(279281664))(a Spec...etc...
		lastStepTime: 	13868
		lastStepMessage: 	nil
		lastCycleTime: 	13895
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(917447424)))
		lastAlarmTime: 	13868
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1712@971)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(763812608) a Na...etc...
		fullBounds: 	(0@0) corner: (1712@971)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1712@971)
		canvas: 	a FormCanvas on: DisplayScreen(1712x971x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(279281664))(a Spec...etc...
		lastStepTime: 	13868
		lastStepMessage: 	nil
		lastCycleTime: 	13895
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(917447424)))
		lastAlarmTime: 	13868
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1712@971)
		canvas: 	a FormCanvas on: DisplayScreen(1712x971x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(279281664))(a Spec...etc...
		lastStepTime: 	13868
		lastStepMessage: 	nil
		lastCycleTime: 	13895
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(917447424)))
		lastAlarmTime: 	13868
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1712@971)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(763812608) a Na...etc...
		fullBounds: 	(0@0) corner: (1712@971)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
FileHandle>>streamError
FileHandle>>readStream
FileSystem>>readStreamOn:
FileReference>>readStream
[ :id | 
GemTDParser new
	parse:
		('resource/' , id) asFileReference readStream binary contents asString
			readStream ] in GemTDImporter>>importResources
Array(SequenceableCollection)>>collect:
GemTDImporter>>importResources
GemTDImporter>>importAll
GemTDGod>>rawProcess
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

