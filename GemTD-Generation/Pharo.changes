'From Pharo7.0alpha of 26 January 2018 [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (32 Bit)] on 26 January 2018 at 10:56:32.555832 am'!----QUIT----2018-01-26T10:56:32.558479+01:00 Pharo7.0-32bit-63e0b3f.image priorSource: 0!----QUIT----2018-01-26T10:56:39.895516+01:00 Pharo7.0-32bit-63e0b3f.image priorSource: 183!"This scripts sets the correct versionInfo for loaded Pharo packages. The purpose of it is to ensure 
 iceberg will find an ancestor in history and it will correctly calculate differences."
| repo commit repositoryReference |

"Create repository"

repositoryReference := (Smalltalk os environment at: 'BOOTSTRAP_REPOSITORY' ifAbsent: ['..']) asFileReference.

repo := IceRepositoryCreator new
	location: repositoryReference;
	subdirectory: 'src';
	createRepository.

repo name: 'pharo'.
"get loaded commit"
commit := repo branch lastCommit.
"using commit as versionInfo for all loaded packages"
repo savedPackages do: [ :eachPackage | 
	MCWorkingCopy allManagers
		detect: [ :each | each packageName = eachPackage packageName ]
		ifFound: [ :each |
			each ancestry ancestors: { 
				IceProxyMCVersionInfo
					remoteUrl: 'git@github.com:pharo-project/pharo.git'
					packageName: each packageName
					commit: commit 
					message: ('Stub pointing to remote repository git@github.com:pharo-project/pharo.git. 
Add iceberg repository to have the real version here.')
					author: 'TheBootstrap' } ] ]!----End fileIn----!----QUIT----2018-01-26T10:56:40.71005+01:00 Pharo7.0-32bit-63e0b3f.image priorSource: 274!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!Object subclass: #GemTDImporter	instanceVariableNames: ''	classVariableNames: ''	package: 'GemTD-Analysis'!!GemTDImporter methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 11:18'!resourcesToImport	^ #(addon_english.txt		 addon_schinese.txt		 addon_tchinese.txt)! !!GemTDImporter methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 11:18'!scriptsToImport	^ #(addon_english.txt		 addon_schinese.txt		 addon_tchinese.txt)! !!GemTDImporter methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 11:21' prior: 33559316!scriptsToImport	^ #(vscripts/addon_game_mode.lua		 npc_abilities_custom.txt		 npc_units_custom.txt)! !!GemTDImporter methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 11:21' prior: 33559506!scriptsToImport	^ #(luaScript 	vscripts/addon_game_mode.lua		 ability 		npc_abilities_custom.txt		 units 		npc_units_custom.txt)! !!GemTDImporter methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 11:22' prior: 33559140!resourcesToImport	^ #(addon_english.txt		 addon_schinese.txt		 addon_tchinese.txt)! !----SNAPSHOT----2018-01-26T11:22:08.39568+01:00 Pharo.image priorSource: 1491!!GemTDImporter methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 11:22'!importResources! !Object subclass: #GemTDParser	instanceVariableNames: ''	classVariableNames: ''	package: 'GemTD-Analysis'!!GemTDParser methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 11:25'!parse: readStream	self skipSeparators.	^ self parseKeyValue! !!GemTDParser methodsFor: 'parsing' stamp: 'ClementBera 1/26/2018 11:25' prior: 33560423!parse: rs	readStream := rs.	self skipSeparators.	^ self parseKeyValue! !!GemTDParser methodsFor: 'parsing' stamp: 'ClementBera 1/26/2018 11:26'!skipSeparators	readStream peek isSeparator whileTrue: [ readStream next ].! !!GemTDParser methodsFor: 'parsing' stamp: 'ClementBera 1/26/2018 11:28'!parseString	| ws |	ws := WriteStream on: (ByteString new: 20).	self assert: readStream peek = $".	readStream next. "skip ''"	[readStream peek = $"] whileFalse: [ 		ws nextPut: readStream next].	readStream next. "skip ''"	^ ws contents	! !!GemTDParser methodsFor: 'parsing' stamp: 'ClementBera 1/26/2018 11:29'!parseKeyValue	| key val |	key := self parseString.	self skipSeparators.	val := (readStream peek = $"		ifTrue: [ self parseString ]		ifFalse: [ self parseDict ]).	^ key -> val! !!GemTDParser methodsFor: 'parsing' stamp: 'ClementBera 1/26/2018 11:31'!parseDict	| assoc dict |	dict := Dictionary new.	self assert: readStream peek = ${.	readStream next. "skip ${"	[self skipSeparators.	readStream peek = $} ] whileFalse: [ 		assoc := self parseKeyValue.		dict at: assoc key put: assoc value ].	readStream next. "skip $}"	^ dict! !----SNAPSHOT----2018-01-26T11:31:48.045157+01:00 Pharo.image priorSource: 5609!!GemTDImporter methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 11:33' prior: 33560209!importResources	^ self resourcesToImport collect: [ :id |		GemTDParser new parse: ('resource/' , id) asFileReference readStream ]! !!GemTDImporter methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 11:33' prior: 33561929!importResources	^ self resourcesToImport collect: [ :id |		GemTDParser new parse: ('resource/' , id , '.txt') asFileReference readStream ]! !!GemTDImporter methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 11:33' prior: 33562167!importResources	^ self resourcesToImport collect: [ :id |		GemTDParser new parse: ('resource/' , id ) asFileReference readStream ]! !!GemTDImporter methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 11:34' prior: 33559953!resourcesToImport	^ #('addon_english.txt'		 'addon_schinese.txt'		 'addon_tchinese.txt')! !!GemTDImporter methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 11:34' prior: 33562414!importResources	^ self resourcesToImport collect: [ :id |		GemTDParser new parse: ('resource/' , id ) asFileReference readStream contents readStream ]! !!GemTDParser methodsFor: 'parsing' stamp: 'ClementBera 1/26/2018 12:03'!skipUntilRelevant	[readStream peek = $" 		or: [ readStream peek = ${		or: [ readStream peek = $} ] ]] whileFalse: [ readStream next ].! !!GemTDParser methodsFor: 'parsing' stamp: 'ClementBera 1/26/2018 12:03' prior: 33560577!parse: rs	readStream := rs.	self skipUntilRelevant.	^ self parseKeyValue! !!GemTDParser methodsFor: 'parsing' stamp: 'ClementBera 1/26/2018 12:03' prior: 33561457!parseDict	| assoc dict |	dict := Dictionary new.	self assert: readStream peek = ${.	readStream next. "skip ${"	[self skipUntilRelevant.	readStream peek = $} ] whileFalse: [ 		assoc := self parseKeyValue.		dict at: assoc key put: assoc value ].	readStream next. "skip $}"	^ dict! !!GemTDParser methodsFor: 'parsing' stamp: 'ClementBera 1/26/2018 12:04' prior: 33561199!parseKeyValue	| key val |	key := self parseString.	self skipUntilRelevant.	val := (readStream peek = $"		ifTrue: [ self parseString ]		ifFalse: [ self parseDict ]).	^ key -> val! !GemTDParser removeSelector: #skipSeparators!----SNAPSHOT----2018-01-26T12:04:19.299262+01:00 Pharo.image priorSource: 7312!!GemTDImporter methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 12:05' prior: 33562851!importResources	^ self resourcesToImport collect: [ :id |		GemTDParser new parse: ('resource/' , id ) asFileReference readStream binary contents asString readStream ]! !----QUIT----2018-01-26T12:11:53.855358+01:00 Pharo.image priorSource: 9659!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!----QUIT----2018-01-26T16:25:21.291105+01:00 Pharo.image priorSource: 10015!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!----QUIT----2018-01-26T16:28:56.846216+01:00 Pharo.image priorSource: 13017!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!Object subclass: #GemTDGod	instanceVariableNames: ''	classVariableNames: ''	package: 'GemTD-Analysis'!Object subclass: #GemTDGod	instanceVariableNames: ''	classVariableNames: ''	package: 'GemTD-Analysis'!Object subclass: #GemTDImporter	instanceVariableNames: 'resources script'	classVariableNames: ''	package: 'GemTD-Analysis'!Object subclass: #GemTDImporter	instanceVariableNames: 'resources scripts'	classVariableNames: ''	package: 'GemTD-Analysis'!!GemTDImporter methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 16:31' prior: 33564276!importResources	^ resources := (self resourcesToImport collect: [ :id |		GemTDParser new parse: ('resource/' , id ) asFileReference readStream binary contents asString readStream ])! !!GemTDImporter methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 16:31'!importNPC	^ resources := (self resourcesToImport collect: [ :id |		GemTDParser new parse: ('resource/' , id ) asFileReference readStream binary contents asString readStream ])! !!GemTDImporter methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 16:31'!npcToImport	^ #(npc_abilities_custom.txt		 npc_units_custom.txt)! !!GemTDImporter methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 16:31' prior: 33559715!scriptsToImport	^ #(scripts/vscripts/addon_game_mode.lua)! !!GemTDImporter methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 16:32' prior: 33574745!scriptsToImport	^ #(vscripts/addon_game_mode.lua)! !!GemTDImporter methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 16:32' prior: 33574304!importNPC	^ npcs := (self npcToImport collect: [ :id |		GemTDParser new parse: ('scripts/' , id ) asFileReference readStream binary contents asString readStream ])! !!GemTDImporter methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 16:32'!importScript	^ scripts := (self scriptsToImport collect: [ :id |		('scripts/' , id ) asFileReference readStream binary contents asString ])! !!GemTDImporter methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 16:33'!importAll	self importResources.	self importNPC.	self importScript.! !!GemTDImporter methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 16:33' prior: 33575067!importNPC	^ npcs := (self npcToImport collect: [ :id |		GemTDParser new parse: ('scripts/npc' , id ) asFileReference readStream binary contents asString readStream ])! !!GemTDImporter methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 16:34' prior: 33575731!importNPC	^ npcs := (self npcToImport collect: [ :id |		GemTDParser new parse: ('scripts/npc/' , id ) asFileReference readStream binary contents asString readStream ])! !!GemTDImporter methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 16:34' prior: 33574572!npcToImport	^ #('npc_abilities_custom.txt'		 'npc_units_custom.txt')! !!GemTDImporter methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 16:34' prior: 33574910!scriptsToImport	^ #('vscripts/addon_game_mode.lua')! !!GemTDGod methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 16:36'!process	| importer |	importer := GemTDImporter new.	importer importAll.	! !!GemTDGod methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:36' prior: 33576597!process	| importer |	importer := GemTDImporter new.	importer importAll.	self generateTowers.! !Object subclass: #GemTDElement	instanceVariableNames: ''	classVariableNames: ''	package: 'GemTD-Analysis'!GemTDElement subclass: #GemTDTower	instanceVariableNames: ''	classVariableNames: ''	package: 'GemTD-Analysis'!GemTDTower subclass: #GemTDBaseTower	instanceVariableNames: ''	classVariableNames: ''	package: 'GemTD-Analysis'!GemTDTower subclass: #GemTDAdvancedTower	instanceVariableNames: ''	classVariableNames: ''	package: 'GemTD-Analysis'!----SNAPSHOT----2018-01-26T16:36:38.055292+01:00 Pharo.image priorSource: 16020!Object subclass: #GemTDElement	instanceVariableNames: 'codeName'	classVariableNames: ''	package: 'GemTD-Analysis'!!GemTDElement methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:36'!codeName	^ codeName! !!GemTDElement methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:36'!codeName: anObject	codeName := anObject! !!GemTDGod methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:37'!generateTowers	| towers |	towers := OrderedCollection new.	self units do: [ :u |		towers add: (self genTower: u) ].! !!GemTDGod methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:37'!units	^ importer units! !!GemTDGod methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:38' prior: 33576765!process	importer := GemTDImporter new.	importer importAll.	self generateTowers.! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:38'!units	1halt.	^ npcs at: 'DOTA'! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:39' prior: 33578295!units	^ (npcs at:'DOTAUnits') keys! !!GemTDGod methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:39' prior: 33578132!process	importer := GemTDImporter new.	importer importAll.	self generate.! !!GemTDGod methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:39'!generate	| towers |	towers := OrderedCollection new.	self units do: [ :u |		towers add: (self genTower: u) ].! !GemTDGod removeSelector: #generateTowers!!GemTDGod methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:40' prior: 33578703!generate	| units |	self units do: [ :u |		units := ((self unitType: u) newFrom: u with: importer)].! !!GemTDGod methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:41'!unitType: u	1halt.	(importer units at: u)! !!GemTDImporter methodsFor: 'importing' stamp: 'ClementBera 1/26/2018 16:41' prior: 33574030!importResources	^ resources := (self resourcesToImport collect: [ :id |		GemTDParser new parse: ('resource/' , id ) asFileReference readStream binary contents asString readStream ])! !!GemTDImporter methodsFor: 'importing' stamp: 'ClementBera 1/26/2018 16:41' prior: 33576006!importNPC	^ npcs := ((self npcToImport collect: [ :id |		GemTDParser new parse: ('scripts/npc/' , id ) asFileReference readStream binary contents asString readStream ])) asDictionary! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:42' prior: 33578424!units	^ (npcs at:'DOTAUnits')! !!GemTDGod methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:42' prior: 33578951!generate	| units |	self units keysDo: [ :u |		units := ((self unitType: u) newFrom: u with: importer)].! !!GemTDGod methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:42' prior: 33579952!generate	| units |	self units keysDo: [ :u |		u halt.		units := ((self unitType: u) newFrom: u with: importer)].! !!GemTDGod methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:43' prior: 33580150!generate	| units |	self units keysAndValuesDo: [ :u :details |		u halt.		units := ((self unitType: u) newFrom: u with: importer)].! !GemTDElement subclass: #GemTDCreep	instanceVariableNames: ''	classVariableNames: ''	package: 'GemTD-Analysis'!!GemTDGod methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:46' prior: 33580358!generate	| units |	self units keysAndValuesDo: [ :u :details |		| cls |		cls := ((details at: 'Model') beginsWith:'models/items/wards/')			ifTrue: [ u last = $1 ifTrue: [ GemTDBaseTower ] ifFalse: [ GemTDAdvancedTower ] ]			ifFalse: [ GemTDCreep ].				units := cls newFrom: u with: details importer: importer].! !!GemTDElement class methodsFor: 'instance creation' stamp: 'ClementBera 1/26/2018 16:46'!newFrom: aString with: aCollection importer: aGemTDImporter 	self shouldBeImplemented.! !!GemTDElement class methodsFor: 'instance creation' stamp: 'ClementBera 1/26/2018 16:47' prior: 33581111!newFrom: codeName with: details importer: importer 	^ self new 			codeName: codeName;		importWith: details importer: importer;		yourself! !!GemTDBaseTower methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 16:47'!importWith: details importer: importer! !!GemTDBaseTower methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 16:48' prior: 33581540!importWith: details importer: importer	"!!!! Chipped Sapphire / B1+file://wards/crystal_maiden_ward.png|width=10+|!! Code |!! English |!! S. Chinese |!! T. Chinese|| gemtd_b1 || Smalltalk || Hypra cool || baz|!! Damage |!! Rate |!! Range |!! Projectile Speed| 2	| 1 | 600 | 3000|!! Ability |!! Ability Tooltip |!! Ability Code| slow 1 | slows enemy by 60 | tower_slow1"! !Object subclass: #GemTDElement	instanceVariableNames: 'codeName enName schName tchName'	classVariableNames: ''	package: 'GemTD-Analysis'!!GemTDElement methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:48'!enName	^ enName! !!GemTDElement methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:48'!enName: anObject	enName := anObject! !!GemTDElement methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:48'!schName	^ schName! !!GemTDElement methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:48'!schName: anObject	schName := anObject! !!GemTDElement methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:48'!tchName	^ tchName! !!GemTDElement methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:48'!tchName: anObject	tchName := anObject! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/26/2018 16:48'!importWith: details importer: importer	! !!GemTDBaseTower methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 16:48' prior: 33581686!importWith: details importer: importer	super importWith: details importer: importer.	"!!!! Chipped Sapphire / B1+file://wards/crystal_maiden_ward.png|width=10+|!! Code |!! English |!! S. Chinese |!! T. Chinese|| gemtd_b1 || Smalltalk || Hypra cool || baz|!! Damage |!! Rate |!! Range |!! Projectile Speed| 2	| 1 | 600 | 3000|!! Ability |!! Ability Tooltip |!! Ability Code| slow 1 | slows enemy by 60 | tower_slow1"! !----SNAPSHOT----2018-01-26T16:49:00.102613+01:00 Pharo.image priorSource: 22896!!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/26/2018 16:49' prior: 33582930!importWith: details importer: importer		"!!!!|!! Ability |!! Ability Tooltip |!! Ability Code| slow 1 | slows enemy by 60 | tower_slow1"! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/26/2018 16:49' prior: 33583681!importWith: details importer: importer		"names (3 lang) + abilities.|!! Ability |!! Ability Tooltip |!! Ability Code| slow 1 | slows enemy by 60 | tower_slow1"! !!GemTDBaseTower methodsFor: 'initialize' stamp: 'ClementBera 1/26/2018 16:49' prior: 33583078!importWith: details importer: importer	super importWith: details importer: importer.	"pic"! !!GemTDTower methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 16:50'!importWith: details importer: importer	super importWith: details importer: importer.	"	|!! Damage |!! Rate |!! Range |!! Projectile Speed| 2	| 1 | 600 | 3000"! !Object subclass: #GemTDElement	instanceVariableNames: 'codeName enName schName tchName abilities'	classVariableNames: ''	package: 'GemTD-Analysis'!GemTDElement subclass: #GemTDAbility	instanceVariableNames: ''	classVariableNames: ''	package: 'GemTD-Analysis'!----SNAPSHOT----2018-01-26T16:50:32.156965+01:00 Pharo.image priorSource: 29073!----SNAPSHOT----2018-01-26T16:50:34.679073+01:00 Pharo.image priorSource: 30360!!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/26/2018 16:50' prior: 33583917!importWith: details importer: importer	1halt.		"names (3 lang) + abilities.|!! Ability |!! Ability Tooltip |!! Ability Code| slow 1 | slows enemy by 60 | tower_slow1"! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:51'!resources	^ resources! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:51'!resources: anObject	^ resources := anObject! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:51'!scripts	^ scripts! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:51'!scripts: anObject	^ scripts := anObject! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:51'!npcs	^ npcs! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 16:51'!npcs: anObject	^ npcs := anObject! !!GemTDImporter methodsFor: 'importing' stamp: 'ClementBera 1/26/2018 16:51' prior: 33579269!importResources	resources := (self resourcesToImport collect: [ :id |		GemTDParser new parse: ('resource/' , id ) asFileReference readStream binary contents asString readStream ]).	self reworkResources.	^ resources! !!GemTDImporter methodsFor: 'importing' stamp: 'ClementBera 1/26/2018 16:51'!reworkResources	resources halt.! !!GemTDImporter methodsFor: 'importing' stamp: 'ClementBera 1/26/2018 16:52' prior: 33586272!reworkResources	| newDict |	newDict := Dictionary new.	resources do: [ :res |		res halt. ]! !!GemTDImporter methodsFor: 'importing' stamp: 'ClementBera 1/26/2018 16:53' prior: 33586401!reworkResources	| newDict |	newDict := Dictionary new.	resources do: [ :res |		newDict at: (res value at: 'Language') put: (res value at: 'Tokens') ].	resources := newDict.! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/26/2018 16:53' prior: 33585050!importWith: details importer: importer	importer resources .	1halt.		"names (3 lang) + abilities.|!! Ability |!! Ability Tooltip |!! Ability Code| slow 1 | slows enemy by 60 | tower_slow1"! !!GemTDParser methodsFor: 'parsing' stamp: 'ClementBera 1/26/2018 16:54' prior: 33560878!parseString	| ws str |	ws := WriteStream on: (ByteString new: 20).	self assert: readStream peek = $".	readStream next. "skip ''"	[readStream peek = $"] whileFalse: [ 		ws nextPut: readStream next].	readStream next. "skip ''"	str := ws contents.	str removeAll: Character null.	1halt.	^ str	! !!GemTDParser methodsFor: 'parsing' stamp: 'ClementBera 1/26/2018 16:55' prior: 33587151!parseString	| ws str |	ws := WriteStream on: (ByteString new: 20).	self assert: readStream peek = $".	readStream next. "skip ''"	[readStream peek = $"] whileFalse: [ 		ws nextPut: readStream next].	readStream next. "skip ''"	^ ws contents reject: [ :e | e = Character null].		! !!GemTDImporter methodsFor: 'importing' stamp: 'ClementBera 1/26/2018 16:57' prior: 33586592!reworkResources	| newDict |	newDict := Dictionary new.	resources with: #(en sch tch)  do: [ :res :l |		newDict at: l put: (res value at: 'Tokens') ].	resources := newDict.! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/26/2018 16:59' prior: 33586866!importWith: details importer: importer	enName := (importer resources at: 'en') at: codeName ifAbsent: ['Resource imported incorrectly'].		1halt.		"names (3 lang) + abilities.|!! Ability |!! Ability Tooltip |!! Ability Code| slow 1 | slows enemy by 60 | tower_slow1"! !GemTDElement subclass: #GemTDAbility	instanceVariableNames: 'tooltip'	classVariableNames: ''	package: 'GemTD-Analysis'!Object subclass: #GemTDElement	instanceVariableNames: 'codeName name abilities'	classVariableNames: ''	package: 'GemTD-Analysis'!!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/26/2018 17:03' prior: 33588201!importWith: details importer: importer	name := Dictionary new.	#(en sch tch) do: [ :l |		name at: l put: ((importer resources at: l) at: codeName ifAbsent: ['Resource imported incorrectly']) ].	abilities := OrderedCollection new.	1 to: 8 do: [ :i |		| ab |		ab := (details at: 'Ability' , i).		ab = '' ifFalse: [ 			abilities add: [ GemTDAbility newFrom: ab importer: importer ] ] ]! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/26/2018 17:03' prior: 33588827!importWith: details importer: importer	name := Dictionary new.	#(en sch tch) do: [ :l |		name at: l put: ((importer resources at: l) at: codeName ifAbsent: ['Resource imported incorrectly']) ].	abilities := OrderedCollection new.	1 to: 8 do: [ :i |		| ab |		ab := (details at: 'Ability' , i).		ab = '' ifFalse: [ 			abilities add: [ GemTDAbility newFrom: ab importer: importer ] ] ].	hiddenAbilities := OrderedCollection new.! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/26/2018 17:03' prior: 33589315!importWith: details importer: importer	name := Dictionary new.	#(en sch tch) do: [ :l |		name at: l put: ((importer resources at: l) at: codeName ifAbsent: ['Resource imported incorrectly']) ].	abilities := OrderedCollection new.	1 to: 8 do: [ :i |		| ab |		ab := (details at: 'Ability' , i).		ab = '' ifFalse: [ 			abilities add: [ GemTDAbility newFrom: ab importer: importer ] ] ].	hiddenAbilities := OrderedCollection new.	9 to: 16 do: [ :i |		| ab |		ab := (details at: 'Ability' , i).		ab = '' ifFalse: [ 			hiddenAbilities add: [ GemTDAbility newFrom: ab importer: importer ] ] ].! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/26/2018 17:03' prior: 33589847!importWith: details importer: importer	name := Dictionary new.	#(en sch tch) do: [ :l |		name at: l put: ((importer resources at: l) at: codeName ifAbsent: ['Resource imported incorrectly']) ].	abilities := OrderedCollection new.	1 to: 8 do: [ :i |		| ab |		ab := (details at: 'Ability' , i printString).		ab = '' ifFalse: [ 			abilities add: [ GemTDAbility newFrom: ab importer: importer ] ] ].	hiddenAbilities := OrderedCollection new.	9 to: 16 do: [ :i |		| ab |		ab := (details at: 'Ability' , i printString).		ab = '' ifFalse: [ 			hiddenAbilities add: [ GemTDAbility newFrom: ab importer: importer ] ] ].! !!GemTDGod methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 17:05' prior: 33580699!generate	| units |	units := OrderedCollection new.	self units keysAndValuesDo: [ :u :details |		| cls |		(u name beginsWith: 'gemtd') ifTrue: [ 			cls := ((details at: 'Model') beginsWith:'models/items/wards/')				ifTrue: [ u last = $1 ifTrue: [ GemTDBaseTower ] ifFalse: [ GemTDAdvancedTower ] ]				ifFalse: [ GemTDCreep ].		units add: (cls newFrom: u with: details importer: importer)]].! !!GemTDGod methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 17:05' prior: 33591262!generate	| units |	units := OrderedCollection new.	self units keysAndValuesDo: [ :u :details |		| cls |		(u beginsWith: 'gemtd') ifTrue: [ 			cls := ((details at: 'Model') beginsWith:'models/items/wards/')				ifTrue: [ u last = $1 ifTrue: [ GemTDBaseTower ] ifFalse: [ GemTDAdvancedTower ] ]				ifFalse: [ GemTDCreep ].		units add: (cls newFrom: u with: details importer: importer)]].! !!GemTDGod methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 17:05' prior: 33578551!process	importer := GemTDImporter new.	importer importAll.	self generate.	1halt.! !!GemTDGod methodsFor: 'accessing' stamp: 'ClementBera 1/26/2018 17:05' prior: 33591752!generate	units := OrderedCollection new.	self units keysAndValuesDo: [ :u :details |		| cls |		(u beginsWith: 'gemtd') ifTrue: [ 			cls := ((details at: 'Model') beginsWith:'models/items/wards/')				ifTrue: [ u last = $1 ifTrue: [ GemTDBaseTower ] ifFalse: [ GemTDAdvancedTower ] ]				ifFalse: [ GemTDCreep ].		units add: (cls newFrom: u with: details importer: importer)]].! !!GemTDTower methodsFor: 'initialize' stamp: 'ClementBera 1/26/2018 17:06' prior: 33584358!importWith: details importer: importer	super importWith: details importer: importer.	1halt.		"	|!! Damage |!! Rate |!! Range |!! Projectile Speed| 2	| 1 | 600 | 3000"! !!GemTDTower methodsFor: 'initialize' stamp: 'ClementBera 1/26/2018 17:08' prior: 33592890!importWith: details importer: importer	super importWith: details importer: importer.	damage := details at: 'AttackDamageMin'.	range := details at: 'AttackRange'.	rate := details at: 'AttackRate'.	projectileSpeed := details at: 'ProjectileSpeed'.! !!GemTDBaseTower methodsFor: 'initialize' stamp: 'ClementBera 1/26/2018 17:08' prior: 33584178!importWith: details importer: importer	super importWith: details importer: importer.	"pic"	1halt.! !GemTDElement subclass: #GemTDTower	instanceVariableNames: 'damage range rate projectileSpeed picture'	classVariableNames: ''	package: 'GemTD-Analysis'!!GemTDBaseTower methodsFor: 'initialize' stamp: 'ClementBera 1/26/2018 17:10' prior: 33593505!importWith: details importer: importer	super importWith: details importer: importer.	picture := ((details at: 'Model') splitOn: '/') last allButLast: 5.! !!GemTDAdvancedTower methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 17:10'!importWith: details importer: importer	super importWith: details importer: importer.	picture := ((details at: 'Model') splitOn: '/') last allButLast: 5.! !!GemTDAdvancedTower methodsFor: 'initialize' stamp: 'ClementBera 1/26/2018 17:10' prior: 33594110!importWith: details importer: importer	super importWith: details importer: importer.	1halt.	picture := ((details at: 'Model') splitOn: '/') last allButLast: 5.! !!GemTDAdvancedTower methodsFor: 'initialize' stamp: 'ClementBera 1/26/2018 17:11' prior: 33594367!importWith: details importer: importer	super importWith: details importer: importer.	picture := codeName.! !----SNAPSHOT----2018-01-26T17:11:55.474281+01:00 Pharo.image priorSource: 30442!----SNAPSHOT----2018-01-26T17:11:58.906938+01:00 Pharo.image priorSource: 40310!----SNAPSHOT----2018-01-26T17:12:00.937399+01:00 Pharo.image priorSource: 40392!----SNAPSHOT----2018-01-26T17:12:04.797246+01:00 Pharo.image priorSource: 40474!!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/26/2018 17:12' prior: 33590545!importWith: details importer: importer	name := Dictionary new.	#(en sch tch) do: [ :l |		name at: l put: ((importer resources at: l) at: codeName ifAbsent: ['Resource imported incorrectly']) ].	abilities := OrderedCollection new.	1 to: 8 do: [ :i |		| ab |		ab := (details at: 'Ability' , i printString).		ab = '' ifFalse: [ 			abilities add: (GemTDAbility newFrom: ab importer: importer) ] ].	hiddenAbilities := OrderedCollection new.	9 to: 16 do: [ :i |		| ab |		ab := (details at: 'Ability' , i printString).		ab = '' ifFalse: [ 			hiddenAbilities add: (GemTDAbility newFrom: ab importer: importer ) ] ].! !!GemTDAbility class methodsFor: '*Alien-Core' stamp: 'ClementBera 1/26/2018 17:12'!newFrom: aString importer: aGemTDImporter 	self shouldBeImplemented.! !!GemTDAbility class methodsFor: '*Alien-Core' stamp: 'ClementBera 1/26/2018 17:13' prior: 33595874!newFrom: codeName importer: importer	^ self new 				codeName: codeName;			importWith: importer;			yourself ! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 17:13'!importWith: aGemTDImporter 	self shouldBeImplemented.! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/26/2018 17:13'!importNameWithImporter: importer	name := Dictionary new.	#(en sch tch) do: [ :l |		name at: l put: ((importer resources at: l) at: codeName ifAbsent: ['Resource imported incorrectly']) ].! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/26/2018 17:13' prior: 33595164!importWith: details importer: importer	self importNameWithImporter: importer.	abilities := OrderedCollection new.	1 to: 8 do: [ :i |		| ab |		ab := (details at: 'Ability' , i printString).		ab = '' ifFalse: [ 			abilities add: (GemTDAbility newFrom: ab importer: importer) ] ].	hiddenAbilities := OrderedCollection new.	9 to: 16 do: [ :i |		| ab |		ab := (details at: 'Ability' , i printString).		ab = '' ifFalse: [ 			hiddenAbilities add: (GemTDAbility newFrom: ab importer: importer ) ] ].! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 17:14' prior: 33596248!importWith: importer 	self importNameWithImporter: importer.	! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 17:14' prior: 33597280!importWith: importer 	1halt.	self importNameWithImporter: importer.	! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/26/2018 17:16' prior: 33597449!importWith: importer 	name := Dictionary new.	#(en sch tch) do: [ :l |		name at: l put: ((importer resources at: l) at: 'DOTA_Tooltip_ability_' , codeName ifAbsent: ['Resource imported incorrectly']) ].	tooltip := Dictionary new.	#(en sch tch) do: [ :l |		tooltip at: l put: ((importer resources at: l) at: 'DOTA_Tooltip_ability_' , codeName , '_Description' ifAbsent: ['Resource imported incorrectly']) ].! !----QUIT----2018-01-26T17:16:48.058291+01:00 Pharo.image priorSource: 40556!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/27/2018 10:20' prior: 33597626!importWith: importer 	name := Dictionary new.	#(en sch tch) do: [ :l |		name at: l put: ((importer resources at: l) at: 'DOTA_Tooltip_ability_' , codeName ifAbsent: ['Resource imported incorrectly']) ].	tooltip := Dictionary new.	#(en sch tch) do: [ :l |		tooltip at: l put: ((importer resources at: l) at: 'DOTA_Tooltip_ability_' , codeName , '_Description' ifAbsent: ['Resource imported incorrectly']) ].	self! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/27/2018 10:21' prior: 33601147!importWith: importer 	name := Dictionary s.	#(en sch tch) do: [ :l |		name at: l put: ((importer resources at: l) at: 'DOTA_Tooltip_ability_' , codeName ifAbsent: ['Resource imported incorrectly']) ].	tooltip := Dictionary new.	#(en sch tch) do: [ :l |		tooltip at: l put: ((importer resources at: l) at: 'DOTA_Tooltip_ability_' , codeName , '_Description' ifAbsent: ['Resource imported incorrectly']) ].! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/27/2018 10:21' prior: 33601671!importWith: importer 	name := Dictionary s.	#(en sch tch) do: [ :l |		name at: l put: ((importer resources at: l) at: 'DOTA_Tooltip_ability_' , codeName ifAbsent: ['Unavailable']) ].	tooltip := Dictionary new.	#(en sch tch) do: [ :l |		tooltip at: l put: ((importer resources at: l) at: 'DOTA_Tooltip_ability_' , codeName , '_Description' ifAbsent: ['Unavailable']) ].! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 10:21' prior: 33596383!importNameWithImporter: importer	name := Dictionary new.	#(en sch tch) do: [ :l |		name at: l put: ((importer resources at: l) at: codeName ifAbsent: ['Unavailable']) ].! !----QUIT----2018-01-27T10:22:13.409502+01:00 Pharo.image priorSource: 43609!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/27/2018 10:22' prior: 33602187!importWith: importer 	name := Dictionary new.	#(en sch tch) do: [ :l |		name at: l put: ((importer resources at: l) at: 'DOTA_Tooltip_ability_' , codeName ifAbsent: ['Unavailable']) ].	tooltip := Dictionary new.	#(en sch tch) do: [ :l |		tooltip at: l put: ((importer resources at: l) at: 'DOTA_Tooltip_ability_' , codeName , '_Description' ifAbsent: ['Unavailable']) ].! !!GemTDGod methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 10:24' prior: 33592237!process	importer := GemTDImporter new.	importer importAll.	self generate.	self exportBaseTowers.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 10:24'!exportBaseTowers	self shouldBeImplemented.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 10:25' prior: 33606580!exportBaseTowers	| s |	s := WriteStream on: (WideString new: 10000).	units do: [ :u | u class = GemTDBaseTower ifTrue: [ u exportOn: s ] ].	1halt.! !!GemTDBaseTower methodsFor: 'export' stamp: 'ClementBera 1/27/2018 10:25'!exportOn: s	! !!GemTDTower methodsFor: 'export' stamp: 'ClementBera 1/27/2018 10:25'!exportOn: s! !GemTDBaseTower removeSelector: #exportOn:!!GemTDBaseTower methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 10:26' prior: 33593860!importWith: details importer: importer	super importWith: details importer: importer.	1halt.	picture := ((details at: 'Model') splitOn: '/') last allButLast: 5.! !!GemTDBaseTower methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 10:26' prior: 33607183!importWith: details importer: importer	super importWith: details importer: importer.	1halt.	"base/B"	picture := ((details at: 'Model') splitOn: '/') last allButLast: 5.! !!GemTDTower methodsFor: 'export' stamp: 'ClementBera 1/27/2018 10:31' prior: 33607029!exportOn: s 	s << '!!!! ' << (name at: 'en') capitalized.	s cr. 	s << '+file://wards/' << picture << '.png|width=10+'.	s cr.	s << '|!! Code |!! English |!! Simplified Chinese |!! Traditional Chinese'.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  (name at: 'sch')		<< ' | ' <<  (name at: 'tch').	s cr.	s << '|!! Attack Damage |!! Attack Rate |!! Attack Range |!! Projectile Speed'.	s cr.	s		<< '| ' << damage  		<< ' | ' <<  rate		<< ' | ' <<  range		<< ' | ' <<  projectileSpeed.	s cr.	abilities do: [ :ab |		ab shortExportOn: s ]! !!GemTDAbility methodsFor: 'export' stamp: 'ClementBera 1/27/2018 10:34'!shortExportOn: s	s << '|!! Ability Code |!! Name (en) |!! Tooltip (en) |!! Name (sch) |!! Tooltip (sch) |!! Name (tch) |!! Tooltip (tch)'.	s cr.	s 		<< '| ' << codeName		<< ' | ' << (name at: 'en')		<< ' | ' << (tooltip at: 'en')		<< ' | ' << (name at: 'sch')		<< ' | ' << (tooltip at: 'sch')		<< ' | ' << (name at: 'tch')		<< ' | ' << (tooltip at: 'tch').	s cr.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 10:34' prior: 33606712!exportBaseTowers	| s |	s := WriteStream on: (WideString new: 10000).	s << '!! Base Towers'.	s cr.	units do: [ :u | u class = GemTDBaseTower ifTrue: [ u exportOn: s ] ].	s contents.! !!GemTDBaseTower methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 10:35' prior: 33607444!importWith: details importer: importer	super importWith: details importer: importer.	picture := 'base/' , (codeName at: (codeName indexOf: $_) + 1) asUppercase asString! !!GemTDAdvancedTower methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 10:36' prior: 33594632!importWith: details importer: importer	super importWith: details importer: importer.	picture := 'advanced/' , codeName.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 10:36' prior: 33608829!exportBaseTowers	| s |	s := WriteStream on: (WideString new: 10000).	s << '!! Base Towers'.	s cr.	units do: [ :u | u class = GemTDBaseTower ifTrue: [ u exportOn: s ] ].	s contents.	1halt.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 10:36' prior: 33609597!exportBaseTowers	| s |	s := WriteStream on: (WideString new: 10000).	s << '!! Base Towers'.	s cr.	self orderedBaseTowers do: [ :u |  u exportOn: s ].	s contents.	1halt.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 10:36'!orderedBaseTowers	self shouldBeImplemented.! !!GemTDBaseTower methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 10:38' prior: 33609114!importWith: details importer: importer	super importWith: details importer: importer.	picture := 'base/' , (codeName at: 7) asUppercase asString! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 10:39' prior: 33610128!orderedBaseTowers	| baseTowers |	baseTowers := units select: [:u | u class = GemTDBaseTower ].	baseTowers sort: [ :a :b |		"comp type B, G, etc."		(a codeName at: 7) = (b codeName at: 7)			ifFalse: [ (a codeName at: 7) <= (b codeName at: 7) ]			ifTrue: [ a size < b size ]		 ].	^ baseTowers! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 10:40' prior: 33610505!orderedBaseTowers	| baseTowers |	baseTowers := units select: [:u | u class = GemTDBaseTower ].	baseTowers sort: [ :a :b |		"comp type B, G, etc."		(a codeName at: 7) = (b codeName at: 7)			ifFalse: [ (a codeName at: 7) <= (b codeName at: 7) ]			ifTrue: [ a codeName size < b codeName size ]		 ].	^ baseTowers! !----SNAPSHOT----2018-01-27T10:40:44.631649+01:00 Pharo.image priorSource: 48401!----SNAPSHOT----2018-01-27T10:40:50.647843+01:00 Pharo.image priorSource: 56781!----SNAPSHOT----2018-01-27T10:41:05.095765+01:00 Pharo.image priorSource: 56863!!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 10:43' prior: 33609880!exportBaseTowers	| s |	s := WriteStream on: (WideString new: 10000).	s << '!! Base Towers'.	s cr.	self orderedBaseTowers do: [ :u |  u exportOn: s ].	'export/baseTowers.pillar' asFileReference writeStream nextPutAll: s contents.	1halt.! !!GemTDTower methodsFor: 'export' stamp: 'ClementBera 1/27/2018 10:44' prior: 33607707!exportOn: s 	s << '!!!! ' << (name at: 'en') capitalized.	s cr. 	s << '+file://wards/' << picture << '.png|width=8+'.	s cr.	s << '|!! Code |!! English |!! Simplified Chinese |!! Traditional Chinese'.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  (name at: 'sch')		<< ' | ' <<  (name at: 'tch').	s cr.	s << '|!! Attack Damage |!! Attack Rate |!! Attack Range |!! Projectile Speed'.	s cr.	s		<< '| ' << damage  		<< ' | ' <<  rate		<< ' | ' <<  range		<< ' | ' <<  projectileSpeed.	s cr.	abilities do: [ :ab |		ab shortExportOn: s ]! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/27/2018 10:45' prior: 33605939!importWith: importer 	name := Dictionary new.	1halt.	#(en sch tch) do: [ :l |		name at: l put: ((importer resources at: l) at: 'DOTA_Tooltip_ability_' , codeName ifAbsent: ['Unavailable']) ].	tooltip := Dictionary new.	#(en sch tch) do: [ :l |		tooltip at: l put: ((importer resources at: l) at: 'DOTA_Tooltip_ability_' , codeName , '_Description' ifAbsent: ['Unavailable']) ].! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/27/2018 10:48' prior: 33612566!importWith: importer 	| details |	name := Dictionary new.	details := (importer npcs at: 'DOTAAbilities') at: codeName.	1halt.	#(en sch tch) do: [ :l |		name at: l put: ((importer resources at: l) at: 'DOTA_Tooltip_ability_' , codeName ifAbsent: ['Unavailable']) ].	tooltip := Dictionary new.	#(en sch tch) do: [ :l |		tooltip at: l put: ((importer resources at: l) at: 'DOTA_Tooltip_ability_' , codeName , '_Description' ifAbsent: ['Unavailable']) ].! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/27/2018 10:51' prior: 33613056!importWith: importer 	| details |	name := Dictionary new.	details := (importer npcs at: 'DOTAAbilities') at: codeName.	#(en sch tch) do: [ :l |		name at: l put: ((importer resources at: l) at: 'DOTA_Tooltip_Ability_' , codeName ifAbsent: ['Unavailable']) ].	tooltip := Dictionary new.	#(en sch tch) do: [ :l |		tooltip at: l put: ((importer resources at: l) at: 'DOTA_Tooltip_Ability_' , codeName , '_Description' ifAbsent: ['Unavailable']) ].! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/27/2018 10:51' prior: 33613621!importWith: importer 	| details |	name := Dictionary new.	"details := (importer npcs at: 'DOTAAbilities') at: codeName."	#(en sch tch) do: [ :l |		name at: l put: ((importer resources at: l) at: 'DOTA_Tooltip_Ability_' , codeName ifAbsent: ['Unavailable']) ].	tooltip := Dictionary new.	#(en sch tch) do: [ :l |		tooltip at: l put: ((importer resources at: l) at: 'DOTA_Tooltip_Ability_' , codeName , '_Description' ifAbsent: ['Unavailable']) ].! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 10:52' prior: 33611545!exportBaseTowers	| s |	s := WriteStream on: (WideString new: 10000).	s << '!! Base Towers'.	s cr.	self orderedBaseTowers do: [ :u |  u exportOn: s ].	'export/baseTowers.pillar' asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 10:52' prior: 33606407!process	importer := GemTDImporter new.	importer importAll.	self generate.	self exportBaseTowers.	self exportAdvancedTowers.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 10:52'!exportAdvancedTowers	self shouldBeImplemented.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 10:53' prior: 33615247!exportAdvancedTowers	| s |	s := WriteStream on: (WideString new: 10000).	s << '!! Combined Towers'.	s cr.	self units do: [ :u | u class = GemTDAdvancedTower ifTrue: [ u exportOn: s ] ].	'export/advancedTowers.pillar' asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 10:53' prior: 33615383!exportAdvancedTowers	| s |	s := WriteStream on: (WideString new: 10000).	s << '!! Combined Towers'.	s cr.	self units do: [ :u | u class = GemTDAdvancedTower ifTrue: [ u exportOn: s ] ].	1halt.	'export/advancedTowers.pillar' asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 10:54' prior: 33615746!exportAdvancedTowers	| s |	s := WriteStream on: (WideString new: 10000).	s << '!! Combined Towers'.	s cr.	units do: [ :u | u class = GemTDAdvancedTower ifTrue: [ u exportOn: s ] ].	1halt.	'export/advancedTowers.pillar' asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 10:54' prior: 33616117!exportAdvancedTowers	| s |	s := WriteStream on: (WideString new: 10000).	s << '!! Combined Towers'.	s cr.	units do: [ :u | u class = GemTDAdvancedTower ifTrue: [ u exportOn: s ] ].	'export/advancedTowers.pillar' asFileReference writeStream nextPutAll: s contents.! !----QUIT----2018-01-27T10:58:23.631402+01:00 Pharo.image priorSource: 56945!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDAbility methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:03' prior: 33608367!shortExportOn: s	s << '|!! Ability Code |!! Name (en) |!! Tooltip (en) |!! Other Languages' "Name (sch) |!! Tooltip (sch) |!! Name (tch) |!! Tooltip (tch)'".	s cr.	s 		<< '| ' << codeName		<< ' | ' << (name at: 'en')		<< ' | ' << (tooltip at: 'en')		<< ' | ' << 'Disabled'		"<< ' | ' << (name at: 'sch')		<< ' | ' << (tooltip at: 'sch')		<< ' | ' << (name at: 'tch')		<< ' | ' << (tooltip at: 'tch')".	s cr.! !----QUIT----2018-01-27T11:03:33.487905+01:00 Pharo.image priorSource: 62323!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!----QUIT----2018-01-27T11:04:21.174296+01:00 Pharo.image priorSource: 65838!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDTower methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:14' prior: 33611878!exportOn: s 	s << '!!!! ' << (name at: 'en') capitalized.	s cr. 	s << '+file://wards/' << picture << '.png|width=8+'.	s cr.	s << '|!! Code |!! English |!! Simplified Chinese |!! Traditional Chinese'.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  "(name at: 'sch')" 'Disabled'		<< ' | ' <<  "(name at: 'tch')" 'Disabled'.	s cr.	s << '|!! Attack Damage |!! Attack Rate |!! Attack Range |!! Projectile Speed'.	s cr.	s		<< '| ' << damage  		<< ' | ' <<  rate		<< ' | ' <<  range		<< ' | ' <<  projectileSpeed.	s cr.	abilities do: [ :ab |		ab shortExportOn: s ]! !!GemTDTower methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:14' prior: 33626364!exportOn: s 	s << '!!!! ' << (name at: 'en') capitalized.	s cr. 	s << '+file://wards/' << picture << '.png|width=8+'.	s cr.	s << '|!! Code |!! English |!! Simplified Chinese |!! Traditional Chinese'.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  "(name at: 'sch')" 'Disabled'		<< ' | ' <<  "(name at: 'tch')" 'Disabled'.	s cr.	s << '|!! Attack Damage |!! Attack Rate |!! Attack Range |!! Projectile Speed'.	s cr.	s		<< '| ' << damage  		<< ' | ' <<  rate		<< ' | ' <<  range		<< ' | ' <<  projectileSpeed.	s cr.	abilities do: [ :ab |		ab shortExportOn: s ].	abilities do: [ :ab |		ab shortExportHiddenOn: s ]! !!GemTDTower methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:14' prior: 33627063!exportOn: s 	s << '!!!! ' << (name at: 'en') capitalized.	s cr. 	s << '+file://wards/' << picture << '.png|width=8+'.	s cr.	s << '|!! Code |!! English |!! Simplified Chinese |!! Traditional Chinese'.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  "(name at: 'sch')" 'Disabled'		<< ' | ' <<  "(name at: 'tch')" 'Disabled'.	s cr.	s << '|!! Attack Damage |!! Attack Rate |!! Attack Range |!! Projectile Speed'.	s cr.	s		<< '| ' << damage  		<< ' | ' <<  rate		<< ' | ' <<  range		<< ' | ' <<  projectileSpeed.	s cr.	abilities do: [ :ab |		ab shortExportOn: s ].	hiddenAbilities do: [ :ab |		ab shortExportHiddenOn: s ]! !!GemTDAbility methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:15'!shortExportHiddenOn: s	s << '|!! Hidden Ability Code |!! Name (en) |!! Tooltip (en) |!! Other Languages' "Name (sch) |!! Tooltip (sch) |!! Name (tch) |!! Tooltip (tch)'".	s cr.	s 		<< '| ' << codeName		<< ' | ' << (name at: 'en')		<< ' | ' << (tooltip at: 'en')		<< ' | ' << 'Disabled'		"<< ' | ' << (name at: 'sch')		<< ' | ' << (tooltip at: 'sch')		<< ' | ' << (name at: 'tch')		<< ' | ' << (tooltip at: 'tch')".	s cr.! !----SNAPSHOT----2018-01-27T11:15:11.660114+01:00 Pharo.image priorSource: 68841!!GemTDCreep methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/27/2018 11:16'!exportOn: s 	s << '!!!! ' << (name at: 'en') capitalized.	s cr.	s << '|!! Code |!! English |!! Simplified Chinese |!! Traditional Chinese'.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  "(name at: 'sch')" 'Disabled'		<< ' | ' <<  "(name at: 'tch')" 'Disabled'.	s cr.	abilities do: [ :ab |		ab shortExportOn: s ].	hiddenAbilities do: [ :ab |		ab shortExportHiddenOn: s ]! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:16'!importWith: details importer: importer	super importWith: details importer: importer.	! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:16' prior: 33629651!importWith: details importer: importer	super importWith: details importer: importer.	1halt.! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:18' prior: 33629829!importWith: details importer: importer	super importWith: details importer: importer.	level := details at: 'Level'.	ms := details at: 'MovementSpeed (NumPlayer factor)'.	res := details at: 'MagicalResistance'.	1halt.! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:19' prior: 33630013!importWith: details importer: importer	super importWith: details importer: importer.	level := details at: 'Level'.	mc := details at: 'MovementCapabilities'.	ms := details at: 'MovementSpeed (NumPlayer factor)'.	res := details at: 'MagicalResistance'.	1halt.! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:19' prior: 33630324!importWith: details importer: importer	super importWith: details importer: importer.	level := details at: 'Level'.	mc := details at: 'MovementCapabilities'.	ms := details at: 'MovementSpeed (NumPlayer factor)'.	res := details at: 'MagicalResistance'.	armor := details at: 'ArmorPhysical'.	1halt.! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:19' prior: 33630678!importWith: details importer: importer	super importWith: details importer: importer.	level := details at: 'Level'.	mc := details at: 'MovementCapabilities'.	ms := details at: 'MovementSpeed (NumPlayer factor)'.	res := details at: 'MagicalResistance'.	armor := details at: 'ArmorPhysical'.! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:21' prior: 33629163!exportOn: s 	s << '!!!! ' << (name at: 'en') capitalized.	s cr.	s << '|!! Code |!! English |!! Simplified Chinese |!! Traditional Chinese'.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  "(name at: 'sch')" 'Disabled'		<< ' | ' <<  "(name at: 'tch')" 'Disabled'.	s cr.	s << '|!! Level |!! Movement |!! Simplified Chinese |!! Traditional Chinese'.	s cr.		abilities do: [ :ab |		ab shortExportOn: s ].	hiddenAbilities do: [ :ab |		ab shortExportHiddenOn: s ]! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:21' prior: 33631071!importWith: details importer: importer	super importWith: details importer: importer.	level := details at: 'Level'.	mc := details at: 'MovementCapabilities'.	ms := details at: 'MovementSpeed'.	res := details at: 'MagicalResistance'.	armor := details at: 'ArmorPhysical'.! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:22' prior: 33631456!exportOn: s 	s << '!!!! ' << (name at: 'en') capitalized.	s cr.	s << '|!! Code |!! English |!! Simplified Chinese |!! Traditional Chinese'.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  "(name at: 'sch')" 'Disabled'		<< ' | ' <<  "(name at: 'tch')" 'Disabled'.	s cr.	s << '|!! Level |!! Movement (*NumPlayer factor) |!! Armor |!! Magic resistance'.	s cr.	1halt.	s 		<< '| ' << level 		<< ' | ' <<  ms << '(' << mc << ')'		<< ' | ' <<  armor		<< ' | ' <<  res.	abilities do: [ :ab |		ab shortExportOn: s ].	hiddenAbilities do: [ :ab |		ab shortExportHiddenOn: s ]! !!GemTDGod methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 11:22' prior: 33615046!process	importer := GemTDImporter new.	importer importAll.	self generate.	self exportBaseTowers.	self exportAdvancedTowers.	self exportCreeps.! !GemTDGod removeSelector: #unitType:!!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:23'!exportCreeps	| s |	s := WriteStream on: (WideString new: 10000).	s << '!! Creeps'.	s cr.	self orderedCreeps do: [ :u |  u exportOn: s ].	'export/creeps.pillar' asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:23'!orderedCreeps	| creeps |	creeps := units select: [:u | u class = GemTDCreep ].	creeps sort: [ :a :b |		a level asInteger < b level asInteger		 ].	^ creeps! !!GemTDCreep methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 11:24'!level	^ level! !!GemTDCreep methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 11:24'!level: anObject	level := anObject! !!GemTDCreep methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 11:24'!ms	^ ms! !!GemTDCreep methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 11:24'!ms: anObject	ms := anObject! !!GemTDCreep methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 11:24'!res	^ res! !!GemTDCreep methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 11:24'!res: anObject	res := anObject! !!GemTDCreep methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 11:24'!mc	^ mc! !!GemTDCreep methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 11:24'!mc: anObject	mc := anObject! !!GemTDCreep methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 11:24'!armor	^ armor! !!GemTDCreep methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 11:24'!armor: anObject	armor := anObject! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:24' prior: 33632414!exportOn: s 	s << '!!!! ' << (name at: 'en') capitalized.	s cr.	s << '|!! Code |!! English |!! Simplified Chinese |!! Traditional Chinese'.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  "(name at: 'sch')" 'Disabled'		<< ' | ' <<  "(name at: 'tch')" 'Disabled'.	s cr.	s << '|!! Level |!! Movement (*NumPlayer factor) |!! Armor |!! Magic resistance'.	s cr.	1halt.	s 		<< '| ' << level 		<< ' | ' <<  ms. 	mc = 'DOTA_UNIT_CAP_MOVE_FLY' ifTrue: [ s << '(flying)' ].	s		<< ' | ' <<  armor		<< ' | ' <<  res.	abilities do: [ :ab |		ab shortExportOn: s ].	hiddenAbilities do: [ :ab |		ab shortExportHiddenOn: s ]! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:24' prior: 33634908!exportOn: s 	s << '!!!! ' << (name at: 'en') capitalized.	s cr.	s << '|!! Code |!! English |!! Simplified Chinese |!! Traditional Chinese'.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  "(name at: 'sch')" 'Disabled'		<< ' | ' <<  "(name at: 'tch')" 'Disabled'.	s cr.	s << '|!! Level |!! Movement (*NumPlayer factor) |!! Armor |!! Magic resistance'.	s cr.	s 		<< '| ' << level 		<< ' | ' <<  ms. 	mc = 'DOTA_UNIT_CAP_MOVE_FLY' ifTrue: [ s << '(flying)' ].	s		<< ' | ' <<  armor		<< ' | ' <<  res.	abilities do: [ :ab |		ab shortExportOn: s ].	hiddenAbilities do: [ :ab |		ab shortExportHiddenOn: s ]! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:27' prior: 33635658!exportOn: s 	s << '!!!! ' << (name at: 'en') capitalized.	s cr.	s << '|!! Code |!! English |!! Simplified Chinese |!! Traditional Chinese'.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  "(name at: 'sch')" 'Disabled'		<< ' | ' <<  "(name at: 'tch')" 'Disabled'.	s cr.	s << '|!! Level |!! Movement (factor) |!! Armor |!! Magic resistance'.	s cr.	s 		<< '| ' << level 		<< ' | ' <<  ms. 	mc = 'DOTA_UNIT_CAP_MOVE_FLY' ifTrue: [ s << '(flying)' ].	s		<< ' | ' <<  armor		<< ' | ' <<  res.	abilities do: [ :ab |		ab shortExportOn: s ].	hiddenAbilities do: [ :ab |		ab shortExportHiddenOn: s ]! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:27' prior: 33636400!exportOn: s 	s << '!!!! ' << (name at: 'en') capitalized.	s cr.	s << '|!! Code |!! English |!! Simplified Chinese |!! Traditional Chinese'.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  "(name at: 'sch')" 'Disabled'		<< ' | ' <<  "(name at: 'tch')" 'Disabled'.	s cr.	s << '|!! Level |!! Movement (Multiplied by factor) |!! Armor |!! Magic resistance'.	s cr.	s 		<< '| ' << level 		<< ' | ' <<  ms. 	mc = 'DOTA_UNIT_CAP_MOVE_FLY' ifTrue: [ s << '(flying)' ].	s		<< ' | ' <<  armor		<< ' | ' <<  res.	abilities do: [ :ab |		ab shortExportOn: s ].	hiddenAbilities do: [ :ab |		ab shortExportHiddenOn: s ]! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:27' prior: 33637131!exportOn: s 	s << '!!!! ' << (name at: 'en') capitalized.	s cr.	s << '|!! Code |!! English |!! Simplified Chinese |!! Traditional Chinese'.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  "(name at: 'sch')" 'Disabled'		<< ' | ' <<  "(name at: 'tch')" 'Disabled'.	s cr.	s << '|!! Level |!! Movement (Multiply by factor) |!! Armor |!! Magic resistance'.	s cr.	s 		<< '| ' << level 		<< ' | ' <<  ms. 	mc = 'DOTA_UNIT_CAP_MOVE_FLY' ifTrue: [ s << '(flying)' ].	s		<< ' | ' <<  armor		<< ' | ' <<  res.	abilities do: [ :ab |		ab shortExportOn: s ].	hiddenAbilities do: [ :ab |		ab shortExportHiddenOn: s ]! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:29' prior: 33637876!exportOn: s 	s << '!!!! ' << (name at: 'en') capitalized.	s cr.	s << '|!! Code |!! English |!! Simplified Chinese |!! Traditional Chinese'.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  "(name at: 'sch')" 'Disabled'		<< ' | ' <<  "(name at: 'tch')" 'Disabled'.	s cr.	s << '|!! Level |!! Movement (Multiply by factor) |!! Armor |!! Magic resistance'.	s cr.	s 		<< '| ' << level 		<< ' | ' <<  ms. 	mc = 'DOTA_UNIT_CAP_MOVE_FLY' ifTrue: [ s << '(flying)' ].	s		<< ' | ' <<  armor		<< ' | ' <<  res.	s cr.	abilities do: [ :ab |		ab shortExportOn: s ].	hiddenAbilities do: [ :ab |		ab shortExportHiddenOn: s ]! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:31' prior: 33633379!exportCreeps	| s |	s := WriteStream on: (WideString new: 10000).	s << '!! Creeps'.	s cr.	self orderedCreeps do: [ :u |  u exportOn: s ].	1halt.	'export/creeps.pillar' asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:31' prior: 33639367!exportCreeps	| s |	s := WriteStream on: (WideString new: 10000).	s << '!! Creeps'.	s cr.	self orderedCreeps do: [ :u |  u exportOn: s ].	'export/creeps.pillar' asFileReference writeStream nextPutAll: s contents.! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:35' prior: 33638619!exportOn: s	(name at: 'en') = 1 ifTrue: [ ^ self ]. 	s << '!!!! ' << (name at: 'en') capitalized.	s cr.	s << '|!! Code |!! English |!! Simplified Chinese |!! Traditional Chinese'.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  "(name at: 'sch')" 'Disabled'		<< ' | ' <<  "(name at: 'tch')" 'Disabled'.	s cr.	s << '|!! Level |!! Movement (Multiply by factor) |!! Armor |!! Magic resistance'.	s cr.	s 		<< '| ' << level 		<< ' | ' <<  ms. 	mc = 'DOTA_UNIT_CAP_MOVE_FLY' ifTrue: [ s << '(flying)' ].	s		<< ' | ' <<  armor		<< ' | ' <<  res.	s cr.	abilities do: [ :ab |		ab shortExportOn: s ].	hiddenAbilities do: [ :ab |		ab shortExportHiddenOn: s ]! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:35' prior: 33639989!exportOn: s	(name at: 'en') = 'Unavailable' ifTrue: [ ^ self ]. 	s << '!!!! ' << (name at: 'en') capitalized.	s cr.	s << '|!! Code |!! English |!! Simplified Chinese |!! Traditional Chinese'.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  "(name at: 'sch')" 'Disabled'		<< ' | ' <<  "(name at: 'tch')" 'Disabled'.	s cr.	s << '|!! Level |!! Movement (Multiply by factor) |!! Armor |!! Magic resistance'.	s cr.	s 		<< '| ' << level 		<< ' | ' <<  ms. 	mc = 'DOTA_UNIT_CAP_MOVE_FLY' ifTrue: [ s << '(flying)' ].	s		<< ' | ' <<  armor		<< ' | ' <<  res.	s cr.	abilities do: [ :ab |		ab shortExportOn: s ].	hiddenAbilities do: [ :ab |		ab shortExportHiddenOn: s ]! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:35' prior: 33632048!importWith: details importer: importer	1halt.	super importWith: details importer: importer.	level := details at: 'Level'.	mc := details at: 'MovementCapabilities'.	ms := details at: 'MovementSpeed'.	res := details at: 'MagicalResistance'.	armor := details at: 'ArmorPhysical'.! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/27/2018 11:36' prior: 33614178!importWith: importer 	| details |	1halt.	name := Dictionary new.	"details := (importer npcs at: 'DOTAAbilities') at: codeName."	#(en sch tch) do: [ :l |		name at: l put: ((importer resources at: l) at: 'DOTA_Tooltip_Ability_' , codeName ifAbsent: ['Unavailable']) ].	tooltip := Dictionary new.	#(en sch tch) do: [ :l |		tooltip at: l put: ((importer resources at: l) at: 'DOTA_Tooltip_Ability_' , codeName , '_Description' ifAbsent: ['Unavailable']) ].! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/27/2018 11:42' prior: 33641972!importWith: importer 	| details |	name := Dictionary new.	"details := (importer npcs at: 'DOTAAbilities') at: codeName."	#(en sch tch) do: [ :l |		name at: l put: ((importer resources at: l) at: 'DOTA_Tooltip_Ability_' , codeName ifAbsent: ['Unavailable']) ].	tooltip := Dictionary new.	#(en sch tch) do: [ :l |		tooltip at: l put: ((importer resources at: l) at: 'DOTA_Tooltip_Ability_' , codeName , '_Description' ifAbsent: ['Unavailable']) ].! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:42' prior: 33641583!importWith: details importer: importer	super importWith: details importer: importer.	level := details at: 'Level'.	mc := details at: 'MovementCapabilities'.	ms := details at: 'MovementSpeed'.	res := details at: 'MagicalResistance'.	armor := details at: 'ArmorPhysical'.! !----QUIT----2018-01-27T11:42:33.417816+01:00 Pharo.image priorSource: 74564!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:45' prior: 33640780!exportOn: s	(name at: 'en') = 'Unavailable' ifTrue: [ ^ self ]. 	s << '!!!! ' << level << '. ' << (name at: 'en') capitalized.	s cr.	s << '|!! Code |!! English |!! Simplified Chinese |!! Traditional Chinese'.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  "(name at: 'sch')" 'Disabled'		<< ' | ' <<  "(name at: 'tch')" 'Disabled'.	s cr.	s << '|!! Level |!! Movement (Multiply by factor) |!! Armor |!! Magic resistance'.	s cr.	s 		<< '| ' << level 		<< ' | ' <<  ms. 	mc = 'DOTA_UNIT_CAP_MOVE_FLY' ifTrue: [ s << '(flying)' ].	s		<< ' | ' <<  armor		<< ' | ' <<  res.	s cr.	abilities do: [ :ab |		ab shortExportOn: s ].	hiddenAbilities do: [ :ab |		ab shortExportHiddenOn: s ]! !----QUIT----2018-01-27T11:45:35.669432+01:00 Pharo.image priorSource: 88929!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:47' prior: 33646452!exportOn: s	((name at: 'en') = 'Unavailable' or: [ (name at: 'en') = '' ]) ifTrue: [ ^ self ]. 	s << '!!!! ' << level << '. ' << (name at: 'en') capitalized.	s cr.	s << '|!! Code |!! English |!! Simplified Chinese |!! Traditional Chinese'.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  "(name at: 'sch')" 'Disabled'		<< ' | ' <<  "(name at: 'tch')" 'Disabled'.	s cr.	s << '|!! Level |!! Movement (Multiply by factor) |!! Armor |!! Magic resistance'.	s cr.	s 		<< '| ' << level 		<< ' | ' <<  ms. 	mc = 'DOTA_UNIT_CAP_MOVE_FLY' ifTrue: [ s << '(flying)' ].	s		<< ' | ' <<  armor		<< ' | ' <<  res.	s cr.	abilities do: [ :ab |		ab shortExportOn: s ].	hiddenAbilities do: [ :ab |		ab shortExportHiddenOn: s ]! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:48' prior: 33639681!exportCreeps	| s |	s := WriteStream on: (WideString new: 10000).	s << '!! Creeps'.	s cr.	s << 'Note: Some creeps may not be used by default in the game.'	s cr.	self orderedCreeps do: [ :u |  u exportOn: s ].	'export/creeps.pillar' asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:48' prior: 33651124!exportCreeps	| s |	s := WriteStream on: (WideString new: 10000).	s << '!! Creeps'.	s cr.	s << 'Note: Some creeps may not be used by default in the game.'.	s cr.	self orderedCreeps do: [ :u |  u exportOn: s ].	'export/creeps.pillar' asFileReference writeStream nextPutAll: s contents.! !----QUIT----2018-01-27T11:48:23.239948+01:00 Pharo.image priorSource: 92752!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:49' prior: 33650275!exportOn: s	((name at: 'en') = 'Unavailable' or: [ (name at: 'en') = '' ]) ifTrue: [ ^ self ]. 	s << '!!!! ' << level << '. ' << (name at: 'en') capitalized.	s cr.	s << '|!! Code |!! English |!! Simplified Chinese |!! Traditional Chinese'.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  "(name at: 'sch')" 'Disabled'		<< ' | ' <<  "(name at: 'tch')" 'Disabled'.	s cr.	s << '|!! Level |!! Movement (Multiply by factor) |!! Armor |!! Magic resistance'.	s cr.	s 		<< '| ' << level 		<< ' | ' <<  ms. 	mc = 'DOTA_UNIT_CAP_MOVE_FLY' ifTrue: [ s << ' (flying)' ].	s		<< ' | ' <<  armor		<< ' | ' <<  res.	s cr.	abilities do: [ :ab |		ab shortExportOn: s ].	hiddenAbilities do: [ :ab |		ab shortExportHiddenOn: s ]! !----QUIT----2018-01-27T11:49:26.643546+01:00 Pharo.image priorSource: 97365!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:51' prior: 33643083!importWith: details importer: importer	super importWith: details importer: importer.	1halt.	level := details at: 'Level'.	mc := details at: 'MovementCapabilities'.	ms := details at: 'MovementSpeed'.	res := details at: 'MagicalResistance'.	armor := details at: 'ArmorPhysical'.! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:52' prior: 33658743!importWith: details importer: importer	super importWith: details importer: importer.	1halt.	level := details at: 'Level'.	mc := details at: 'MovementCapabilities'.	ms := details at: 'MovementSpeed'.	res := details at: 'MagicalResistance'.	armor := details at: 'ArmorPhysical'.	hp := details at: 'StatusHealth'.! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:52' prior: 33659117!importWith: details importer: importer	super importWith: details importer: importer.	level := details at: 'Level'.	mc := details at: 'MovementCapabilities'.	ms := details at: 'MovementSpeed'.	res := details at: 'MagicalResistance'.	armor := details at: 'ArmorPhysical'.	hp := details at: 'StatusHealth'.! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:52' prior: 33654888!exportOn: s	((name at: 'en') = 'Unavailable' or: [ (name at: 'en') = '' ]) ifTrue: [ ^ self ]. 	s << '!!!! ' << level << '. ' << (name at: 'en') capitalized.	s cr.	s << '|!! Code |!! English |!! Simplified Chinese |!! Traditional Chinese'.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  "(name at: 'sch')" 'Disabled'		<< ' | ' <<  "(name at: 'tch')" 'Disabled'.	s cr.	s << '|!! HP |!! Movement (Multiply by factor) |!! Armor |!! Magic resistance'.	s cr.	s 		<< '| ' << hp 		<< ' | ' <<  ms. 	mc = 'DOTA_UNIT_CAP_MOVE_FLY' ifTrue: [ s << ' (flying)' ].	s		<< ' | ' <<  armor		<< ' | ' <<  res.	s cr.	abilities do: [ :ab |		ab shortExportOn: s ].	hiddenAbilities do: [ :ab |		ab shortExportHiddenOn: s ]! !----SNAPSHOT----2018-01-27T11:52:37.132638+01:00 Pharo.image priorSource: 101220!----QUIT----2018-01-27T11:52:57.7912+01:00 Pharo.image priorSource: 106253!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 11:53' prior: 33659927!exportOn: s	((name at: 'en') = 'Unavailable' or: [ (name at: 'en') = '' ]) ifTrue: [ ^ self ]. 	s << '!!!! ' << level << '. ' << (name at: 'en') capitalized.	s cr.	s << '|!! Code |!! English |!! Simplified Chinese |!! Traditional Chinese'.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  "(name at: 'sch')" 'Disabled'		<< ' | ' <<  "(name at: 'tch')" 'Disabled'.	s cr.	s << '|!! Base HP |!! Base Movement |!! Armor |!! Magic resistance'.	s cr.	s 		<< '| ' << hp 		<< ' | ' <<  ms. 	mc = 'DOTA_UNIT_CAP_MOVE_FLY' ifTrue: [ s << ' (flying)' ].	s		<< ' | ' <<  armor		<< ' | ' <<  res.	s cr.	abilities do: [ :ab |		ab shortExportOn: s ].	hiddenAbilities do: [ :ab |		ab shortExportHiddenOn: s ]! !----SNAPSHOT----2018-01-27T11:53:46.464414+01:00 Pharo.image priorSource: 106336!----SNAPSHOT----2018-01-27T11:54:02.426605+01:00 Pharo.image priorSource: 110173!----QUIT----2018-01-27T11:54:05.06218+01:00 Pharo.image priorSource: 110256!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!----QUIT/NOSAVE----2018-01-27T12:01:44.077057+01:00 Pharo.image priorSource: 110339!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!----QUIT/NOSAVE----2018-01-27T12:02:38.238152+01:00 Pharo.image priorSource: 110339!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDAdvancedTower methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 13:40' prior: 33609387!importWith: details importer: importer	super importWith: details importer: importer.	picture := 'advanced/' , codeName.	1halt.! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 13:40'!combinations	1halt.! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 13:45' prior: 33674106!combinations	combinations ifNotNil: [ ^ combinations ].	combinations := Dictionary new.	self parseCombinations: 'GameRules.gemtd_merge'.	self parseCombinations: 'GameRules.gemtd_merge_secret'.	^ combinations! !Object subclass: #GemTDLuaParser	instanceVariableNames: 'readStream'	classVariableNames: ''	package: 'GemTD-Analysis'!!GemTDLuaParser methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/27/2018 13:47'!parse: rs	readStream := rs.	self skipUntilRelevant.	^ self parseKeyValue! !GemTDParser subclass: #GemTDLuaParser	instanceVariableNames: ''	classVariableNames: ''	package: 'GemTD-Analysis'!!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 13:48'!parseCombinations: sub	| i |	i := scripts first indexOfSubCollection: sub.	i := i + sub size.	1halt.! !!GemTDAdvancedTower methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 13:48' prior: 33673896!importWith: details importer: importer	super importWith: details importer: importer.	picture := 'advanced/' , codeName.	importer combinations.	1halt.! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 13:49' prior: 33674650!parse: rs	result := Dictionary new.	readStream := rs.	[self skipSeparators.	 readStream peek = $} ] whileFalse: [ self parseCombination ]! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 13:49'!skipSeparators	! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 13:50' prior: 33675601!skipSeparators	[readStream peek isSeparator] whileTrue: [ readStream next ].! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 13:50'!parseCombination	self ! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 13:51' prior: 33675870!parseCombination	| ws str |	ws := WriteStream on: (ByteString new: 20).	[readStream peek = $=] whileFalse: [ 		ws nextPut: readStream next].	readStream next. "skip equal"	^ (ws contents reject: [ :e | e = Character null]) trimBoth.	! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 13:51'!parseRes	| ws str |	ws := WriteStream on: (ByteString new: 20).	[readStream peek = $=] whileFalse: [ 		ws nextPut: readStream next].	readStream next. "skip equal"	^ (ws contents reject: [ :e | e = Character null]) trimBoth.	! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 13:52' prior: 33675989!parseCombination	| res combo |	res := self parseRes.	combo := self parseCombo.	! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 13:55'!parseCombo	| str1 ws |	ws := WriteStream on: (Array new: 5).	[readStream peek = ${] whileFalse: [ readStream next].	readStream next. "skip {"	ws nextPut: self parseString.	[self skipSeparators.	readStream peek = $,] whileTrue: [ ws nextPut: self parseString ].	^ ws contents	! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 13:55' prior: 33676798!parseCombo	| ws |	ws := WriteStream on: (Array new: 5).	[readStream peek = ${] whileFalse: [ readStream next].	readStream next. "skip {"	ws nextPut: self parseString.	[self skipSeparators.	readStream peek = $,] whileTrue: [ ws nextPut: self parseString ].	^ ws contents	! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 13:55' prior: 33676635!parseCombination	| res combo |	res := self parseRes.	combo := self parseCombo.	result at: res put: combo! !----SNAPSHOT----2018-01-27T13:56:22.607608+01:00 Pharo.image priorSource: 110339!!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 13:57' prior: 33674924!parseCombinations: sub	| i |	i := scripts first indexOfSubCollection: sub.	i := i + sub size.	GemTDLuaParser new parse: (scripts first copyFrom: i + 2 to: i + 100000) readStream.	1halt.! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 13:58' prior: 33677841!parseCombinations: sub	| i |	i := scripts first indexOfSubCollection: sub.	i := i + sub size.	GemTDLuaParser new parse: (scripts first copyFrom: i + 4 to: i + 100000) readStream.	1halt.! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 13:58' prior: 33678128!parseCombinations: sub	| i |	i := scripts first indexOfSubCollection: sub.	i := i + sub size.	GemTDLuaParser new parse: (scripts first copyFrom: i to: i + 100000) readStream.	1halt.! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 13:58' prior: 33675380!parse: rs	result := Dictionary new.	readStream := rs.	self skipUntilRelevant.	readStream next.	[self skipSeparators.	 readStream peek = $} ] whileFalse: [ self parseCombination ]! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 13:59' prior: 33677178!parseCombo	| ws |	ws := WriteStream on: (Array new: 5).	[readStream peek = ${] whileFalse: [ readStream next].	readStream next. "skip {"	self skipSeparators.	ws nextPut: self parseString.	[self skipSeparators.	readStream peek = $,] whileTrue: [ ws nextPut: self parseString ].	^ ws contents	! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 14:00' prior: 33678977!parseCombo	| ws |	ws := WriteStream on: (Array new: 5).	[readStream peek = ${] whileFalse: [ readStream next].	readStream next. "skip {"	self skipSeparators.	ws nextPut: self parseString.	[self skipSeparators.	readStream peek = $,] whileTrue: [ 	readStream next. "skip ,"	self skipSeparators.	ws nextPut: self parseString ].	^ ws contents	! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 14:01' prior: 33679374!parseCombo	| ws |	ws := WriteStream on: (Array new: 5).	self skipUntilRelevant.	self assert: readStream peek = ${.	readStream next. "skip {"	self skipSeparators.	ws nextPut: self parseString.	[self skipSeparators.	readStream peek = $,] whileTrue: [ 	readStream next. "skip ,"	self skipSeparators.	ws nextPut: self parseString ].	self skipUntilRelevant.	self assert: readStream peek = $}.	readStream next. "skip }"	^ ws contents	! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 14:04' prior: 33677553!parseCombination	| res combo |	res := self parseRes.	combo := self parseCombo.	result at: res put: combo.	res = 'gemtd_haibao' ifTrue: [ 1halt ].! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 14:05' prior: 33680363!parseCombination	| res combo |	res := self parseRes.	combo := self parseCombo.	result at: res put: combo.	res trim = 'gemtd_haibao' ifTrue: [ 1halt ].! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 14:06' prior: 33678697!parse: rs	result := Dictionary new.	readStream := rs.	self skipUntilRelevant.	readStream next.	[self skipSeparators.	 readStream peek = $} ] whileFalse: [ 	  self parseCombination.	  self skipSeparators.	  readStream peek = $, ifTrue: [ readStream next ]	]! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 14:06' prior: 33678415!parseCombinations: sub	| i |	i := scripts first indexOfSubCollection: sub.	i := i + sub size.	GemTDLuaParser new parse: (scripts first copyFrom: i to: i + 100000) readStream.! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 14:07' prior: 33680609!parseCombination	| res combo |	res := self parseRes.	combo := self parseCombo.	result at: res put: combo.! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 14:07' prior: 33680860!parse: rs	result := Dictionary new.	readStream := rs.	self skipUntilRelevant.	readStream next.	[self skipSeparators.	 readStream peek = $} ] whileFalse: [ 	  self parseCombination.	  self skipSeparators.	  readStream peek = $, ifTrue: [ readStream next ]].	^ result! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 14:07' prior: 33681222!parseCombinations: sub	| i combos |	i := scripts first indexOfSubCollection: sub.	i := i + sub size.	combos := GemTDLuaParser new parse: (scripts first copyFrom: i to: i + 100000) readStream.	combos keysAndValuesDo: [ :k :v |		combinations at: k put: v ]	 ! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 14:08' prior: 33674223!combinations	combinations ifNotNil: [ ^ combinations ].	combinations := Dictionary new.	self parseCombinations: 'GameRules.gemtd_merge'.	self parseCombinations: 'GameRules.gemtd_merge_secret'.	1halt.	^ combinations! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 14:08' prior: 33682432!combinations	combinations ifNotNil: [ ^ combinations ].	combinations := Dictionary new.	self parseCombinations: 'GameRules.gemtd_merge'.	self parseCombinations: 'GameRules.gemtd_merge_secret'.	^ combinations! !!GemTDAdvancedTower methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 14:08' prior: 33675131!importWith: details importer: importer	super importWith: details importer: importer.	picture := 'advanced/' , codeName.	combo := importer combinations at: codeName! !!GemTDAdvancedTower methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 14:09' prior: 33683064!importWith: details importer: importer	super importWith: details importer: importer.	picture := 'advanced/' , codeName.	combo := importer combinations at: codeName ifAbsent: [ #() ]! !!GemTDAdvancedTower methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/27/2018 14:09'!exportOn: s	super exportOn: s.	1halt.! !!GemTDAdvancedTower methodsFor: 'export' stamp: 'ClementBera 1/27/2018 14:13' prior: 33683613!exportOn: s	super exportOn: s.	combo ifNil: [ ^ self ].	s << '|!! Combination |!! Combination |!! Combination |!! Combination'	s cr.	s 		<< '| ' << combo first		<< ' | ' << combo second		<< ' | ' << (combo size < 3 ifTrue: [ '' ] ifFalse: [ combo at: 3 ])		<< ' | ' << (combo size < 4 ifTrue: [ '' ] ifFalse: [ 			combo size = 5 			ifTrue: [ (combo at: 4) , (combo at: 5) ]			ifFalse: [combo at: 4 ] ]).		1halt.! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 14:14'!enNameFor: key importer: importer	^ (importer resources at: 'en') at: codeName ifAbsent: ['Unavailable']! !!GemTDAdvancedTower methodsFor: 'export' stamp: 'ClementBera 1/27/2018 14:14' prior: 33683751!exportOn: s	super exportOn: s.	combo ifNil: [ ^ self ].	s << '|!! Combination |!! Combination |!! Combination |!! Combination'	s cr.	s 		<< '| ' << combo first		<< ' | ' << combo second		<< ' | ' << (combo size < 3 ifTrue: [ '' ] ifFalse: [ combo at: 3 ])		<< ' | ' << (combo size < 4 ifTrue: [ '' ] ifFalse: [ 			combo size = 5 			ifTrue: [ (combo at: 4) , (combo at: 5) ]			ifFalse: [combo at: 4 ] ]).	s cr.	1halt.! !!GemTDAdvancedTower methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 14:15' prior: 33683333!importWith: details importer: importer	super importWith: details importer: importer.	picture := 'advanced/' , codeName.	combo := importer combinations at: codeName ifAbsent: [ #() ].	comboNames := combo collect: [ :c | self enNameFor: c importer: importer ].! !!GemTDAdvancedTower methodsFor: 'export' stamp: 'ClementBera 1/27/2018 14:15' prior: 33684461!exportOn: s	super exportOn: s.	combo ifNil: [ ^ self ].	s << '|!! Combination |!! Combination |!! Combination |!! Combination'	s cr.	s 		<< '| ' << comboNames first		<< ' | ' << comboNames second		<< ' | ' << (comboNames size < 3 ifTrue: [ '' ] ifFalse: [ comboNames at: 3 ])		<< ' | ' << (comboNames size < 4 ifTrue: [ '' ] ifFalse: [ 			comboNames size = 5 			ifTrue: [ (comboNames at: 4) , (comboNames at: 5) ]			ifFalse: [comboNames at: 4 ] ]).	s cr.	s 		<< '| ' << combo first		<< ' | ' << combo second		<< ' | ' << (combo size < 3 ifTrue: [ '' ] ifFalse: [ combo at: 3 ])		<< ' | ' << (combo size < 4 ifTrue: [ '' ] ifFalse: [ 			combo size = 5 			ifTrue: [ (combo at: 4) , (combo at: 5) ]			ifFalse: [combo at: 4 ] ]).	s cr.	1halt.! !!GemTDAdvancedTower methodsFor: 'export' stamp: 'ClementBera 1/27/2018 14:15' prior: 33685355!exportOn: s	super exportOn: s.	combo ifNil: [ ^ self ].	s << '|!! Combination |!! Combination |!! Combination |!! Combination'	s cr.	s 		<< '| ' << comboNames first		<< ' | ' << comboNames second		<< ' | ' << (comboNames size < 3 ifTrue: [ '' ] ifFalse: [ comboNames at: 3 ])		<< ' | ' << (comboNames size < 4 ifTrue: [ '' ] ifFalse: [ 			comboNames size = 5 			ifTrue: [ (comboNames at: 4) , (comboNames at: 5) ]			ifFalse: [comboNames at: 4 ] ]).	s cr.	s 		<< '| ' << combo first		<< ' | ' << combo second		<< ' | ' << (combo size < 3 ifTrue: [ '' ] ifFalse: [ combo at: 3 ])		<< ' | ' << (combo size < 4 ifTrue: [ '' ] ifFalse: [ 			combo size = 5 			ifTrue: [ (combo at: 4) , (combo at: 5) ]			ifFalse: [combo at: 4 ] ]).	s cr.! !!GemTDAdvancedTower methodsFor: 'export' stamp: 'ClementBera 1/27/2018 14:16' prior: 33686215!exportOn: s	super exportOn: s.	combo ifNil: [ ^ self ].	s << '|!! Combination |!! Combination |!! Combination |!! Combination'.	s cr.	s 		<< '| ' << comboNames first		<< ' | ' << comboNames second		<< ' | ' << (comboNames size < 3 ifTrue: [ '' ] ifFalse: [ comboNames at: 3 ])		<< ' | ' << (comboNames size < 4 ifTrue: [ '' ] ifFalse: [ 			comboNames size = 5 			ifTrue: [ (comboNames at: 4) , (comboNames at: 5) ]			ifFalse: [comboNames at: 4 ] ]).	s cr.	s 		<< '| ' << combo first		<< ' | ' << combo second		<< ' | ' << (combo size < 3 ifTrue: [ '' ] ifFalse: [ combo at: 3 ])		<< ' | ' << (combo size < 4 ifTrue: [ '' ] ifFalse: [ 			combo size = 5 			ifTrue: [ (combo at: 4) , (combo at: 5) ]			ifFalse: [combo at: 4 ] ]).	s cr.! !!GemTDAdvancedTower methodsFor: 'export' stamp: 'ClementBera 1/27/2018 14:16' prior: 33687067!exportOn: s	super exportOn: s.	combo ifNil: [ ^ self ].	combo size < 2 ifTrue: [ ^ self ] .	s << '|!! Combination |!! Combination |!! Combination |!! Combination'.	s cr.	s 		<< '| ' << comboNames first		<< ' | ' << comboNames second		<< ' | ' << (comboNames size < 3 ifTrue: [ '' ] ifFalse: [ comboNames at: 3 ])		<< ' | ' << (comboNames size < 4 ifTrue: [ '' ] ifFalse: [ 			comboNames size = 5 			ifTrue: [ (comboNames at: 4) , (comboNames at: 5) ]			ifFalse: [comboNames at: 4 ] ]).	s cr.	s 		<< '| ' << combo first		<< ' | ' << combo second		<< ' | ' << (combo size < 3 ifTrue: [ '' ] ifFalse: [ combo at: 3 ])		<< ' | ' << (combo size < 4 ifTrue: [ '' ] ifFalse: [ 			combo size = 5 			ifTrue: [ (combo at: 4) , (combo at: 5) ]			ifFalse: [combo at: 4 ] ]).	s cr.! !----SNAPSHOT----2018-01-27T14:16:59.794337+01:00 Pharo.image priorSource: 123232!!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 14:17' prior: 33684257!enNameFor: key importer: importer	^ (importer resources at: 'en') at: key ifAbsent: ['Unavailable']! !----QUIT----2018-01-27T14:18:21.211368+01:00 Pharo.image priorSource: 134282!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!----QUIT/NOSAVE----2018-01-27T14:19:59.41277+01:00 Pharo.image priorSource: 134562!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDAdvancedTower methodsFor: 'export' stamp: 'ClementBera 1/27/2018 14:20' prior: 33687920!exportOn: s	super exportOn: s.	combo ifNil: [ ^ self ].	combo size < 2 ifTrue: [ ^ self ] .	s << '|!! Combination |!! Combination |!! Combination |!! Combination'.	s cr.	s 		<< '| ' << comboNames first		<< ' | ' << comboNames second		<< ' | ' << (comboNames size < 3 ifTrue: [ '' ] ifFalse: [ comboNames at: 3 ])		<< ' | ' << (comboNames size < 4 ifTrue: [ '' ] ifFalse: [ 			comboNames size = 5 			ifTrue: [ (comboNames at: 4) , ' & ' , (comboNames at: 5) ]			ifFalse: [comboNames at: 4 ] ]).	s cr.	s 		<< '| ' << combo first		<< ' | ' << combo second		<< ' | ' << (combo size < 3 ifTrue: [ '' ] ifFalse: [ combo at: 3 ])		<< ' | ' << (combo size < 4 ifTrue: [ '' ] ifFalse: [ 			combo size = 5 			ifTrue: [ (combo at: 4) , ' & ' , (combo at: 5) ]			ifFalse: [combo at: 4 ] ]).	s cr.! !----SNAPSHOT----2018-01-27T14:20:49.382902+01:00 Pharo.image priorSource: 134562!----QUIT----2018-01-27T14:20:53.48445+01:00 Pharo.image priorSource: 141482!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDElement methodsFor: 'export' stamp: 'ClementBera 1/27/2018 14:54'!exportNamesOn: s	s << '|!! Code |!! English |!! Simplified Chinese |!! Traditional Chinese'.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  "(name at: 'sch')" 'Disabled'		<< ' | ' <<  "(name at: 'tch')" 'Disabled'.	s cr.! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 14:54' prior: 33663858!exportOn: s	((name at: 'en') = 'Unavailable' or: [ (name at: 'en') = '' ]) ifTrue: [ ^ self ]. 	s << '!!!! ' << level << '. ' << (name at: 'en') capitalized.	s cr.	self exportNamesOn: s.	s << '|!! Base HP |!! Base Movement |!! Armor |!! Magic resistance'.	s cr.	s 		<< '| ' << hp 		<< ' | ' <<  ms. 	mc = 'DOTA_UNIT_CAP_MOVE_FLY' ifTrue: [ s << ' (flying)' ].	s		<< ' | ' <<  armor		<< ' | ' <<  res.	s cr.	abilities do: [ :ab |		ab shortExportOn: s ].	hiddenAbilities do: [ :ab |		ab shortExportHiddenOn: s ]! !!GemTDElement methodsFor: 'export' stamp: 'ClementBera 1/27/2018 14:55'!exportAbilitiesOn: s	abilities do: [ :ab |		ab shortExportOn: s ].	hiddenAbilities do: [ :ab |		ab shortExportOn: s ]! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/27/2018 14:55' prior: 33699422!exportOn: s	((name at: 'en') = 'Unavailable' or: [ (name at: 'en') = '' ]) ifTrue: [ ^ self ]. 	s << '!!!! ' << level << '. ' << (name at: 'en') capitalized.	s cr.	self exportNamesOn: s.	s << '|!! Base HP |!! Base Movement |!! Armor |!! Magic resistance'.	s cr.	s 		<< '| ' << hp 		<< ' | ' <<  ms. 	mc = 'DOTA_UNIT_CAP_MOVE_FLY' ifTrue: [ s << ' (flying)' ].	s		<< ' | ' <<  armor		<< ' | ' <<  res.	s cr.	self exportAbilitiesOn: s! !!GemTDTower methodsFor: 'export' stamp: 'ClementBera 1/27/2018 14:55' prior: 33627816!exportOn: s 	s << '!!!! ' << (name at: 'en') capitalized.	s cr. 	s << '+file://wards/' << picture << '.png|width=8+'.	s cr.	self exportNamesOn: s.	s << '|!! Attack Damage |!! Attack Rate |!! Attack Range |!! Projectile Speed'.	s cr.	s		<< '| ' << damage  		<< ' | ' <<  rate		<< ' | ' <<  range		<< ' | ' <<  projectileSpeed.	s cr.	abilities do: [ :ab |		ab shortExportOn: s ].	hiddenAbilities do: [ :ab |		ab shortExportHiddenOn: s ]! !!GemTDTower methodsFor: 'export' stamp: 'ClementBera 1/27/2018 14:55' prior: 33700776!exportOn: s 	s << '!!!! ' << (name at: 'en') capitalized.	s cr. 	s << '+file://wards/' << picture << '.png|width=8+'.	s cr.	self exportNamesOn: s.	s << '|!! Attack Damage |!! Attack Rate |!! Attack Range |!! Projectile Speed'.	s cr.	s		<< '| ' << damage  		<< ' | ' <<  rate		<< ' | ' <<  range		<< ' | ' <<  projectileSpeed.	s cr.	self exportAbilitiesOn: s! !----SNAPSHOT----2018-01-27T14:55:56.519498+01:00 Pharo.image priorSource: 141565!!GemTDElement methodsFor: 'export' stamp: 'ClementBera 1/27/2018 14:56' prior: 33699074!exportNamesOn: s	s << '|!! Code |!! English |!! Short name |!! '.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  "(name at: 'sch')" 'Disabled'		<< ' | ' <<  "(name at: 'tch')" 'Disabled'.	s cr.! !!GemTDElement methodsFor: 'export' stamp: 'ClementBera 1/27/2018 14:56' prior: 33701865!exportNamesOn: s	s << '|!! Code |!! English |!! Short name |!! '.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  "(name at: 'sch')" 'Disabled'		<< ' | ' <<  ''.	s cr.! !!GemTDElement methodsFor: 'export' stamp: 'ClementBera 1/27/2018 14:56' prior: 33702188!exportNamesOn: s	s << '|!! Code |!! English |!! Short name |!! '.	s cr.	1halt.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  1		<< ' | ' <<  ''.	s cr.! !----QUIT----2018-01-27T14:57:14.799283+01:00 Pharo.image priorSource: 147260!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDElement methodsFor: 'export' stamp: 'ClementBera 1/27/2018 15:00'!initialsFrom: n	| s |	s := n splitOn: '/'.	s size = 2 ifTrue: [ s at: 2 ].	1halt.	^ (s substrings collect: [ :e | e first capitalized ])! !!GemTDElement methodsFor: 'export' stamp: 'ClementBera 1/27/2018 15:00' prior: 33702484!exportNamesOn: s	s << '|!! Code |!! English |!! Short name |!! '.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  (self initialsFrom: (name at: 'en')) 		<< ' | ' <<  ''.	s cr.! !!GemTDElement methodsFor: 'export' stamp: 'ClementBera 1/27/2018 15:01' prior: 33705748!initialsFrom: n	| s |	s := n splitOn: '/'.	s size = 2 ifTrue: [ s at: 2 ].	self assert: s size = 1.	^ String newFrom: (s first substrings collect: [ :e | e first asUppercase ])  ! !!GemTDElement methodsFor: 'export' stamp: 'ClementBera 1/27/2018 15:01' prior: 33706286!initialsFrom: n	| s |	s := n splitOn: '/'.	s size = 2 ifTrue: [ ^ s at: 2 ].	self assert: s size = 1.	^ String newFrom: (s first substrings collect: [ :e | e first asUppercase ])  ! !GemTDAbility removeSelector: #shortExportHiddenOn:!!GemTDAbility methodsFor: 'export' stamp: 'ClementBera 1/27/2018 15:02' prior: 33619848!shortExportOn: s	s << '|!! Ability Code |!! Ability English |!! Tooltip English |!! Other' "Name (sch) |!! Tooltip (sch) |!! Name (tch) |!! Tooltip (tch)'".	s cr.	s 		<< '| ' << codeName		<< ' | ' << (name at: 'en')		<< ' | ' << (tooltip at: 'en')		<< ' | ' << ''		"<< ' | ' << (name at: 'sch')		<< ' | ' << (tooltip at: 'sch')		<< ' | ' << (name at: 'tch')		<< ' | ' << (tooltip at: 'tch')".	s cr.! !!GemTDElement methodsFor: 'export' stamp: 'ClementBera 1/27/2018 15:04' prior: 33705982!exportNamesOn: s	s << '|!! Code |!! English |!! Initials |!! '.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  (self initialsFrom: (name at: 'en')) 		<< ' | ' <<  ''.	s cr.! !!GemTDAdvancedTower methodsFor: 'export' stamp: 'ClementBera 1/27/2018 15:06' prior: 33695104!exportOn: s	combo ifNil: [ ^ self ].	combo size < 2 ifTrue: [ ^ self ] .	super exportOn: s.	s << '|!! Combination |!! Combination |!! Combination |!! Combination'.	s cr.	s 		<< '| ' << comboNames first		<< ' | ' << comboNames second		<< ' | ' << (comboNames size < 3 ifTrue: [ '' ] ifFalse: [ comboNames at: 3 ])		<< ' | ' << (comboNames size < 4 ifTrue: [ '' ] ifFalse: [ 			comboNames size = 5 			ifTrue: [ (comboNames at: 4) , ' & ' , (comboNames at: 5) ]			ifFalse: [comboNames at: 4 ] ]).	s cr.	s 		<< '| ' << combo first		<< ' | ' << combo second		<< ' | ' << (combo size < 3 ifTrue: [ '' ] ifFalse: [ combo at: 3 ])		<< ' | ' << (combo size < 4 ifTrue: [ '' ] ifFalse: [ 			combo size = 5 			ifTrue: [ (combo at: 4) , ' & ' , (combo at: 5) ]			ifFalse: [combo at: 4 ] ]).	s cr.! !----SNAPSHOT----2018-01-27T15:06:43.947852+01:00 Pharo.image priorSource: 148238!----QUIT----2018-01-27T15:07:06.384014+01:00 Pharo.image priorSource: 154082!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDAdvancedTower methodsFor: 'export' stamp: 'ClementBera 1/27/2018 15:11' prior: 33707704!exportOn: s	((combo isNil or: [ combo size < 2 ]) and: [ (name at: 'en') = 'Unavailable' ])		ifTrue: [ ^ self ].	super exportOn: s.	combo ifNil: [ ^ self ].	combo size < 2 ifTrue: [ ^ self ] .	s << '|!! Combination |!! Combination |!! Combination |!! Combination'.	s cr.	s 		<< '| ' << comboNames first		<< ' | ' << comboNames second		<< ' | ' << (comboNames size < 3 ifTrue: [ '' ] ifFalse: [ comboNames at: 3 ])		<< ' | ' << (comboNames size < 4 ifTrue: [ '' ] ifFalse: [ 			comboNames size = 5 			ifTrue: [ (comboNames at: 4) , ' & ' , (comboNames at: 5) ]			ifFalse: [comboNames at: 4 ] ]).	s cr.	s 		<< '| ' << combo first		<< ' | ' << combo second		<< ' | ' << (combo size < 3 ifTrue: [ '' ] ifFalse: [ combo at: 3 ])		<< ' | ' << (combo size < 4 ifTrue: [ '' ] ifFalse: [ 			combo size = 5 			ifTrue: [ (combo at: 4) , ' & ' , (combo at: 5) ]			ifFalse: [combo at: 4 ] ]).	s cr.! !!GemTDAdvancedTower methodsFor: 'export' stamp: 'ClementBera 1/27/2018 15:12' prior: 33711697!exportOn: s	((combo isNil or: [ combo size < 2 ]) and: [ (name at: 'en') = 'Unavailable' ])		ifTrue: [ ^ self ].	super exportOn: s.	combo ifNil: [ ^ self ].	combo size < 2 ifTrue: [ ^ self ] .	s << '|!! Combination |!! Combination |!! Combination |!! Combination'.	s cr.	s 		<< '| ' << comboNames first		<< ' | ' << comboNames second		<< ' | ' << (comboNames size < 3 ifTrue: [ '' ] ifFalse: [ comboNames at: 3 ])		<< ' | ' << (comboNames size < 4 ifTrue: [ '' ] ifFalse: [ 			comboNames size = 5 			ifTrue: [ (comboNames at: 4) , ' & ' , (comboNames at: 5) ]			ifFalse: [comboNames at: 4 ] ]).	s cr.	s 		<< '| ' << combo first		<< ' | ' << combo second		<< ' | ' << (combo size < 3 ifTrue: [ '' ] ifFalse: [ combo at: 3 ])		<< ' | ' << (combo size < 4 ifTrue: [ '' ] ifFalse: [ 			combo size = 5 			ifTrue: [ (combo at: 4) , ' & ' , (combo at: 5) ]			ifFalse: [combo at: 4 ] ]).	s cr.! !----SNAPSHOT----2018-01-27T15:12:06.446999+01:00 Pharo.image priorSource: 154165!----SNAPSHOT----2018-01-27T15:12:08.761629+01:00 Pharo.image priorSource: 159187!----SNAPSHOT----2018-01-27T15:12:11.758573+01:00 Pharo.image priorSource: 159270!!GemTDGod methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 15:13' prior: 33633120!process	importer := GemTDImporter new.	importer importAll.	self generate.	self clearExport.	self exportBaseTowers.	self exportAdvancedTowers.	self exportCreeps.! !!GemTDGod methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 15:14'!clearExport	'export' asFileReference children do: #delete! !----QUIT----2018-01-27T15:19:10.746718+01:00 Pharo.image priorSource: 159353!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 16:02' prior: 33616483!exportAdvancedTowers	| s |	s := WriteStream on: (WideString new: 10000).	s << '!! Combined Towers'.	s cr.	self orderedAdvancedTowers do: [ :u | u exportOn: s ].	'export/advancedTowers.pillar' asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 16:05'!orderedAdvancedTowersFor: key with: order	| baseTowers |	baseTowers := units select: [:u | u class = GemTDAdvancedTower ].		^ baseTowers! !GemTDGod removeSelector: #exportAdvancedTowers!!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 16:05'!exportAdvancedTowers	| s |	s := WriteStream on: (WideString new: 10000).	s << '!! Combined Towers'.	s cr.	self orderedAdvancedTowers do: [ :u | u exportOn: s ].	'export/advancedTowers.pillar' asFileReference writeStream nextPutAll: s contents.! !GemTDLuaParser subclass: #GemTDKikooParser	instanceVariableNames: ''	classVariableNames: ''	package: 'GemTD-Analysis'!!GemTDKikooParser methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/27/2018 16:07'!parseRes	| ws str |	ws := WriteStream on: (ByteString new: 20).	[readStream peek = ${] whileFalse: [ 		ws nextPut: readStream next].	readStream next. "skip equal"	^ (ws contents reject: [ :e | e = Character null]) trimBoth.	! !!GemTDKikooParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 16:07' prior: 33724251!parseRes	| ws |	ws := WriteStream on: (ByteString new: 20).	[readStream peek = ${] whileFalse: [ 		ws nextPut: readStream next].	readStream next. "skip equal"	^ (ws contents reject: [ :e | e = Character null]) trimBoth.	! !!GemTDKikooParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 16:08' prior: 33724580!parseRes	| ws |	ws := WriteStream on: (ByteString new: 20).	[readStream peek = Character space] whileFalse: [ 		ws nextPut: readStream next].	readStream next. "skip equal"	^ (ws contents reject: [ :e | e = Character null]) trimBoth.	! !!GemTDKikooParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 16:08'!parseCombo	| ws |	ws := WriteStream on: (Array new: 5).	self skipUntilRelevant.	self assert: readStream peek = ${.	readStream next. "skip {"	self skipSeparators.	ws nextPut: self parseRes.	[self skipSeparators.	readStream peek = $,] whileTrue: [ 	readStream next. "skip ,"	self skipSeparators.	ws nextPut: self parseRes ].	self skipUntilRelevant.	self assert: readStream peek = $}.	readStream next. "skip }"	^ ws contents	! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 16:10' prior: 33723785!exportAdvancedTowers	| s order |	s := WriteStream on: (WideString new: 10000).	order := GemTDKikooParser new parse: 'extra/combinedTowerOrder.txt' asFileReference readStream contents readStream.	order keysAndValuesDo: [ :title :towerCodes |		s << '!! ' << title.		towerCodes do: [ :tc |			units halt.			 ] ].	'export/advancedTowers.pillar' asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 16:12' prior: 33725755!exportAdvancedTowers	| s order printed others|	s := WriteStream on: (WideString new: 10000).	printed := #().	order := GemTDKikooParser new parse: 'extra/combinedTowerOrder.txt' asFileReference readStream contents readStream.	order keysAndValuesDo: [ :title :towerCodes |		s << '!! ' << title.		towerCodes do: [ :tc |			units detect: [ :u | u codeName = tc ] ifFound: [ :unit |				unit exportOn: s ] ].		printed := printed , towerCodes. ].	others := units select: [ :each | each class = GemTDAdvancedTower and: [ (printed includes: each codeName) not ] ].	1halt.	'export/advancedTowers.pillar' asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 16:14' prior: 33726244!exportAdvancedTowers	| s order printed others|	s := WriteStream on: (WideString new: 10000).	printed := #().	order := GemTDKikooParser new parse: 'extra/combinedTowerOrder.txt' asFileReference readStream contents readStream.	order keysAndValuesDo: [ :title :towerCodes |		s << '!! ' << title.		s cr.		towerCodes do: [ :tc |			units detect: [ :u | u codeName = tc ] ifFound: [ :unit |				unit exportOn: s ] ].		printed := printed , towerCodes. ].	others := units select: [ :each | each class = GemTDAdvancedTower and: [ (printed includes: each codeName) not ] ].	others ifNotEmpty: [ 		s << '!! Others'.		s cr.		others do: [ :u | u exportOn: s ] ].	'export/advancedTowers.pillar' asFileReference writeStream nextPutAll: s contents.! !!GemTDAdvancedTower methodsFor: 'export' stamp: 'ClementBera 1/27/2018 16:14' prior: 33712706!exportOn: s	super exportOn: s.	combo ifNil: [ ^ self ].	combo size < 2 ifTrue: [ ^ self ] .	s << '|!! Combination |!! Combination |!! Combination |!! Combination'.	s cr.	s 		<< '| ' << comboNames first		<< ' | ' << comboNames second		<< ' | ' << (comboNames size < 3 ifTrue: [ '' ] ifFalse: [ comboNames at: 3 ])		<< ' | ' << (comboNames size < 4 ifTrue: [ '' ] ifFalse: [ 			comboNames size = 5 			ifTrue: [ (comboNames at: 4) , ' & ' , (comboNames at: 5) ]			ifFalse: [comboNames at: 4 ] ]).	s cr.	s 		<< '| ' << combo first		<< ' | ' << combo second		<< ' | ' << (combo size < 3 ifTrue: [ '' ] ifFalse: [ combo at: 3 ])		<< ' | ' << (combo size < 4 ifTrue: [ '' ] ifFalse: [ 			combo size = 5 			ifTrue: [ (combo at: 4) , ' & ' , (combo at: 5) ]			ifFalse: [combo at: 4 ] ]).	s cr.! !----QUIT----2018-01-27T16:15:25.385869+01:00 Pharo.image priorSource: 159829!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDKikooParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 16:22'!parseDirect	| ws |	ws := WriteStream on: (ByteString new: 20).	[readStream peek = Character space] whileFalse: [ 		ws nextPut: readStream next].	readStream next. "skip equal"	^ (ws contents reject: [ :e | e = Character null]) trimBoth.	! !!GemTDKikooParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 16:22' prior: 33725227!parseCombo	| ws |	ws := WriteStream on: (Array new: 5).	self skipUntilRelevant.	self assert: readStream peek = ${.	readStream next. "skip {"	self skipSeparators.	ws nextPut: self parseDirect.	[self skipSeparators.	readStream peek = $,] whileTrue: [ 	readStream next. "skip ,"	self skipSeparators.	ws nextPut: self parseDirect ].	self skipUntilRelevant.	self assert: readStream peek = $}.	readStream next. "skip }"	^ ws contents	! !!GemTDKikooParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 16:23' prior: 33724905!parseRes	| ws |	ws := WriteStream on: (ByteString new: 20).	[readStream peek = ${] whileFalse: [ 		ws nextPut: readStream next].	readStream next. "skip equal"	^ (ws contents reject: [ :e | e = Character null]) trimBoth.	! !!GemTDKikooParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 16:23' prior: 33732613!parseRes	| ws |	ws := WriteStream on: (ByteString new: 20).	[readStream peek = ${] whileFalse: [ 		ws nextPut: readStream next].	^ (ws contents reject: [ :e | e = Character null]) trimBoth.	! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 16:24' prior: 33681701!parse: rs	result := self dictClass new.	readStream := rs.	self skipUntilRelevant.	readStream next.	[self skipSeparators.	 readStream peek = $} ] whileFalse: [ 	  self parseCombination.	  self skipSeparators.	  readStream peek = $, ifTrue: [ readStream next ]].	^ result! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 16:24'!dictClass 	^ Dictionary! !!GemTDKikooParser methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/27/2018 16:24'!dictClass 	^ OrderedDictionary! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 16:24'!parseComboWith: parseSelector	| ws |	ws := WriteStream on: (Array new: 5).	self skipUntilRelevant.	self assert: readStream peek = ${.	readStream next. "skip {"	self skipSeparators.	ws nextPut: (self perform: parseSelector).	[self skipSeparators.	readStream peek = $,] whileTrue: [ 	readStream next. "skip ,"	self skipSeparators.	ws nextPut: (self perform: parseSelector) ].	self skipUntilRelevant.	self assert: readStream peek = $}.	readStream next. "skip }"	^ ws contents	! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 16:25' prior: 33679822!parseCombo	self parseComboWith: #parseString! !!GemTDKikooParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 16:25' prior: 33732070!parseCombo	self parseComboWith: #parseDirect! !----SNAPSHOT----2018-01-27T16:25:14.746883+01:00 Pharo.image priorSource: 174214!!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 16:26' prior: 33682073!parseCombinations: sub	| i combos |	i := scripts first indexOfSubCollection: sub.	i := i + sub size.	combos := GemTDLuaParser new parse: (scripts first copyFrom: i to: i + 100000) readStream.	1halt.	combos keysAndValuesDo: [ :k :v |		combinations at: k put: v ]	 ! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 16:26' prior: 33734772!parseCombinations: sub	| i combos |	i := scripts first indexOfSubCollection: sub.	i := i + sub size.	combos := GemTDLuaParser new parse: (scripts first copyFrom: i to: i + 100000) readStream.	combos keysAndValuesDo: [ :k :v |		combinations at: k put: v ]	 ! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 16:27' prior: 33734404!parseCombo	^ self parseComboWith: #parseString! !!GemTDKikooParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 16:27' prior: 33734547!parseCombo	^ self parseComboWith: #parseDirect! !----QUIT----2018-01-27T16:27:44.828854+01:00 Pharo.image priorSource: 180163!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDTower methodsFor: 'export' stamp: 'ClementBera 1/27/2018 17:42' prior: 33701318!exportOn: s	| width |	width := codeName = 'gemtd_zhenjiazhishi' ifTrue: [ 12 ] ifFalse: [ 8 ]. 	s << '!!!! ' << (name at: 'en') capitalized.	s cr. 	s << '+file://wards/' << picture << '.png|width=' << width printString << '+'.	s cr.	self exportNamesOn: s.	s << '|!! Attack Damage |!! Attack Rate |!! Attack Range |!! Projectile Speed'.	s cr.	s		<< '| ' << damage  		<< ' | ' <<  rate		<< ' | ' <<  range		<< ' | ' <<  projectileSpeed.	s cr.	self exportAbilitiesOn: s! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 17:44' prior: 33602658!importNameWithImporter: importer	name := Dictionary new.	#(en sch tch) do: [ :l |		name at: l put: ((importer resources at: l) at: codeName ifAbsent: [			self getFallBackNames halt.			'Unavailable']) ].! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 17:44'!getFallBackNames 	^ 'extra/fallBackName.txt' asFileReference readStream contents readStream! !(Smalltalk globals at: #GemTDKikooParser) rename: #GemTDOrderParser!!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 17:45' prior: 33726990!exportAdvancedTowers	| s order printed others|	s := WriteStream on: (WideString new: 10000).	printed := #().	order := GemTDOrderParser new parse: 'extra/combinedTowerOrder.txt' asFileReference readStream contents readStream.	order keysAndValuesDo: [ :title :towerCodes |		s << '!! ' << title.		s cr.		towerCodes do: [ :tc |			units detect: [ :u | u codeName = tc ] ifFound: [ :unit |				unit exportOn: s ] ].		printed := printed , towerCodes. ].	others := units select: [ :each | each class = GemTDAdvancedTower and: [ (printed includes: each codeName) not ] ].	others ifNotEmpty: [ 		s << '!! Others'.		s cr.		others do: [ :u | u exportOn: s ] ].	'export/advancedTowers.pillar' asFileReference writeStream nextPutAll: s contents.! !GemTDParser subclass: #GemTDNameParser	instanceVariableNames: 'result'	classVariableNames: ''	package: 'GemTD-Analysis'!!GemTDNameParser methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/27/2018 17:46'!parse: rs	readStream := rs.	readStream next. "skip {"	self skipSeparators.! !!GemTDParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 17:46'!skipSeparators	[readStream peek isSeparator] whileTrue: [ readStream next ].! !GemTDLuaParser removeSelector: #skipSeparators!!GemTDNameParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 17:46' prior: 33740867!parse: rs	result := OrderedCollection new.	readStream := rs.	readStream next. "skip {"	self skipSeparators.	! !GemTDOrderParser subclass: #GemTDNameParser	instanceVariableNames: ''	classVariableNames: ''	package: 'GemTD-Analysis'!!GemTDNameParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 17:47' prior: 33741244!parse: rs	result := OrderedCollection new.	readStream := rs.	readStream next. "skip {"	self skipSeparators.	! !!GemTDNameParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 17:49' prior: 33741578!parse: rs	result := OrderedCollection new.	readStream := rs.	readStream next. "skip {"	self skipSeparators.	[result add: self parseDirect.	 self skipSeparators.	readStream peek = $}] whileFalse.	^ Dictionary newFromPairs: result! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 17:49' prior: 33739651!getFallBackNames 	^ GemTDNameParser new parse: ('extra/fallBackName.txt' asFileReference readStream contents readStream)! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 17:49' prior: 33739363!importNameWithImporter: importer	name := Dictionary new.	#(en sch tch) do: [ :l |		name at: l put: ((importer resources at: l) at: codeName ifAbsent: [			self getFallBackNames halt.			'Unavailable']) ].! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 17:50' prior: 33742339!importNameWithImporter: importer	name := Dictionary new.	#(en sch tch) do: [ :l |		name at: l put: ((importer resources at: l) at: codeName ifAbsent: [			self getFallBackNames at: codeName ifAbsent: ['Unavailable'] ]) ].! !!GemTDNameParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 17:52' prior: 33741788!parse: rs	result := OrderedCollection new.	readStream := rs.	readStream next. "skip {"	self skipSeparators.	[result add: self parseDirect.	 self skipSeparators.	readStream peek = $}] whileFalse.	2 to: result size by: 2 do: [ :i |		result at: i put: (self rework: (result at: i)) ].	^ Dictionary newFromPairs: result! !!GemTDNameParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 17:54'!rework: string	| ws noUp |	ws := WriteStream on: (string class new: string size + 5).	noUp := false.	string readStreamDo: [ :rs |		rs peek isUppercase ifTrue: [ noUp ifFalse: [ws space] ].		noUp := false.		rs peek = $- ifTrue: [ noUp := true ].		 ]! !!GemTDNameParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 17:55' prior: 33743370!rework: string	| ws noUp |	ws := WriteStream on: (string class new: string size + 5).	noUp := false.	string readStreamDo: [ :rs |		rs peek isUppercase ifTrue: [ noUp ifFalse: [ws space] ].		noUp := false.		rs peek = $- ifTrue: [ noUp := true ].		ws nextPut: rs next ]! !!GemTDNameParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 17:55' prior: 33743723!rework: string	| ws noUp |	ws := WriteStream on: (string class new: string size + 5).	noUp := false.	string readStreamDo: [ :rs |		rs peek isUppercase ifTrue: [ noUp ifFalse: [ws space] ].		noUp := false.		rs peek = $- ifTrue: [ noUp := true ].		ws nextPut: rs next ].	^ ws contents trimBoth! !!GemTDNameParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 17:55' prior: 33744095!rework: string	| ws noUp |	1halt.	ws := WriteStream on: (string class new: string size + 5).	noUp := false.	string readStreamDo: [ :rs |		rs peek isUppercase ifTrue: [ noUp ifFalse: [ws space] ].		noUp := false.		rs peek = $- ifTrue: [ noUp := true ].		ws nextPut: rs next ].	^ ws contents trimBoth! !!GemTDNameParser methodsFor: 'parsing' stamp: 'ClementBera 1/27/2018 17:56' prior: 33744492!rework: string	| ws noUp |	ws := WriteStream on: (string class new: string size + 5).	noUp := false.	string readStreamDo: [ :rs |		[rs peek isUppercase ifTrue: [ noUp ifFalse: [ws space] ].		noUp := false.		rs peek = $- ifTrue: [ noUp := true ].		ws nextPut: rs next.		rs atEnd ] whileFalse ].	^ ws contents trimBoth! !----SNAPSHOT----2018-01-27T17:57:12.562163+01:00 Pharo.image priorSource: 181260!GemTDElement removeSelector: #enName!GemTDElement removeSelector: #enName:!!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 17:57'!clean: string	! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 18:00' prior: 33745466!clean: string	| ws upNext |	ws := WriteStream on: (string class new: string size).	upNext := true.	string readStreamDo: [ :rs |		[ws nextPut: (upNext ifTrue: [rs peek asUppercase] ifFalse: [rs peek]).		upNext := false.		rs peek = Character space ifTrue: [ upNext := true ].		rs atEnd ] whileFalse ].	^ ws contents trimBoth! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 18:00' prior: 33745578!clean: string	| ws upNext |	1halt.	ws := WriteStream on: (string class new: string size).	upNext := true.	string readStreamDo: [ :rs |		[ws nextPut: (upNext ifTrue: [rs peek asUppercase] ifFalse: [rs peek]).		upNext := false.		rs peek = Character space ifTrue: [ upNext := true ].		rs atEnd ] whileFalse ].	^ ws contents trimBoth! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 18:00' prior: 33742643!importNameWithImporter: importer	name := Dictionary new.	#(en sch tch) do: [ :l |		name at: l put: (self clean: ((importer resources at: l) at: codeName ifAbsent: [			self getFallBackNames at: codeName ifAbsent: ['Unavailable'] ])) ].! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 18:01' prior: 33746006!clean: string	| ws upNext |	ws := WriteStream on: (string class new: string size).	upNext := true.	string readStreamDo: [ :rs |		[ws nextPut: (upNext ifTrue: [rs peek asUppercase] ifFalse: [rs peek]).		upNext := false.		rs peek = Character space ifTrue: [ upNext := true ].		rs atEnd ] whileFalse ].	^ ws contents trimBoth! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 18:01' prior: 33746777!clean: string	| ws upNext |	ws := WriteStream on: (string class new: string size).	upNext := true.	string readStreamDo: [ :rs |		[ws nextPut: (upNext ifTrue: [rs peek asUppercase] ifFalse: [rs peek]).		upNext := false.		rs peek = Character space ifTrue: [ upNext := true ].		rs next.		rs atEnd ] whileFalse ].	^ ws contents trimBoth! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 18:02' prior: 33747205!clean: string	| ws upNext |	string size = 0 ifTrue: [ ^ string ].	ws := WriteStream on: (string class new: string size).	upNext := true.	string readStreamDo: [ :rs |		[ws nextPut: (upNext ifTrue: [rs peek asUppercase] ifFalse: [rs peek]).		upNext := false.		rs peek = Character space ifTrue: [ upNext := true ].		rs next.		rs atEnd ] whileFalse ].	^ ws contents trimBoth! !!GemTDTower methodsFor: 'export' stamp: 'ClementBera 1/27/2018 18:04' prior: 33738784!exportOn: s	| width |	width := codeName = 'gemtd_zhenjiazhishi' ifTrue: [ 15 ] ifFalse: [ 8 ]. 	s << '!!!! ' << (name at: 'en') capitalized.	s cr. 	s << '+file://wards/' << picture << '.png|width=' << width printString << '+'.	s cr.	self exportNamesOn: s.	s << '|!! Attack Damage |!! Attack Rate |!! Attack Range |!! Projectile Speed'.	s cr.	s		<< '| ' << damage  		<< ' | ' <<  rate		<< ' | ' <<  range		<< ' | ' <<  projectileSpeed.	s cr.	self exportAbilitiesOn: s! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 18:07' prior: 33747644!clean: string	| ws upNext noUp |	string size = 0 ifTrue: [ ^ string ].	ws := WriteStream on: (string class new: string size).	upNext := true.	string readStreamDo: [ :rs |		[rs peek isUppercase ifTrue: [ noUp ifFalse: [1halt. ws space] ].		noUp := false.		rs peek = $- ifTrue: [ noUp := true ].		ws nextPut: (upNext ifTrue: [rs peek asUppercase] ifFalse: [rs peek]).		upNext := false.		rs peek = Character space ifTrue: [ upNext := true ].		rs next.		rs atEnd ] whileFalse ].	^ ws contents trimBoth	! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 18:08' prior: 33748695!clean: string	| ws upNext noUp |	string size = 0 ifTrue: [ ^ string ].	ws := WriteStream on: (string class new: string size).	upNext := true.	string readStreamDo: [ :rs |		[rs peek = $/ ifTrue: [ ws space ].		rs peek isUppercase ifTrue: [ noUp ifFalse: [ws space] ].		noUp := false.		rs peek = $- ifTrue: [ noUp := true ].		ws nextPut: (upNext ifTrue: [rs peek asUppercase] ifFalse: [rs peek]).		rs peek = $/ ifTrue: [ ws space ].		upNext := false.		rs peek = Character space ifTrue: [ upNext := true ].		rs next.		rs atEnd ] whileFalse ].	^ ws contents trimBoth	! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 18:12' prior: 33749307!clean: string	| ws upNext noUp |	string size = 0 ifTrue: [ ^ string ].	ws := WriteStream on: (string class new: string size).	upNext := true.	string readStreamDo: [ :rs |		[rs peek = $/ ifTrue: [ ws space ].		rs peek isUppercase ifTrue: [ noUp ifFalse: [rs peekBack = Character space ifFalse: [ws space]] ].		noUp := false.		rs peek = $- ifTrue: [ noUp := true ].		ws nextPut: (upNext ifTrue: [rs peek asUppercase] ifFalse: [rs peek]).		rs peek = $/ ifTrue: [ ws space ].		upNext := false.		rs peek = Character space ifTrue: [ upNext := true ].		rs next.		rs atEnd ] whileFalse ].	^ ws contents trimBoth	! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 18:12' prior: 33749984!clean: string	| ws upNext noUp |	string size = 0 ifTrue: [ ^ string ].	ws := WriteStream on: (string class new: string size).	upNext := true.	noUp := false.	string readStreamDo: [ :rs |		[rs peek = $/ ifTrue: [ ws space ].		rs peek isUppercase ifTrue: [ noUp ifFalse: [rs peekBack = Character space ifFalse: [ws space]] ].		noUp := false.		rs peek = $- ifTrue: [ noUp := true ].		ws nextPut: (upNext ifTrue: [rs peek asUppercase] ifFalse: [rs peek]).		rs peek = $/ ifTrue: [ ws space ].		upNext := false.		rs peek = Character space ifTrue: [ upNext := true ].		rs next.		rs atEnd ] whileFalse ].	^ ws contents trimBoth	! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 18:14' prior: 33750702!clean: string	| ws upNext noUp |	string size = 0 ifTrue: [ ^ string ].	ws := WriteStream on: (string class new: string size).	upNext := true.	noUp := false.	string readStreamDo: [ :rs |		[rs peek = $/ ifTrue: [ ws space ].		rs peek isUppercase ifTrue: [ 			noUp ifFalse: [				rs position = 0 ifFalse: [ 					rs peekBack = Character space ifFalse: [ws space] ] ] ].		noUp := false.		rs peek = $- ifTrue: [ noUp := true ].		ws nextPut: (upNext ifTrue: [rs peek asUppercase] ifFalse: [rs peek]).		rs peek = $/ ifTrue: [ ws space ].		upNext := false.		rs peek = Character space ifTrue: [ upNext := true ].		rs next.		rs atEnd ] whileFalse ].	^ ws contents trimBoth	! !----QUIT----2018-01-27T18:14:57.319624+01:00 Pharo.image priorSource: 190794!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!----QUIT/NOSAVE----2018-01-27T18:28:56.691253+01:00 Pharo.image priorSource: 197689!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!----SNAPSHOT----2018-01-27T18:29:13.828975+01:00 Pharo.image priorSource: 197689!!GemTDGod methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 18:30' prior: 33592413!generate	units := OrderedCollection new.	1halt.	self units keysAndValuesDo: [ :u :details |		| cls |		(u beginsWith: 'gemtd') ifTrue: [ 			cls := ((details at: 'Model') beginsWith:'models/items/wards/')				ifTrue: [ u last = $1 ifTrue: [ GemTDBaseTower ] ifFalse: [ GemTDAdvancedTower ] ]				ifFalse: [ GemTDCreep ].		units add: (cls newFrom: u with: details importer: importer)]].! !GemTDElement subclass: #GemTDSlate	instanceVariableNames: ''	classVariableNames: ''	package: 'GemTD-Analysis'!!GemTDGod methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 18:34' prior: 33758308!generate	units := OrderedCollection new.	1halt.	self units keysAndValuesDo: [ :u :details |		| cls |		(u beginsWith: 'gemtd') ifTrue: [ 			cls := ((details at: 'Model') beginsWith:'models/items/wards/')				ifTrue: [ u last = $1 ifTrue: [ GemTDBaseTower ] ifFalse: [ GemTDAdvancedTower ] ]				ifFalse: [ 					((details at: 'Model') beginsWith:'materials/')						ifFalse: [GemTDCreep]						ifTrue: [GemTDSlate]].		units add: (cls newFrom: u with: details importer: importer)]].! !!GemTDGod methodsFor: 'accessing' stamp: 'ClementBera 1/27/2018 18:34' prior: 33758905!generate	units := OrderedCollection new.	self units keysAndValuesDo: [ :u :details |		| cls |		(u beginsWith: 'gemtd') ifTrue: [ 			cls := ((details at: 'Model') beginsWith:'models/items/wards/')				ifTrue: [ u last = $1 ifTrue: [ GemTDBaseTower ] ifFalse: [ GemTDAdvancedTower ] ]				ifFalse: [ 					((details at: 'Model') beginsWith:'materials/')						ifFalse: [GemTDCreep]						ifTrue: [GemTDSlate]].		units add: (cls newFrom: u with: details importer: importer)]].! !----SNAPSHOT----2018-01-27T18:34:42.226302+01:00 Pharo.image priorSource: 203704!!GemTDSlate methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/27/2018 18:35'!importWith: details importer: importer	1halt.	super importWith: details importer: importer.! !!GemTDSlate methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 18:36' prior: 33760134!importWith: details importer: importer	super importWith: details importer: importer.	picture := 'advanced/' , codeName.! !!GemTDSlate methodsFor: 'initialize' stamp: 'ClementBera 1/27/2018 18:37' prior: 33760322!importWith: details importer: importer	super importWith: details importer: importer.	picture := 'advanced/' , codeName.	combo := importer combinations at: codeName ifAbsent: [ #() ].	comboNames := combo collect: [ :c | self enNameFor: c importer: importer ].! !!GemTDSlate methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/27/2018 18:38'!exportOn: s	super exportOn: s.	! !!GemTDElement methodsFor: 'export' stamp: 'ClementBera 1/27/2018 18:38'!exportCombo: combo names: comboNames on: s	combo ifNil: [ ^ self ].	combo size < 2 ifTrue: [ ^ self ] .	s << '|!! Combination |!! Combination |!! Combination |!! Combination'.	s cr.	s 		<< '| ' << comboNames first		<< ' | ' << comboNames second		<< ' | ' << (comboNames size < 3 ifTrue: [ '' ] ifFalse: [ comboNames at: 3 ])		<< ' | ' << (comboNames size < 4 ifTrue: [ '' ] ifFalse: [ 			comboNames size = 5 			ifTrue: [ (comboNames at: 4) , ' & ' , (comboNames at: 5) ]			ifFalse: [comboNames at: 4 ] ]).	s cr.	s 		<< '| ' << combo first		<< ' | ' << combo second		<< ' | ' << (combo size < 3 ifTrue: [ '' ] ifFalse: [ combo at: 3 ])		<< ' | ' << (combo size < 4 ifTrue: [ '' ] ifFalse: [ 			combo size = 5 			ifTrue: [ (combo at: 4) , ' & ' , (combo at: 5) ]			ifFalse: [combo at: 4 ] ]).	s cr.! !!GemTDSlate methodsFor: 'export' stamp: 'ClementBera 1/27/2018 18:38' prior: 33760888!exportOn: s	super exportOn: s.	self exportCombo: combo names: comboNames on: s.! !!GemTDAdvancedTower methodsFor: 'export' stamp: 'ClementBera 1/27/2018 18:38' prior: 33727836!exportOn: s	super exportOn: s.	self exportCombo: combo names: comboNames on: s! !----SNAPSHOT----2018-01-27T18:39:01.406312+01:00 Pharo.image priorSource: 205534!!GemTDSlate methodsFor: 'export' stamp: 'ClementBera 1/27/2018 18:39' prior: 33761907!exportOn: s 	s << '!!!! ' << (name at: 'en') capitalized.	s cr. 	s << '+file://wards/' << picture << '.png|width=8+'.	s cr.	self exportNamesOn: s.	s << '|!! Attack Damage |!! Attack Rate |!! Attack Range |!! Projectile Speed'.	self exportAbilitiesOn: s.	self exportCombo: combo names: comboNames on: s.! !----SNAPSHOT----2018-01-27T18:39:50.521506+01:00 Pharo.image priorSource: 207738!----SNAPSHOT----2018-01-27T18:39:58.388933+01:00 Pharo.image priorSource: 208222!!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/27/2018 18:40' prior: 33739902!exportAdvancedTowers	| s order printed others|	s := WriteStream on: (WideString new: 10000).	printed := #().	order := GemTDOrderParser new parse: 'extra/combinedTowerOrder.txt' asFileReference readStream contents readStream.	order keysAndValuesDo: [ :title :towerCodes |		s << '!! ' << title.		s cr.		towerCodes do: [ :tc |			units detect: [ :u | u codeName = tc ] ifFound: [ :unit |				unit exportOn: s ] ].		printed := printed , towerCodes. ].	others := units select: [ :each | 			(each class = GemTDAdvancedTower or: [ each class = GemTDSlate ]) 			and: [ (printed includes: each codeName) not ] ].	others ifNotEmpty: [ 		s << '!! Others'.		s cr.		others do: [ :u | u exportOn: s ] ].	'export/advancedTowers.pillar' asFileReference writeStream nextPutAll: s contents.! !----QUIT----2018-01-27T18:41:23.727722+01:00 Pharo.image priorSource: 208305!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDSlate methodsFor: 'export' stamp: 'ClementBera 1/27/2018 18:42' prior: 33762341!exportOn: s 	s << '!!!! ' << (name at: 'en') capitalized.	s cr. 	s << '+file://wards/' << picture << '.png|width=8+'.	s cr.	self exportNamesOn: s.	self exportAbilitiesOn: s.	self exportCombo: combo names: comboNames on: s.! !!GemTDSlate methodsFor: 'export' stamp: 'ClementBera 1/27/2018 18:44' prior: 33766790!exportOn: s	"Name incorrect..." 	s << '!!!! ' << (name at: 'en') capitalized.	s cr. 	s << '+file://wards/' << picture << '.png|width=8+'.	s cr.	self exportNamesOn: s.	self exportAbilitiesOn: s.	self exportCombo: combo names: comboNames on: s.! !----QUIT----2018-01-27T18:44:13.386008+01:00 Pharo.image priorSource: 209266!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDSlate methodsFor: 'export' stamp: 'ClementBera 1/27/2018 18:46' prior: 33767110!exportOn: s 	s << '!!!! ' << (name at: 'en') capitalized.	s cr. 	s << '+file://wards/' << picture << '.png|width=8+'.	s cr.	self exportNamesOn: s.	self exportAbilitiesOn: s.	self exportCombo: combo names: comboNames on: s.! !----SNAPSHOT----2018-01-27T18:46:53.422911+01:00 Pharo.image priorSource: 212931!----QUIT----2018-01-27T18:47:27.152753+01:00 Pharo.image priorSource: 216255!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!----QUIT----2018-01-27T18:50:48.500017+01:00 Pharo.image priorSource: 216338!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!----QUIT----2018-01-27T18:51:31.116872+01:00 Pharo.image priorSource: 219342!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 08:27' prior: 33762906!exportAdvancedTowers	| s order printed others|	s := WriteStream on: (WideString new: 10000).	printed := #().	order := GemTDOrderParser new parse: 'extra/combinedTowerOrder.txt' asFileReference readStream contents readStream.	order keysAndValuesDo: [ :title :towerCodes |		s << '!! ' << title.		s cr.		towerCodes do: [ :tc |			units detect: [ :u | u codeName = tc ] ifFound: [ :unit |				unit exportOn: s ] ].		printed := printed , towerCodes. ].	"others := units select: [ :each | 			(each class = GemTDAdvancedTower or: [ each class = GemTDSlate ]) 			and: [ (printed includes: each codeName) not ] ].	others ifNotEmpty: [ 		s << '!! Others'.		s cr.		others do: [ :u | u exportOn: s ] ]."	'export/advancedTowers.pillar' asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 08:27' prior: 33779868!exportAdvancedTowers	| s order printed others|	s := WriteStream on: (WideString new: 10000).	printed := #().	order := GemTDOrderParser new parse: 'extra/combinedTowerOrder.txt' asFileReference readStream contents readStream.	order keysAndValuesDo: [ :title :towerCodes |		s << '!! ' << title.		s cr.		towerCodes do: [ :tc |			units detect: [ :u | u codeName = tc ] ifFound: [ :unit |				unit exportOn: s ] ].		printed := printed , towerCodes. ].	others := units select: [ :each | 			(each class = GemTDAdvancedTower or: [ each class = GemTDSlate ]) 			and: [ (printed includes: each codeName) not ] ].	others ifNotEmpty: [ 		s << '!! Others'.		s cr.		others do: [ :u | u exportOn: s ] ].	'export/advancedTowers.pillar' asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 08:27' prior: 33780748!exportAdvancedTowers	| s order printed others |	s := WriteStream on: (WideString new: 10000).	printed := #().	order := GemTDOrderParser new parse: 'extra/combinedTowerOrder.txt' asFileReference readStream contents readStream.	order keysAndValuesDo: [ :title :towerCodes |		s << '!! ' << title.		s cr.		towerCodes do: [ :tc |			units detect: [ :u | u codeName = tc ] ifFound: [ :unit |				unit exportOn: s ] ].		printed := printed , towerCodes. ].	others := units select: [ :each | 			(each class = GemTDAdvancedTower or: [ each class = GemTDSlate ]) 			and: [ (printed includes: each codeName) not ] ].	others ifNotEmpty: [ 		s << '!! Others'.		s cr.		others do: [ :u | u exportOn: s ] ].	'export/advancedTowers.pillar' asFileReference writeStream nextPutAll: s contents.! !----SNAPSHOT----2018-01-28T08:27:33.455142+01:00 Pharo.image priorSource: 222346!----SNAPSHOT----2018-01-28T08:27:36.207838+01:00 Pharo.image priorSource: 227987!----SNAPSHOT----2018-01-28T08:27:39.217495+01:00 Pharo.image priorSource: 228070!----SNAPSHOT----2018-01-28T08:27:46.136783+01:00 Pharo.image priorSource: 228153!!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 08:28' prior: 33682749!combinations	combinations ifNotNil: [ ^ combinations ].	combinations := Dictionary new.	self parseCombinations: 'GameRules.gemtd_merge'.	self parseCombinations: 'GameRules.gemtd_merge_secret'.	self parseCombinations: 'GameRules.gemtd_merge_shiban'.	^ combinations! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 08:31'!creepExtraAbilities	creepExtraAbilities ifNotNil: [ ^ creepExtraAbilities ].	creepExtraAbilities := Array new: 150.	self parseCreepAbilites: 'GameRules.guai_ability'.	^ creepExtraAbilities! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 08:32'!parseCreepAbilites: sub	| i combos |	i := scripts first indexOfSubCollection: sub.	i := i + sub size.	^ GemTDLuaParser new parseArray: (scripts first copyFrom: i to: i + 100000) readStream! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 08:32' prior: 33783468!parseCreepAbilites: sub	| i |	i := scripts first indexOfSubCollection: sub.	i := i + sub size.	^ GemTDLuaParser new parseArray: (scripts first copyFrom: i to: i + 100000) readStream! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 08:32' prior: 33783195!creepExtraAbilities	creepExtraAbilities ifNotNil: [ ^ creepExtraAbilities ].	^ creepExtraAbilities := self parseCreepAbilites: 'GameRules.guai_ability'! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 08:33' prior: 33784039!creepExtraAbilities	creepExtraAbilities ifNotNil: [ ^ creepExtraAbilities ].	^ creepExtraAbilities := self parseCreepAbilites! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 08:35'!parseCreepAbilites	| creeps creepsAB |	creeps := self parseCreepAbilites: 'GameRules.guai'.	creepsAB := self parseCreepAbilites: 'GameRules.guai_ability'.	1halt.	"Need to make dict with intel"! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/28/2018 08:35'!parseArray: rs	result := Array new: 150.	readStream := rs.	1halt.	"self skipUntilRelevant.	readStream next.	[self skipSeparators.	 readStream peek = $} ] whileFalse: [ 	  self parseCombination.	  self skipSeparators.	  readStream peek = $, ifTrue: [ readStream next ]].	^ result"! !----SNAPSHOT----2018-01-28T08:35:44.41547+01:00 Pharo.image priorSource: 228236!!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/28/2018 08:36' prior: 33659526!importWith: details importer: importer	super importWith: details importer: importer.	self importExtraAbilities: importer.	level := details at: 'Level'.	mc := details at: 'MovementCapabilities'.	ms := details at: 'MovementSpeed'.	res := details at: 'MagicalResistance'.	armor := details at: 'ArmorPhysical'.	hp := details at: 'StatusHealth'.! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/28/2018 08:37'!importExtraAbilities: importer	(importer creepExtraAbilities at: codeName ifAbsent: [#()]) do: [:ab |		].! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/28/2018 08:38' prior: 33596670!importWith: details importer: importer	self importNameWithImporter: importer.	abilities := OrderedCollection new.	self importAbilities: details importer: importer! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/28/2018 08:38'!importAbilities: details importer: importer	1 to: 8 do: [ :i |		| ab |		ab := (details at: 'Ability' , i printString).		ab = '' ifFalse: [ 			abilities add: (GemTDAbility newFrom: ab importer: importer) ] ].	hiddenAbilities := OrderedCollection new.	9 to: 16 do: [ :i |		| ab |		ab := (details at: 'Ability' , i printString).		ab = '' ifFalse: [ 			hiddenAbilities add: (GemTDAbility newFrom: ab importer: importer ) ] ].! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/28/2018 08:38' prior: 33786110!importAbilities: details importer: importer	1 to: 16 do: [ :i |		| ab |		ab := (details at: 'Ability' , i printString).		ab = '' ifFalse: [ 			abilities add: (GemTDAbility newFrom: ab importer: importer) ] ].! !!GemTDElement methodsFor: 'export' stamp: 'ClementBera 1/28/2018 08:38' prior: 33700026!exportAbilitiesOn: s	abilities do: [ :ab |		ab shortExportOn: s ]! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/28/2018 08:39' prior: 33785660!importExtraAbilities: importer	(importer creepExtraAbilities at: codeName ifAbsent: [#()]) do: [:ab |		abilities add: (GemTDAbility newFrom: ab importer: importer) ].! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 08:40' prior: 33784497!parseCreepAbilites	| creeps creepsAB |	creeps := self parseCreepAbilites: 'GameRules.guai ='.	creepsAB := self parseCreepAbilites: 'GameRules.guai_ability ='.	1halt.	"Need to make dict with intel"! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/28/2018 08:41' prior: 33784774!parseArray: rs	result := Array new: 150.	readStream := rs.	self skipUntilRelevant.	readStream next.	[self skipSeparators.	 readStream peek = $} ] whileFalse: [ 	  self parseArrayCombination.	  self skipSeparators.	  readStream peek = $, ifTrue: [ readStream next ]].	^ result! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/28/2018 08:41'!parseArrayCombination	self shouldBeImplemented.! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/28/2018 08:42' prior: 33788030!parseArrayCombination	self assert: readStream peek = $[.	readStream next.	Integer readFrom: readStream.	1halt.! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/28/2018 08:43' prior: 33788174!parseArrayCombination	| key val |	self assert: readStream peek = $[.	readStream next.	key := Integer readFrom: readStream.	self assert: readStream peek = $].	readStream next.	val := self parseString.	result at: key put: val! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 08:43' prior: 33787368!parseCreepAbilites	| creeps creepsAB |	creeps := self parseCreepAbilites: 'GameRules.guai ='.	creepsAB := self parseCreepAbilites2: 'GameRules.guai_ability ='.	1halt.	"Need to make dict with intel"! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 08:44'!parseCreepAbilites2: sub	| i |	i := scripts first indexOfSubCollection: sub.	i := i + sub size.	^ GemTDLuaParser new parseArrayArray: (scripts first copyFrom: i to: i + 100000) readStream! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/28/2018 08:44'!parseArrayArray: rs	result := Array new: 150.	readStream := rs.	self skipUntilRelevant.	readStream next.	[self skipSeparators.	 readStream peek = $} ] whileFalse: [ 	  self parseArrayArrayCombination.	  self skipSeparators.	  readStream peek = $, ifTrue: [ readStream next ]].	^ result! !!GemTDNameParser methodsFor: 'parsing' stamp: 'ClementBera 1/28/2018 08:45' prior: 33742964!parse: rs	result := OrderedCollection new.	readStream := rs.	readStream next. "skip {"	self skipSeparators.	[result add: self parseDirect.	 self skipSeparators.	readStream peek = $}] whileFalse.	2 to: result size by: 2 do: [ :i |		result at: i put: (result at: i) ].	^ Dictionary newFromPairs: result! !GemTDNameParser removeSelector: #rework:!----SNAPSHOT----2018-01-28T08:45:17.331943+01:00 Pharo.image priorSource: 230635!!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/28/2018 08:45' prior: 33751436!clean: string	| ws upNext noUp |	string size = 0 ifTrue: [ ^ string ].	ws := WriteStream on: (string class new: string size).	upNext := true.	noUp := false.	string readStreamDo: [ :rs |		[rs peek = $/ ifTrue: [ ws space ].		rs peek isUppercase ifTrue: [ 			noUp ifFalse: [				rs position = 0 ifFalse: [ 					(rs peekBack = Character space or: [ rs peekBack isUppercase ]) ifFalse: [ws space] ] ] ].		noUp := false.		rs peek = $- ifTrue: [ noUp := true ].		ws nextPut: (upNext ifTrue: [rs peek asUppercase] ifFalse: [rs peek]).		rs peek = $/ ifTrue: [ ws space ].		upNext := false.		rs peek = Character space ifTrue: [ upNext := true ].		rs next.		rs atEnd ] whileFalse ].	^ ws contents trimBoth	! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/28/2018 08:46'!parseWith: selector	self skipUntilRelevant.	readStream next.	[self skipSeparators.	 readStream peek = $} ] whileFalse: [ 	  self perform: selector.	  self skipSeparators.	  readStream peek = $, ifTrue: [ readStream next ]].	^ result! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/28/2018 08:46' prior: 33733230!parse: rs	result := self dictClass new.	readStream := rs.	^ self parseWith: #parseCombination! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/28/2018 08:46' prior: 33787665!parseArray: rs	result := Array new: 150.	readStream := rs.	^ self parseWith: #parseArrayCombination! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/28/2018 08:46' prior: 33789266!parseArrayArray: rs	result := Array new: 150.	readStream := rs.	^ self parseWith: #parseArrayArrayCombination! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/28/2018 08:47'!parseArrayArrayCombination	| key val |	self assert: readStream peek = $[.	readStream next.	key := Integer readFrom: readStream.	self assert: readStream peek = $].	readStream next.	val := self parseString.	result at: key put: val! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/28/2018 08:47' prior: 33791905!parseArrayArrayCombination	| key val |	self assert: readStream peek = $[.	readStream next.	key := Integer readFrom: readStream.	self assert: readStream peek = $].	readStream next.	val := self parseCombo.	result at: key put: val! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/28/2018 08:49' prior: 33788384!parseArrayCombination	| key val |	self assert: readStream peek = $[.	readStream next.	key := Integer readFrom: readStream.	self assert: readStream peek = $].	readStream next.	self skipSeparators.	self assert: readStream peek = $=.	readStream next.	self skipSeparators.	val := self parseString.	result at: key put: val! !!GemTDParser methodsFor: 'parsing' stamp: 'ClementBera 1/28/2018 08:51'!skipUntil: character	[readStream peek = character] whileFalse: [ readStream next ].! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/28/2018 08:51' prior: 33790987!parseWith: selector	self skipUntilRelevant.	readStream next.	[self skipSeparators.	 readStream peek = $} ] whileFalse: [ 	  readStream peek = $- ifTrue: [ self skipUntil: Character cr. self skipSeparators ].	  self perform: selector.	  self skipSeparators.	  readStream peek = $, ifTrue: [ readStream next ]].	^ result! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/28/2018 08:52'!parseArrayCombinationWith: selector	| key val |	self assert: readStream peek = $[.	readStream next.	key := Integer readFrom: readStream.	self assert: readStream peek = $].	readStream next.	self skipSeparators.	self assert: readStream peek = $=.	readStream next.	self skipSeparators.	val := self perform: selector.	result at: key put: val! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/28/2018 08:52' prior: 33792568!parseArrayCombination	^ self parseArrayCombinationWith: #parseString! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/28/2018 08:53' prior: 33792237!parseArrayArrayCombination	^ self parseArrayCombinationWith: #parseCombo! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/28/2018 08:54' prior: 33733818!parseComboWith: parseSelector	| ws |	ws := WriteStream on: (Array new: 5).	self skipUntilRelevant.	self assert: readStream peek = ${.	readStream next. "skip {"	readStream peek = $} ifTrue: [ readStream next. ^ #() ].	self skipSeparators.	ws nextPut: (self perform: parseSelector).	[self skipSeparators.	readStream peek = $,] whileTrue: [ 	readStream next. "skip ,"	self skipSeparators.	ws nextPut: (self perform: parseSelector) ].	self skipUntilRelevant.	self assert: readStream peek = $}.	readStream next. "skip }"	^ ws contents	! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 08:59' prior: 33788712!parseCreepAbilites	| creeps creepsAB dict  |	creeps := self parseCreepAbilites: 'GameRules.guai ='.	creepsAB := self parseCreepAbilites2: 'GameRules.guai_ability ='.	dict := Dictionary new.	creeps withIndexDo: [ :cr :i |		cr ifNotNil: [ dict at: cr put: (i -> creeps at: i - 1 \\ 50 + 1) ] ].	^ dict! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 09:00' prior: 33794985!parseCreepAbilites	| creeps creepsAB dict  |	creeps := self parseCreepAbilites: 'GameRules.guai ='.	creepsAB := self parseCreepAbilites2: 'GameRules.guai_ability ='.	dict := Dictionary new.	creeps withIndexDo: [ :cr :i |		cr ifNotNil: [ dict at: cr put: (i -> (creeps at: i - 1 \\ 50 + 1)) ] ].	^ dict! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/28/2018 09:01' prior: 33787103!importExtraAbilities: importer	| assoc |	assoc := importer creepExtraAbilities at: codeName ifAbsent: [#()].	hiddenLevel := assoc key.	assoc value do: [:ab |		abilities add: (GemTDAbility newFrom: ab importer: importer) ].! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 09:01' prior: 33795388!parseCreepAbilites	| creeps creepsAB dict  |	creeps := self parseCreepAbilites: 'GameRules.guai ='.	creepsAB := self parseCreepAbilites2: 'GameRules.guai_ability ='.	dict := Dictionary new.	creeps withIndexDo: [ :cr :i |		cr ifNotNil: [ dict at: cr put: (i -> (creepsAB at: i - 1 \\ 50 + 1)) ] ].	^ dict! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/28/2018 09:02' prior: 33795787!importExtraAbilities: importer	| assoc |	assoc := importer creepExtraAbilities at: codeName ifAbsent: [#()].	hiddenLevel := assoc key.	1halt.	assoc value do: [:ab |		abilities add: (GemTDAbility newFrom: ab importer: importer) ].! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/28/2018 09:02' prior: 33796512!importExtraAbilities: importer	| assoc |	assoc := importer creepExtraAbilities at: codeName ifAbsent: [#()].	hiddenLevel := assoc key.	assoc value do: [:ab |		abilities add: (GemTDAbility newFrom: ab importer: importer) ].! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/28/2018 09:05' prior: 33791323!parse: rs	result := self dictClass new.	readStream := rs.	^ self parse2With: #parseCombination! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/28/2018 09:06' prior: 33797161!parse: rs	result := self dictClass new.	readStream := rs.	^ self parseWith: #parseCombination! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/28/2018 09:07' prior: 33681496!parseCombination	| res combo |	res := self parseRes.	combo := self parseCombo.	self skipSeparators.	readStream peek = $- ifTrue: [ 1halt ].	result at: res put: combo.! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/28/2018 09:08' prior: 33797546!parseCombination	| res combo |	res := self parseRes.	combo := self parseCombo.	self skipUntil: Character cr.	1halt.	result at: res put: combo.! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/28/2018 09:10' prior: 33797814!parseCombination	| res combo |	res := self parseRes.	combo := self parseCombo.	self skipUntil: Character cr.	self skipSeparators.	readStream peek = $- ifTrue: [ 1halt ].	result at: res put: combo.! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/28/2018 09:11' prior: 33798058!parseCombination	| res combo |	res := self parseRes.	combo := self parseCombo.	self skipUntil: Character cr.	self skipSeparators.	readStream peek = $- ifTrue: [ readStream next: 2. self skipSeparators. ].	result at: res put: combo.! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/28/2018 09:11' prior: 33796838!importExtraAbilities: importer	| assoc |	assoc := importer creepExtraAbilities at: codeName ifAbsent: [0->#()].	hiddenLevel := assoc key.	assoc value do: [:ab |		abilities add: (GemTDAbility newFrom: ab importer: importer) ].! !!GemTDOrderParser methodsFor: 'parsing' stamp: 'ClementBera 1/28/2018 09:14'!parseCombination	| res combo |	res := self parseRes.	combo := self parseCombo.	result at: res put: combo.! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 09:18'!orderedCreeps	| d arr |	d := self creepExtraAbilities.	arr = Array new: 50.	arr atAllPut: (OrderedCollection new: 3).	d keysAndValuesDo: [ :codeName :assoc |		(arr at: (assoc key - 1 \\ 50 + 1)) add: codeName ].	^ arr! !----SNAPSHOT----2018-01-28T09:18:55.748606+01:00 Pharo.image priorSource: 235582!----SNAPSHOT----2018-01-28T09:20:25.634733+01:00 Pharo.image priorSource: 244983!!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 09:23' prior: 33651503!exportCreeps	| s printed others |	s := WriteStream on: (WideString new: 10000).	s << '!! Creeps'.	s cr.	importer orderedCreeps withIndexDo: [ :col :index |		s << '!!!! Level ' << index printString.		s cr.		col do: [ :u | u exportOn: s ] ].	s << '!!!! Others '.	s cr.	printed := importer orderedCreeps flatten.	others := self orderedCreeps reject: [ :u | printed includes: u ].	others do: [ :u | u exportOn: s ].	'export/creeps.pillar' asFileReference writeStream nextPutAll: s contents.! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/28/2018 09:25' prior: 33700238!exportOn: s	((name at: 'en') = 'Unavailable' or: [ (name at: 'en') = '' ]) ifTrue: [ ^ self ].	self exportNamesOn: s.	s << '|!! Base HP |!! Base Movement |!! Armor |!! Magic resistance'.	s cr.	s 		<< '| ' << hp 		<< ' | ' <<  ms. 	mc = 'DOTA_UNIT_CAP_MOVE_FLY' ifTrue: [ s << ' (flying)' ].	s		<< ' | ' <<  armor		<< ' | ' <<  res.	s cr.	self exportAbilitiesOn: s! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 09:26' prior: 33799667!exportCreeps	| s printed others |	s := WriteStream on: (WideString new: 10000).	s << '!! Creeps'.	s cr.	importer orderedCreeps withIndexDo: [ :col :index |		s << '!!!! Level ' << index printString << ' '.		(col collect: [ :u | u name at: 'en' ]) 			do: [ :n | s << n ]			separatedBy: [ s << ' & ' ].		s cr.		col do: [ :u | u exportOn: s ] separatedBy: [ s cr ] ].	s << '!!!! Others '.	s cr.	printed := importer orderedCreeps flatten.	others := self orderedCreeps reject: [ :u | printed includes: u ].	others do: [ :u | u exportOn: s ].	'export/creeps.pillar' asFileReference writeStream nextPutAll: s contents.! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 09:27' prior: 33799188!orderedCreeps	| d arr | 	d := self creepExtraAbilities.	arr = Array new: 50.	arr atAllPut: (OrderedCollection new: 3).	d keysAndValuesDo: [ :codeName :assoc |		(arr at: (assoc key - 1 \\ 50 + 1)) add: codeName ].	^ arr! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 09:27' prior: 33801447!orderedCreeps	| d arr | 	d := self creepExtraAbilities.	arr := Array new: 50.	arr atAllPut: (OrderedCollection new: 3).	d keysAndValuesDo: [ :codeName :assoc |		(arr at: (assoc key - 1 \\ 50 + 1)) add: codeName ].	^ arr! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 09:29'!unitNamed: codeName do: aBlock ifNone: exceptionBlock	^ units detect: [ :u | u codeName = codeName ] ifFound: aBlock ifNone: exceptionBlock! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 09:29' prior: 33781626!exportAdvancedTowers	| s order printed others |	s := WriteStream on: (WideString new: 10000).	printed := #().	order := GemTDOrderParser new parse: 'extra/combinedTowerOrder.txt' asFileReference readStream contents readStream.	order keysAndValuesDo: [ :title :towerCodes |		s << '!! ' << title.		s cr.		towerCodes do: [ :tc |			self unitNamed: tc do: [ :unit | unit exportOn: s ] ifNone: [ ] ].		printed := printed , towerCodes. ].	others := units select: [ :each | 			(each class = GemTDAdvancedTower or: [ each class = GemTDSlate ]) 			and: [ (printed includes: each codeName) not ] ].	others ifNotEmpty: [ 		s << '!! Others'.		s cr.		others do: [ :u | u exportOn: s ] ].	'export/advancedTowers.pillar' asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 09:30' prior: 33800723!exportCreeps	| s printed others |	s := WriteStream on: (WideString new: 10000).	s << '!! Creeps'.	s cr.	importer orderedCreeps withIndexDo: [ :col :index |		s << '!!!! Level ' << index printString << ' '.		(col collect: [ :u | self unitNamed: u do: [ :unit | unit name at: 'en' ] ifNone: [ '' ] ]) 			do: [ :n | s << n ]			separatedBy: [ s << ' & ' ].		s cr.		col do: [ :u | self unitNamed: u do: [ :unit | unit exportOn: s ] ifNone: [ ] ] separatedBy: [ s cr ] ].	s << '!!!! Others '.	s cr.	printed := importer orderedCreeps flatten.	others := self orderedCreeps reject: [ :u | printed includes: u ].	others do: [ :u | u exportOn: s ].	'export/creeps.pillar' asFileReference writeStream nextPutAll: s contents.! !----SNAPSHOT----2018-01-28T09:31:00.063226+01:00 Pharo.image priorSource: 245066!Object subclass: #GemTDElement	instanceVariableNames: 'codeName name abilities'	classVariableNames: ''	package: 'GemTD-Analysis'!!GemTDElement methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 09:31'!name	^ name! !!GemTDElement methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 09:31'!name: anObject	name := anObject! !!GemTDElement methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 09:31'!abilities	^ abilities! !!GemTDElement methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 09:31'!abilities: anObject	abilities := anObject! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 09:32' prior: 33803159!exportCreeps	| s printed others |	s := WriteStream on: (WideString new: 10000).	s << '!! Creeps'.	s cr.	importer orderedCreeps withIndexDo: [ :col :index |		s << '!!!! Level ' << index printString << ' '.		(col collect: [ :u | self unitNamed: u do: [ :unit | unit name at: 'en' ] ifNone: [ '' ] ]) 			do: [ :n | s << n ]			separatedBy: [ s << ' & ' ].		s cr.		col do: [ :u | self unitNamed: u do: [ :unit | unit exportOn: s ] ifNone: [ ] ] separatedBy: [ s cr ] ].	s << '!!!! Others '.	s cr.	printed := importer orderedCreeps flattened asSet asArray.	others := self orderedCreeps reject: [ :u | printed includes: u ].	others do: [ :u | u exportOn: s ].	'export/creeps.pillar' asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 09:32' prior: 33804621!exportCreeps	| s printed others |	s := WriteStream on: (WideString new: 10000).	s << '!! Creeps'.	s cr.	importer orderedCreeps withIndexDo: [ :col :index |		s << '!!!! Level ' << index printString << ' '.		(col collect: [ :u | self unitNamed: u do: [ :unit | unit name at: 'en' ] ifNone: [ '' ] ]) 			do: [ :n | s << n ]			separatedBy: [ s << ' & ' ].		s cr.		col do: [ :u | self unitNamed: u do: [ :unit | unit exportOn: s ] ifNone: [ ] ] separatedBy: [ s cr ] ].	s << '!!!! Others '.	s cr.	printed := importer orderedCreeps flattened asSet.	others := self orderedCreeps reject: [ :u | printed includes: u ].	others do: [ :u | u exportOn: s ].	'export/creeps.pillar' asFileReference writeStream nextPutAll: s contents.! !----SNAPSHOT----2018-01-28T09:32:07.538584+01:00 Pharo.image priorSource: 249458!!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 09:33' prior: 33805454!exportCreeps	| s printed others |	s := WriteStream on: (WideString new: 10000).	s << '!! Creeps'.	s cr.	1halt.	importer orderedCreeps withIndexDo: [ :col :index |		s << '!!!! Level ' << index printString << ' '.		(col collect: [ :u | self unitNamed: u do: [ :unit | unit name at: 'en' ] ifNone: [ '' ] ]) 			do: [ :n | s << n ]			separatedBy: [ s << ' & ' ].		s cr.		col do: [ :u | self unitNamed: u do: [ :unit | unit exportOn: s ] ifNone: [ ] ] separatedBy: [ s cr ] ].	s << '!!!! Others '.	s cr.	printed := importer orderedCreeps flattened asSet.	others := self orderedCreeps reject: [ :u | printed includes: u ].	others do: [ :u | u exportOn: s ].	'export/creeps.pillar' asFileReference writeStream nextPutAll: s contents.! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 09:35' prior: 33801769!orderedCreeps	| d arr | 	d := self creepExtraAbilities.	arr := Array new: 50.	1 to: arr size do: [ :i | arr at: i put: (OrderedCollection new: 3) ].	d keysAndValuesDo: [ :codeName :assoc |		(arr at: (assoc key - 1 \\ 50 + 1)) add: codeName ].	^ arr! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 09:35' prior: 33806362!exportCreeps	| s printed others |	s := WriteStream on: (WideString new: 10000).	s << '!! Creeps'.	s cr.	importer orderedCreeps withIndexDo: [ :col :index |		s << '!!!! Level ' << index printString << ' '.		(col collect: [ :u | self unitNamed: u do: [ :unit | unit name at: 'en' ] ifNone: [ '' ] ]) 			do: [ :n | s << n ]			separatedBy: [ s << ' & ' ].		s cr.		col do: [ :u | self unitNamed: u do: [ :unit | unit exportOn: s ] ifNone: [ ] ] separatedBy: [ s cr ] ].	s << '!!!! Others '.	s cr.	printed := importer orderedCreeps flattened asSet.	others := self orderedCreeps reject: [ :u | printed includes: u ].	others do: [ :u | u exportOn: s ].	'export/creeps.pillar' asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 09:36' prior: 33807547!exportCreeps	| s printed others |	s := WriteStream on: (WideString new: 10000).	s << '!! Creeps'.	s cr.	importer orderedCreeps withIndexDo: [ :col :index |		s << '!!!! Level ' << index printString << ' '.		(col collect: [ :u | self unitNamed: u do: [ :unit | unit name at: 'en' ] ifNone: [ '' ] ]) 			do: [ :n | s << n ]			separatedBy: [ s << ' & ' ].		s cr.		col do: [ :u | self unitNamed: u do: [ :unit | unit exportOn: s ] ifNone: [ ] ] separatedBy: [ s cr ] ].	s << '!!!! Others '.	s cr.	printed := importer orderedCreeps flattened asSet.	others := self orderedCreeps reject: [ :u | printed includes: u codeName ].	others do: [ :u | u exportOn: s ] separatedBy: [s cr].	'export/creeps.pillar' asFileReference writeStream nextPutAll: s contents.! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 09:40' prior: 33796111!parseCreepAbilites	| creeps creepsAB dict  |	creeps := self parseCreepAbilites: 'GameRules.guai ='.	creepsAB := self parseCreepAbilites2: 'GameRules.guai_ability ='.	scriptSpecials := self parseCreepScriptSpecial.	dict := Dictionary new.	creeps withIndexDo: [ :cr :i |		cr ifNotNil: [ dict at: cr put: (i -> (creepsAB at: i - 1 \\ 50 + 1)) ] ].	^ dict! !----SNAPSHOT----2018-01-28T09:40:37.489429+01:00 Pharo.image priorSource: 251761!GemTDLuaParser subclass: #GemTDLuaMatcher	instanceVariableNames: ''	classVariableNames: ''	package: 'GemTD-Analysis'!!GemTDLuaMatcher methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 09:49'!matchFrom: string	| str |	str := string.	result := OrderedCollection new.	[str beginsWith: 'if (GameRules.guai_level'] whileTrue: [ 		str := self match: string readStream].	^ result! !!GemTDLuaMatcher methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 09:53'!match: rs	"if (GameRules.guai_level ==35 and RandomInt(1,100)>50 ) then				guai_name = guai_name..""1""			end"	| lvl random val |	readStream := rs	self skipUntil: $=.	readStream next: 2.	self skipSeparators.	lvl := Integer readFrom: readStream.	self skipUntil: $>.	readStream next.	self skipSeparators.	random := Integer readFrom: readStream.	self skipUntil: $=.	readStream next.	self skipSeparators.	val := readStream peek = $" 		ifTrue: [ self parseString ]		ifFalse: [ #hundred ].		result add: { lvl . random . val }	! !!GemTDLuaMatcher methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 09:54' prior: 33810171!match: rs	"if (GameRules.guai_level ==35 and RandomInt(1,100)>50 ) then				guai_name = guai_name..""1""			end"	| lvl random val |	readStream := rs.	self skipUntil: $=.	readStream next: 2.	self skipSeparators.	lvl := Integer readFrom: readStream.	self skipUntil: $>.	readStream next.	self skipSeparators.	random := Integer readFrom: readStream.	self skipUntil: $=.	readStream next.	self skipSeparators.	val := readStream peek = $" 		ifTrue: [ self parseString ]		ifFalse: [ #hundred ].		result add: { lvl . random . val }	! !!GemTDLuaMatcher methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 09:54' prior: 33810821!match: rs	"if (GameRules.guai_level ==35 and RandomInt(1,100)>50 ) then				guai_name = guai_name..""1""			end"	| lvl random val |	readStream := rs.	self skipUntil: $=.	readStream next: 2.	self skipSeparators.	lvl := Integer readFrom: readStream.	self skipUntil: $>.	readStream next.	self skipSeparators.	random := Integer readFrom: readStream.	self skipUntil: $=.	readStream next.	self skipSeparators.	val := readStream peek = $" 		ifTrue: [ self parseString ]		ifFalse: [ #hundred ].	result add: { lvl . random . val }.	^ rs position	! !!GemTDLuaMatcher methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 09:54' prior: 33809891!matchFrom: string	| str |	str := string.	result := OrderedCollection new.	[str beginsWith: 'if (GameRules.guai_level'] whileTrue: [ 		str := str allButFirst: (self match: string readStream)].	^ result! !!GemTDLuaMatcher methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 09:55' prior: 33811472!match: rs	"if (GameRules.guai_level ==35 and RandomInt(1,100)>50 ) then				guai_name = guai_name..""1""			end"	| lvl random val |	readStream := rs.	self skipUntil: $=.	readStream next: 2.	self skipSeparators.	lvl := Integer readFrom: readStream.	self skipUntil: $>.	readStream next.	self skipSeparators.	random := Integer readFrom: readStream.	self skipUntil: $=.	readStream next.	self skipSeparators.	val := readStream peek = $" 		ifTrue: [ self parseString ]		ifFalse: [ #hundred ].	result add: { lvl . random . val }.	self skipUntil: Character cr.	self skipUntil: Character cr.	self skipSeparators.	^ rs position	! !!GemTDLuaMatcher methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 09:55' prior: 33812138!matchFrom: string	| str |	str := string.	result := OrderedCollection new.	[str beginsWith: 'if (GameRules.guai_level'] whileTrue: [ 		str := str allButFirst: (self match: string readStream)].	1halt.	^ result! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 09:56'!parseCreepScriptSpecial	| i |	i := scripts first indexOfSubCollection: 'if (GameRules.guai_level'.	^ GemTDLuaMatcher new match: (scripts first copyFrom: i to: i + 10000) ! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 09:56' prior: 33813498!parseCreepScriptSpecial	| i |	i := scripts first indexOfSubCollection: 'if (GameRules.guai_level'.	^ GemTDLuaMatcher new matchFrom: (scripts first copyFrom: i to: i + 10000) ! !!GemTDLuaMatcher methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 09:57' prior: 33812453!match: rs	"if (GameRules.guai_level ==35 and RandomInt(1,100)>50 ) then				guai_name = guai_name..""1""			end"	| lvl random val |	readStream := rs.	self skipUntil: $=.	readStream next: 2.	self skipSeparators.	lvl := Integer readFrom: readStream.	self skipUntil: $>.	readStream next.	self skipSeparators.	random := Integer readFrom: readStream.	self skipUntil: $=.	readStream next.	self skipSeparators.	val := readStream peek = $" 		ifTrue: [ self parseString ]		ifFalse: [ #hundred ].	result add: { lvl . random . val }.	self skipUntil: Character cr.	readStream next.	self skipUntil: Character cr.	self skipSeparators.	^ rs position	! !!GemTDLuaMatcher methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 09:58' prior: 33813203!matchFrom: string	| str |	str := string.	result := OrderedCollection new.	[str beginsWith: 'if (GameRules.guai_level'] whileTrue: [ 		str := str allButFirst: (self match: str readStream)].	1halt.	^ result! !!GemTDLuaMatcher methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 09:59' prior: 33814822!matchFrom: string	| str |	str := string.	result := OrderedCollection new.	[str beginsWith: 'if (GameRules.guai_level'] whileTrue: [ 		str := str allButFirst: (self match: str readStream)].	^ result! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 10:00' prior: 33809234!parseCreepAbilites	| creeps creepsAB dict  |	creeps := self parseCreepAbilites: 'GameRules.guai ='.	creepsAB := self parseCreepAbilites2: 'GameRules.guai_ability ='.	dict := Dictionary new.	creeps withIndexDo: [ :cr :i |		cr ifNotNil: [ dict at: cr put: (i -> (creepsAB at: i - 1 \\ 50 + 1)) ] ].	^ dict! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 10:00'!creepScriptSpecials	scriptSpecials ifNotNil: [ ^ scriptSpecials ].	^ scriptSpecials := self parseCreepScriptSpecial.! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 10:04' prior: 33807203!orderedCreeps	| d arr | 	d := self creepExtraAbilities.	arr := Array new: 50.	1 to: arr size do: [ :i | arr at: i put: (OrderedCollection new: 3) ].	d keysAndValuesDo: [ :codeName :assoc |		(arr at: (assoc key - 1 \\ 50 + 1)) add: codeName ].	self creepScriptSpecials do: [ :array |		"lvl random codeName"		(arr at: array first) add: array allButFirst ].	^ arr! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 10:05' prior: 33816048!orderedCreeps	| d arr | 	d := self creepExtraAbilities.	arr := Array new: 50.	1 to: arr size do: [ :i | arr at: i put: (OrderedCollection new: 3) ].	d keysAndValuesDo: [ :codeName :assoc |		(arr at: (assoc key - 1 \\ 50 + 1)) add: {nil . codeName} ].	self creepScriptSpecials do: [ :array |		"lvl random codeName"		(arr at: array first) add: { 100 - array second . array third } ].	^ arr! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 10:07' prior: 33808372!exportCreeps	| s printed others |	s := WriteStream on: (WideString new: 10000).	s << '!! Creeps'.	s cr.	importer orderedCreeps withIndexDo: [ :col :index |		s << '!!!! Level ' << index printString << ' '.		(col collect: [ :u | "u is {random.codeName}"			self unitNamed: u second do: [ :unit | 				(unit name at: 'en') , (u first 					ifNil: [ '' ] 					ifNotNil: [ :it | ' (' , it printString , '%)' ]) ] ifNone: [ '' ] ]) 			do: [ :n | s << n ]			separatedBy: [ s << ' & ' ].		s cr.		col do: [ :u | self unitNamed: u do: [ :unit | unit exportOn: s ] ifNone: [ ] ] separatedBy: [ s cr ] ].	s << '!!!! Others '.	s cr.	1halt.	printed := importer orderedCreeps flattened asSet.	others := self orderedCreeps reject: [ :u | printed includes: u codeName ].	others do: [ :u | u exportOn: s ] separatedBy: [s cr].	'export/creeps.pillar' asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 10:07' prior: 33817001!exportCreeps	| s printed others |	s := WriteStream on: (WideString new: 10000).	s << '!! Creeps'.	s cr.	importer orderedCreeps withIndexDo: [ :col :index |		s << '!!!! Level ' << index printString << ' '.		(col collect: [ :u | "u is {random.codeName}"			self unitNamed: u second do: [ :unit | 				(unit name at: 'en') , (u first 					ifNil: [ '' ] 					ifNotNil: [ :it | ' (' , it printString , '%)' ]) ] ifNone: [ '' ] ]) 			do: [ :n | s << n ]			separatedBy: [ s << ' & ' ].		s cr.		col do: [ :u | self unitNamed: u do: [ :unit | unit exportOn: s ] ifNone: [ ] ] separatedBy: [ s cr ] ].	s << '!!!! Others '.	s cr.	printed := importer orderedCreeps flattened asSet.	others := self orderedCreeps reject: [ :u | printed includes: u codeName ].	others do: [ :u | u exportOn: s ] separatedBy: [s cr].	'export/creeps.pillar' asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 10:08' prior: 33817992!exportCreeps	| s printed others |	s := WriteStream on: (WideString new: 10000).	s << '!! Creeps'.	s cr.	importer orderedCreeps withIndexDo: [ :col :index |		s << '!!!! Level ' << index printString << ' '.		(col collect: [ :u | "u is {random.codeName}"			self unitNamed: u second do: [ :unit | 				(unit name at: 'en') , (u first 					ifNil: [ '' ] 					ifNotNil: [ :it | ' (' , it printString , '%)' ]) ] ifNone: [ '' ] ]) 			do: [ :n | s << n ]			separatedBy: [ s << ' & ' ].		s cr.		col do: [ :u | self unitNamed: u second do: [ :unit | unit exportOn: s ] ifNone: [ ] ] separatedBy: [ s cr ] ].	s << '!!!! Others '.	s cr.	printed := importer orderedCreeps flattened asSet.	others := self orderedCreeps reject: [ :u | printed includes: u codeName ].	others do: [ :u | u exportOn: s ] separatedBy: [s cr].	'export/creeps.pillar' asFileReference writeStream nextPutAll: s contents.! !!GemTDAbility methodsFor: 'export' stamp: 'ClementBera 1/28/2018 10:09' prior: 33706893!shortExportOn: s	s << '|!! Ability Code |!! Ability English |!! Tooltip English |!! ' "Name (sch) |!! Tooltip (sch) |!! Name (tch) |!! Tooltip (tch)'".	s cr.	s 		<< '| ' << codeName		<< ' | ' << (name at: 'en')		<< ' | ' << (tooltip at: 'en')		<< ' | ' << ''		"<< ' | ' << (name at: 'sch')		<< ' | ' << (tooltip at: 'sch')		<< ' | ' << (name at: 'tch')		<< ' | ' << (tooltip at: 'tch')".	s cr.! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 10:11' prior: 33816515!orderedCreeps	| d arr | 	d := self creepExtraAbilities.	arr := Array new: 50.	1 to: arr size do: [ :i | arr at: i put: (OrderedCollection new: 3) ].	d keysAndValuesDo: [ :codeName :assoc |		(arr at: (assoc key - 1 \\ 50 + 1)) add: {nil . codeName} ].	self creepScriptSpecials do: [ :array |		"lvl random codeName OR hundred"		| codeName |		codeName := array third = #hundred 			ifTrue: [  ] 			ifFalse: [ array third ].		(arr at: array first) add: { 100 - array second . codeName } ].	^ arr! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 10:13' prior: 33820471!orderedCreeps	| d arr | 	d := self creepExtraAbilities.	arr := Array new: 50.	1 to: arr size do: [ :i | arr at: i put: (OrderedCollection new: 3) ].	d keysAndValuesDo: [ :codeName :assoc |		(arr at: (assoc key - 1 \\ 50 + 1)) add: {nil . codeName} ].	self creepScriptSpecials do: [ :array |		"lvl random codeName OR hundred"		| codeName |		codeName := array third = #hundred 			ifTrue: [ self detectIn: d lvl: array first + 100 ] 			ifFalse: [ array third ].		(arr at: array first) add: { 100 - array second . codeName } ].	^ arr! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 10:13'!detectIn: d lvl: lvl	d keysAndValuesDo: [ :codeName :assoc |		assoc key = lvl ifTrue: [^ codeName ]]! !----SNAPSHOT----2018-01-28T10:14:16.09156+01:00 Pharo.image priorSource: 255164!!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 10:15' prior: 33821696!detectIn: d lvl: lvl	d keysAndValuesDo: [ :codeName :assoc |		assoc key = lvl ifTrue: [^ codeName ]].	^ 'Error'! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 10:15' prior: 33821977!detectIn: d lvl: lvl1halt.	d keysAndValuesDo: [ :codeName :assoc |		assoc key = lvl ifTrue: [^ codeName ]].	^ 'Error'! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 10:18' prior: 33821072!orderedCreeps	| d arr | 	d := self creepExtraAbilities.	arr := Array new: 50.	1 to: arr size do: [ :i | arr at: i put: (OrderedCollection new: 3) ].	d keysAndValuesDo: [ :codeName :assoc |		(arr at: (assoc key - 1 \\ 50 + 1)) add: {nil . codeName} ].	self creepScriptSpecials do: [ :array |		"lvl random codeName OR hundred"		| codeName |		codeName := array third = #hundred 			ifTrue: [ (self detectIn: d lvl: array first) , '1' ] 			ifFalse: [ array third ].		(arr at: array first) add: { 100 - array second . codeName } ].	^ arr! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 10:18' prior: 33822188!detectIn: d lvl: lvl	d keysAndValuesDo: [ :codeName :assoc |		assoc key = lvl ifTrue: [^ codeName ]].	^ 'Error'! !!GemTDElement methodsFor: 'export' stamp: 'ClementBera 1/28/2018 10:20'!exportNamesOn: s withAssoc: assoc	s << '|!! Code |!! English |!! Initials |!! ' << assoc key.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  (self initialsFrom: (name at: 'en')) 		<< ' | ' <<  assoc value.	s cr.! !!GemTDElement methodsFor: 'export' stamp: 'ClementBera 1/28/2018 10:20' prior: 33707396!exportNamesOn: s	self exportNamesOn: s withAssoc: '' -> ''! !----SNAPSHOT----2018-01-28T10:20:29.93146+01:00 Pharo.image priorSource: 267369!----SNAPSHOT----2018-01-28T10:20:32.92405+01:00 Pharo.image priorSource: 269210!----SNAPSHOT----2018-01-28T10:20:37.043518+01:00 Pharo.image priorSource: 269292!----SNAPSHOT----2018-01-28T10:20:40.263331+01:00 Pharo.image priorSource: 269374!!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/28/2018 10:21' prior: 33800258!exportOn: s	((name at: 'en') = 'Unavailable' or: [ (name at: 'en') = '' ]) ifTrue: [ ^ self ].	self exportNamesOn: s withAssoc: 'Lvl' -> level printString.	s << '|!! Base HP |!! Base Movement |!! Armor |!! Magic resistance'.	s cr.	s 		<< '| ' << hp 		<< ' | ' <<  ms. 	mc = 'DOTA_UNIT_CAP_MOVE_FLY' ifTrue: [ s << ' (flying)' ].	s		<< ' | ' <<  armor		<< ' | ' <<  res.	s cr.	self exportAbilitiesOn: s! !----QUIT----2018-01-28T10:21:40.424336+01:00 Pharo.image priorSource: 269457!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/28/2018 10:24' prior: 33824060!exportOn: s	((name at: 'en') = 'Unavailable' or: [ (name at: 'en') = '' ]) ifTrue: [ ^ self ].	self exportNamesOn: s withAssoc: 'Lvl' -> level.	s << '|!! Base HP |!! Base Movement |!! Armor |!! Magic resistance'.	s cr.	s 		<< '| ' << hp 		<< ' | ' <<  ms. 	mc = 'DOTA_UNIT_CAP_MOVE_FLY' ifTrue: [ s << ' (flying)' ].	s		<< ' | ' <<  armor		<< ' | ' <<  res.	s cr.	self exportAbilitiesOn: s! !----QUIT----2018-01-28T10:25:13.57382+01:00 Pharo.image priorSource: 270045!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 10:37' prior: 33818975!exportCreeps	| s printed others |	s := WriteStream on: (WideString new: 10000).	s << '!! Creeps'.	s cr.	s << 'Note: The creeps are displayed in order according to the Game rules in the Lua script, with special cases for in-script transformation (For example, Boss 30 has a chance to be Zard instead of Carpet rider). Other creeps implemented in-game are at the bottom in the Others section. This can include event creeps (Halloween event boss, etc.), past creeps (the testers, etc.) or future creeps. In case of an update breaking my analysis, more creeps may be shown in the Others section instead of normal order (but at least they will be shown).'	s cr.	importer orderedCreeps withIndexDo: [ :col :index |		s << '!!!! Level ' << index printString << ' '.		(col collect: [ :u | "u is {random.codeName}"			self unitNamed: u second do: [ :unit | 				(unit name at: 'en') , (u first 					ifNil: [ '' ] 					ifNotNil: [ :it | ' (' , it printString , '%)' ]) ] ifNone: [ '' ] ]) 			do: [ :n | s << n ]			separatedBy: [ s << ' & ' ].		s cr.		col do: [ :u | self unitNamed: u second do: [ :unit | unit exportOn: s ] ifNone: [ ] ] separatedBy: [ s cr ] ].	s << '!!!! Others '.	s cr.	printed := importer orderedCreeps flattened asSet.	others := self orderedCreeps reject: [ :u | printed includes: u codeName ].	others do: [ :u | u exportOn: s ] separatedBy: [s cr].	'export/creeps.pillar' asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 10:37' prior: 33802297!exportAdvancedTowers	| s order printed others |	s := WriteStream on: (WideString new: 10000).	printed := #().	order := GemTDOrderParser new parse: 'extra/combinedTowerOrder.txt' asFileReference readStream contents readStream.	order keysAndValuesDo: [ :title :towerCodes |		s << '!! ' << title.		s cr.	s << 'Note: The creeps are displayed in order according to the Game rules in the Lua script, with special cases for in-script transformation (For example, Boss 30 has a chance to be Zard instead of Carpet rider). Other creeps implemented in-game are at the bottom in the Others section. This can include event creeps (Halloween event boss, etc.), past creeps (the testers, etc.) or future creeps. In case of an update breaking my analysis, more creeps may be shown in the Others section instead of normal order (but at least they will be shown).'.	s cr.		towerCodes do: [ :tc |			self unitNamed: tc do: [ :unit | unit exportOn: s ] ifNone: [ ] ].		printed := printed , towerCodes. ].	others := units select: [ :each | 			(each class = GemTDAdvancedTower or: [ each class = GemTDSlate ]) 			and: [ (printed includes: each codeName) not ] ].	others ifNotEmpty: [ 		s << '!! Others'.		s cr.		others do: [ :u | u exportOn: s ] ].	'export/advancedTowers.pillar' asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 10:38' prior: 33832608!exportAdvancedTowers	| s order printed others |	s := WriteStream on: (WideString new: 10000).	printed := #().	order := GemTDOrderParser new parse: 'extra/combinedTowerOrder.txt' asFileReference readStream contents readStream.	order keysAndValuesDo: [ :title :towerCodes |		s << '!! ' << title.		s cr.	s << 'Note: The towers are displayed based on fan-provided order. Hence, updates may break temporarily (until manual update) the order. To solve this problem, unordered towers are displayed at the bottom in the Others section. The Other section also includes experimental towers not necessarily present in-game (Currently there is a super emerald golem for example)'.	s cr.		towerCodes do: [ :tc |			self unitNamed: tc do: [ :unit | unit exportOn: s ] ifNone: [ ] ].		printed := printed , towerCodes. ].	others := units select: [ :each | 			(each class = GemTDAdvancedTower or: [ each class = GemTDSlate ]) 			and: [ (printed includes: each codeName) not ] ].	others ifNotEmpty: [ 		s << '!! Others'.		s cr.		others do: [ :u | u exportOn: s ] ].	'export/advancedTowers.pillar' asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 10:38' prior: 33834026!exportAdvancedTowers	| s order printed others |	s := WriteStream on: (WideString new: 10000).	printed := #().	order := GemTDOrderParser new parse: 'extra/combinedTowerOrder.txt' asFileReference readStream contents readStream.	order keysAndValuesDo: [ :title :towerCodes |		s << '!! ' << title.		s cr.	s << 'Note: The towers are displayed based on fan-provided order. Hence, updates may break temporarily (until manual update) the order. To solve this problem, unordered towers are displayed at the bottom in the Others section. The Other section also includes experimental towers not necessarily available in-game (Currently there is a super emerald golem for example)'.	s cr.		towerCodes do: [ :tc |			self unitNamed: tc do: [ :unit | unit exportOn: s ] ifNone: [ ] ].		printed := printed , towerCodes. ].	others := units select: [ :each | 			(each class = GemTDAdvancedTower or: [ each class = GemTDSlate ]) 			and: [ (printed includes: each codeName) not ] ].	others ifNotEmpty: [ 		s << '!! Others'.		s cr.		others do: [ :u | u exportOn: s ] ].	'export/advancedTowers.pillar' asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 10:39' prior: 33831063!exportCreeps	| s printed others |	s := WriteStream on: (WideString new: 10000).	s << '!! Creeps'.	s cr.	s << 'Note: The creeps are displayed in order according to the Game rules in the Lua script, with special cases for in-script transformation (For example, Boss 30 has a chance to be Zard instead of Carpet rider). Other creeps implemented in-game are at the bottom in the Others section. This can include event creeps (Halloween event boss, etc.), past creeps (the testers, etc.) or future creeps. In case of an update breaking my analysis, more creeps may be shown in the Others section instead of normal order (but at least they will be shown).'.	s cr.	importer orderedCreeps withIndexDo: [ :col :index |		s << '!!!! Level ' << index printString << ' '.		(col collect: [ :u | "u is {random.codeName}"			self unitNamed: u second do: [ :unit | 				(unit name at: 'en') , (u first 					ifNil: [ '' ] 					ifNotNil: [ :it | ' (' , it printString , '%)' ]) ] ifNone: [ '' ] ]) 			do: [ :n | s << n ]			separatedBy: [ s << ' & ' ].		s cr.		col do: [ :u | self unitNamed: u second do: [ :unit | unit exportOn: s ] ifNone: [ ] ] separatedBy: [ s cr ] ].	s << '!!!! Others '.	s cr.	printed := importer orderedCreeps flattened asSet.	others := self orderedCreeps reject: [ :u | printed includes: u codeName ].	others do: [ :u | u exportOn: s ] separatedBy: [s cr].	'export/creeps.pillar' asFileReference writeStream nextPutAll: s contents.! !----QUIT----2018-01-28T10:39:21.368237+01:00 Pharo.image priorSource: 273542!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 10:40' prior: 33835264!exportAdvancedTowers	| s order printed others |	s := WriteStream on: (WideString new: 10000).	printed := #().	order := GemTDOrderParser new parse: 'extra/combinedTowerOrder.txt' asFileReference readStream contents readStream.	order keysAndValuesDo: [ :title :towerCodes |		s << '!! ' << title.		s cr.	s << 'Note: The towers are displayed based on fan-provided order. Hence, updates may break temporarily (until manual update) the order. To solve this problem, unordered towers are displayed at the bottom in the Others section. The Other section also includes experimental towers not necessarily available in-game (Currently there is a super emerald golem for example).'.	s cr.		towerCodes do: [ :tc |			self unitNamed: tc do: [ :unit | unit exportOn: s ] ifNone: [ ] ].		printed := printed , towerCodes. ].	others := units select: [ :each | 			(each class = GemTDAdvancedTower or: [ each class = GemTDSlate ]) 			and: [ (printed includes: each codeName) not ] ].	others ifNotEmpty: [ 		s << '!! Others'.		s cr.		others do: [ :u | u exportOn: s ] ].	'export/advancedTowers.pillar' asFileReference writeStream nextPutAll: s contents.! !----QUIT----2018-01-28T10:40:53.065545+01:00 Pharo.image priorSource: 283532!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!----QUIT----2018-01-28T10:41:00.99359+01:00 Pharo.image priorSource: 287777!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 12:01' prior: 33841054!exportAdvancedTowers	| s order printed others |	s := WriteStream on: (WideString new: 10000).	s << '!! Advanced towers'.	s cr.	s << 'Note: The towers are displayed based on fan-provided order. Hence, updates may break temporarily (until manual update) the order. To solve this problem, unordered towers are displayed at the bottom in the Others section. The Other section also includes experimental towers not necessarily available in-game (Currently there is a super emerald golem for example).'.	s cr.	printed := #().	order := GemTDOrderParser new parse: 'extra/combinedTowerOrder.txt' asFileReference readStream contents readStream.	order keysAndValuesDo: [ :title :towerCodes |		s << '!! ' << title.		s cr.		towerCodes do: [ :tc |			self unitNamed: tc do: [ :unit | unit exportOn: s ] ifNone: [ ] ].		printed := printed , towerCodes. ].	others := units select: [ :each | 			(each class = GemTDAdvancedTower or: [ each class = GemTDSlate ]) 			and: [ (printed includes: each codeName) not ] ].	others ifNotEmpty: [ 		s << '!! Others'.		s cr.		others do: [ :u | u exportOn: s ] ].	'export/advancedTowers.pillar' asFileReference writeStream nextPutAll: s contents.! !----SNAPSHOT----2018-01-28T12:02:00.292039+01:00 Pharo.image priorSource: 290781!----SNAPSHOT----2018-01-28T12:02:02.801443+01:00 Pharo.image priorSource: 295060!----SNAPSHOT----2018-01-28T12:02:06.484953+01:00 Pharo.image priorSource: 295143!----SNAPSHOT----2018-01-28T12:02:13.266623+01:00 Pharo.image priorSource: 295226!----SNAPSHOT----2018-01-28T12:03:53.21634+01:00 Pharo.image priorSource: 295309!!GemTDElement methodsFor: 'export' stamp: 'ClementBera 1/28/2018 12:39' prior: 33760998!exportCombo: combo names: comboNames on: s	combo ifNil: [ ^ self ].	combo size < 2 ifTrue: [ ^ self ] .	s << '!!!!!!!! Combination' .	s cr.	s << (name at: 'en') << ' = '.	comboNames 		do: [ :cn | s << cn ]		separatedBy: [ s << ' + ' ].	s cr.	s << codeName << ' = '.	combo		do: [ :cn | s << cn ]		separatedBy: [ s << ' + ' ].	s cr.	"s << '|!! Combination |!! Combination |!! Combination |!! Combination'.	s cr.	s 		<< '| ' << comboNames first		<< ' | ' << comboNames second		<< ' | ' << (comboNames size < 3 ifTrue: [ '' ] ifFalse: [ comboNames at: 3 ])		<< ' | ' << (comboNames size < 4 ifTrue: [ '' ] ifFalse: [ 			comboNames size = 5 			ifTrue: [ (comboNames at: 4) , ' & ' , (comboNames at: 5) ]			ifFalse: [comboNames at: 4 ] ]).	s cr.	s 		<< '| ' << combo first		<< ' | ' << combo second		<< ' | ' << (combo size < 3 ifTrue: [ '' ] ifFalse: [ combo at: 3 ])		<< ' | ' << (combo size < 4 ifTrue: [ '' ] ifFalse: [ 			combo size = 5 			ifTrue: [ (combo at: 4) , ' & ' , (combo at: 5) ]			ifFalse: [combo at: 4 ] ]).	s cr."! !!GemTDElement methodsFor: 'export' stamp: 'ClementBera 1/28/2018 12:44' prior: 33849996!exportCombo: combo names: comboNames on: s	combo ifNil: [ ^ self ].	combo size < 2 ifTrue: [ ^ self ] .	s << '!!!!!!!! Combination' .	s cr.	s << (name at: 'en') << ' = '.	comboNames 		do: [ :cn | s << cn ]		separatedBy: [ s << ' \+ ' ].	s cr.	s cr.	s << codeName << ' = '.	combo		do: [ :cn | s << cn ]		separatedBy: [ s << ' \+ ' ].	s cr.	"s << '|!! Combination |!! Combination |!! Combination |!! Combination'.	s cr.	s 		<< '| ' << comboNames first		<< ' | ' << comboNames second		<< ' | ' << (comboNames size < 3 ifTrue: [ '' ] ifFalse: [ comboNames at: 3 ])		<< ' | ' << (comboNames size < 4 ifTrue: [ '' ] ifFalse: [ 			comboNames size = 5 			ifTrue: [ (comboNames at: 4) , ' & ' , (comboNames at: 5) ]			ifFalse: [comboNames at: 4 ] ]).	s cr.	s 		<< '| ' << combo first		<< ' | ' << combo second		<< ' | ' << (combo size < 3 ifTrue: [ '' ] ifFalse: [ combo at: 3 ])		<< ' | ' << (combo size < 4 ifTrue: [ '' ] ifFalse: [ 			combo size = 5 			ifTrue: [ (combo at: 4) , ' & ' , (combo at: 5) ]			ifFalse: [combo at: 4 ] ]).	s cr."! !!GemTDElement methodsFor: 'export' stamp: 'ClementBera 1/28/2018 12:45' prior: 33851148!exportCombo: combo names: comboNames on: s	combo ifNil: [ ^ self ].	combo size < 2 ifTrue: [ ^ self ] .	s << '""Combination""' .	s cr.	s << (name at: 'en') << ' = '.	comboNames 		do: [ :cn | s << cn ]		separatedBy: [ s << ' \+ ' ].	s cr.	s cr.	s << codeName << ' = '.	combo		do: [ :cn | s << cn ]		separatedBy: [ s << ' \+ ' ].	s cr.	"s << '|!! Combination |!! Combination |!! Combination |!! Combination'.	s cr.	s 		<< '| ' << comboNames first		<< ' | ' << comboNames second		<< ' | ' << (comboNames size < 3 ifTrue: [ '' ] ifFalse: [ comboNames at: 3 ])		<< ' | ' << (comboNames size < 4 ifTrue: [ '' ] ifFalse: [ 			comboNames size = 5 			ifTrue: [ (comboNames at: 4) , ' & ' , (comboNames at: 5) ]			ifFalse: [comboNames at: 4 ] ]).	s cr.	s 		<< '| ' << combo first		<< ' | ' << combo second		<< ' | ' << (combo size < 3 ifTrue: [ '' ] ifFalse: [ combo at: 3 ])		<< ' | ' << (combo size < 4 ifTrue: [ '' ] ifFalse: [ 			combo size = 5 			ifTrue: [ (combo at: 4) , ' & ' , (combo at: 5) ]			ifFalse: [combo at: 4 ] ]).	s cr."! !!GemTDGod methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 12:46'!path	^ 'export'! !!GemTDGod methodsFor: 'accessing' stamp: 'ClementBera 1/28/2018 12:46' prior: 33714200!clearExport	self path asFileReference children do: #delete! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 12:46' prior: 33848302!exportAdvancedTowers	| s order printed others |	s := WriteStream on: (WideString new: 10000).	s << '!! Advanced towers'.	s cr.	s << 'Note: The towers are displayed based on fan-provided order. Hence, updates may break temporarily (until manual update) the order. To solve this problem, unordered towers are displayed at the bottom in the Others section. The Other section also includes experimental towers not necessarily available in-game (Currently there is a super emerald golem for example).'.	s cr.	printed := #().	order := GemTDOrderParser new parse: 'extra/combinedTowerOrder.txt' asFileReference readStream contents readStream.	order keysAndValuesDo: [ :title :towerCodes |		s << '!! ' << title.		s cr.		towerCodes do: [ :tc |			self unitNamed: tc do: [ :unit | unit exportOn: s ] ifNone: [ ] ].		printed := printed , towerCodes. ].	others := units select: [ :each | 			(each class = GemTDAdvancedTower or: [ each class = GemTDSlate ]) 			and: [ (printed includes: each codeName) not ] ].	others ifNotEmpty: [ 		s << '!! Others'.		s cr.		others do: [ :u | u exportOn: s ] ].	(self path, 'advancedTowers.pillar') asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 12:46' prior: 33614720!exportBaseTowers	| s |	s := WriteStream on: (WideString new: 10000).	s << '!! Base Towers'.	s cr.	self orderedBaseTowers do: [ :u |  u exportOn: s ].	(self path, 'baseTowers.pillar') asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 12:47' prior: 33836504!exportCreeps	| s printed others |	s := WriteStream on: (WideString new: 10000).	s << '!! Creeps'.	s cr.	s << 'Note: The creeps are displayed in order according to the Game rules in the Lua script, with special cases for in-script transformation (For example, Boss 30 has a chance to be Zard instead of Carpet rider). Other creeps implemented in-game are at the bottom in the Others section. This can include event creeps (Halloween event boss, etc.), past creeps (the testers, etc.) or future creeps. In case of an update breaking my analysis, more creeps may be shown in the Others section instead of normal order (but at least they will be shown).'.	s cr.	importer orderedCreeps withIndexDo: [ :col :index |		s << '!!!! Level ' << index printString << ' '.		(col collect: [ :u | "u is {random.codeName}"			self unitNamed: u second do: [ :unit | 				(unit name at: 'en') , (u first 					ifNil: [ '' ] 					ifNotNil: [ :it | ' (' , it printString , '%)' ]) ] ifNone: [ '' ] ]) 			do: [ :n | s << n ]			separatedBy: [ s << ' & ' ].		s cr.		col do: [ :u | self unitNamed: u second do: [ :unit | unit exportOn: s ] ifNone: [ ] ] separatedBy: [ s cr ] ].	s << '!!!! Others '.	s cr.	printed := importer orderedCreeps flattened asSet.	others := self orderedCreeps reject: [ :u | printed includes: u codeName ].	others do: [ :u | u exportOn: s ] separatedBy: [s cr].	(self path, 'creeps.pillar') asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 12:47' prior: 33853704!exportAdvancedTowers	| s order printed others |	s := WriteStream on: (String new: 10000).	s << '!! Advanced towers'.	s cr.	s << 'Note: The towers are displayed based on fan-provided order. Hence, updates may break temporarily (until manual update) the order. To solve this problem, unordered towers are displayed at the bottom in the Others section. The Other section also includes experimental towers not necessarily available in-game (Currently there is a super emerald golem for example).'.	s cr.	printed := #().	order := GemTDOrderParser new parse: 'extra/combinedTowerOrder.txt' asFileReference readStream contents readStream.	order keysAndValuesDo: [ :title :towerCodes |		s << '!! ' << title.		s cr.		towerCodes do: [ :tc |			self unitNamed: tc do: [ :unit | unit exportOn: s ] ifNone: [ ] ].		printed := printed , towerCodes. ].	others := units select: [ :each | 			(each class = GemTDAdvancedTower or: [ each class = GemTDSlate ]) 			and: [ (printed includes: each codeName) not ] ].	others ifNotEmpty: [ 		s << '!! Others'.		s cr.		others do: [ :u | u exportOn: s ] ].	(self path, 'advancedTowers.pillar') asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 12:47' prior: 33854986!exportBaseTowers	| s |	s := WriteStream on: (String new: 10000).	s << '!! Base Towers'.	s cr.	self orderedBaseTowers do: [ :u |  u exportOn: s ].	(self path, 'baseTowers.pillar') asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 12:47' prior: 33855315!exportCreeps	| s printed others |	s := WriteStream on: (String new: 10000).	s << '!! Creeps'.	s cr.	s << 'Note: The creeps are displayed in order according to the Game rules in the Lua script, with special cases for in-script transformation (For example, Boss 30 has a chance to be Zard instead of Carpet rider). Other creeps implemented in-game are at the bottom in the Others section. This can include event creeps (Halloween event boss, etc.), past creeps (the testers, etc.) or future creeps. In case of an update breaking my analysis, more creeps may be shown in the Others section instead of normal order (but at least they will be shown).'.	s cr.	importer orderedCreeps withIndexDo: [ :col :index |		s << '!!!! Level ' << index printString << ' '.		(col collect: [ :u | "u is {random.codeName}"			self unitNamed: u second do: [ :unit | 				(unit name at: 'en') , (u first 					ifNil: [ '' ] 					ifNotNil: [ :it | ' (' , it printString , '%)' ]) ] ifNone: [ '' ] ]) 			do: [ :n | s << n ]			separatedBy: [ s << ' & ' ].		s cr.		col do: [ :u | self unitNamed: u second do: [ :unit | unit exportOn: s ] ifNone: [ ] ] separatedBy: [ s cr ] ].	s << '!!!! Others '.	s cr.	printed := importer orderedCreeps flattened asSet.	others := self orderedCreeps reject: [ :u | printed includes: u codeName ].	others do: [ :u | u exportOn: s ] separatedBy: [s cr].	(self path, 'creeps.pillar') asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 12:48'!exportCreepsOn: s	| printed others |	importer orderedCreeps withIndexDo: [ :col :index |		s << '!!!! Level ' << index printString << ' '.		(col collect: [ :u | "u is {random.codeName}"			self unitNamed: u second do: [ :unit | 				(unit name at: 'en') , (u first 					ifNil: [ '' ] 					ifNotNil: [ :it | ' (' , it printString , '%)' ]) ] ifNone: [ '' ] ]) 			do: [ :n | s << n ]			separatedBy: [ s << ' & ' ].		s cr.		col do: [ :u | self unitNamed: u second do: [ :unit | unit exportOn: s ] ifNone: [ ] ] separatedBy: [ s cr ] ].	s << '!!!! Others '.	s cr.	printed := importer orderedCreeps flattened asSet.	others := self orderedCreeps reject: [ :u | printed includes: u codeName ].	others do: [ :u | u exportOn: s ] separatedBy: [s cr].! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 12:48' prior: 33858470!exportCreeps	| s printed others |	s := WriteStream on: (String new: 10000).	s << '!! Creeps'.	s cr.	s << 'Note: The creeps are displayed in order according to the Game rules in the Lua script, with special cases for in-script transformation (For example, Boss 30 has a chance to be Zard instead of Carpet rider). Other creeps implemented in-game are at the bottom in the Others section. This can include event creeps (Halloween event boss, etc.), past creeps (the testers, etc.) or future creeps. In case of an update breaking my analysis, more creeps may be shown in the Others section instead of normal order (but at least they will be shown).'.	s cr.	self exportCreepsOn: s.	(self path, 'creeps.pillar') asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 12:48' prior: 33860846!exportCreeps	| s |	s := WriteStream on: (String new: 10000).	s << '!! Creeps'.	s cr.	s << 'Note: The creeps are displayed in order according to the Game rules in the Lua script, with special cases for in-script transformation (For example, Boss 30 has a chance to be Zard instead of Carpet rider). Other creeps implemented in-game are at the bottom in the Others section. This can include event creeps (Halloween event boss, etc.), past creeps (the testers, etc.) or future creeps. In case of an update breaking my analysis, more creeps may be shown in the Others section instead of normal order (but at least they will be shown).'.	s cr.	self exportCreepsOn: s.	(self path, 'creeps.pillar') asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 12:48'!exportCreepsHeaderOn: s	s << '!! Creeps'.	s cr.	s << 'Note: The creeps are displayed in order according to the Game rules in the Lua script, with special cases for in-script transformation (For example, Boss 30 has a chance to be Zard instead of Carpet rider). Other creeps implemented in-game are at the bottom in the Others section. This can include event creeps (Halloween event boss, etc.), past creeps (the testers, etc.) or future creeps. In case of an update breaking my analysis, more creeps may be shown in the Others section instead of normal order (but at least they will be shown).'.	s cr.	! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 12:48' prior: 33861701!exportCreeps	| s |	s := WriteStream on: (String new: 10000).	self exportCreepsHeaderOn: s.	self exportCreepsOn: s.	(self path, 'creeps.pillar') asFileReference writeStream nextPutAll: s contents.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 12:49'!export: s to: fileName	(self path, fileName ,'.pillar') asFileReference writeStream nextPutAll: s contents! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 12:49' prior: 33863221!exportCreeps	| s |	s := WriteStream on: (String new: 10000).	self exportCreepsHeaderOn: s.	self exportCreepsOn: s.	self export: s to: 'creeps'! !----SNAPSHOT----2018-01-28T12:49:25.499002+01:00 Pharo.image priorSource: 295392!!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 12:49' prior: 33858145!exportBaseTowers	| s |	s := WriteStream on: (String new: 10000).	s << '!! Base Towers'.	s cr.	self orderedBaseTowers do: [ :u |  u exportOn: s ].	self export: s to: 'baseTowers'! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 12:49' prior: 33856867!exportAdvancedTowers	| s order printed others |	s := WriteStream on: (String new: 10000).	s << '!! Advanced towers'.	s cr.	s << 'Note: The towers are displayed based on fan-provided order. Hence, updates may break temporarily (until manual update) the order. To solve this problem, unordered towers are displayed at the bottom in the Others section. The Other section also includes experimental towers not necessarily available in-game (Currently there is a super emerald golem for example).'.	s cr.	printed := #().	order := GemTDOrderParser new parse: 'extra/combinedTowerOrder.txt' asFileReference readStream contents readStream.	order keysAndValuesDo: [ :title :towerCodes |		s << '!! ' << title.		s cr.		towerCodes do: [ :tc |			self unitNamed: tc do: [ :unit | unit exportOn: s ] ifNone: [ ] ].		printed := printed , towerCodes. ].	others := units select: [ :each | 			(each class = GemTDAdvancedTower or: [ each class = GemTDSlate ]) 			and: [ (printed includes: each codeName) not ] ].	others ifNotEmpty: [ 		s << '!! Others'.		s cr.		others do: [ :u | u exportOn: s ] ].	self export: s to: 'advancedTowers'! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 12:50'!exportAdvancedTowersHeaderOn: s	s << '!! Advanced towers'.	s cr.	s << 'Note: The towers are displayed based on fan-provided order. Hence, updates may break temporarily (until manual update) the order. To solve this problem, unordered towers are displayed at the bottom in the Others section. The Other section also includes experimental towers not necessarily available in-game (Currently there is a super emerald golem for example).'.	s cr.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 12:50' prior: 33864281!exportAdvancedTowers	| s order printed others |	self exportAdvancedTowersHeaderOn: s.	printed := #().	order := GemTDOrderParser new parse: 'extra/combinedTowerOrder.txt' asFileReference readStream contents readStream.	order keysAndValuesDo: [ :title :towerCodes |		s << '!! ' << title.		s cr.		towerCodes do: [ :tc |			self unitNamed: tc do: [ :unit | unit exportOn: s ] ifNone: [ ] ].		printed := printed , towerCodes. ].	others := units select: [ :each | 			(each class = GemTDAdvancedTower or: [ each class = GemTDSlate ]) 			and: [ (printed includes: each codeName) not ] ].	others ifNotEmpty: [ 		s << '!! Others'.		s cr.		others do: [ :u | u exportOn: s ] ].	self export: s to: 'advancedTowers'! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 12:50' prior: 33866025!exportAdvancedTowers	| s order printed others |	s := WriteStream on: (String new: 10000).	self exportAdvancedTowersHeaderOn: s.	printed := #().	order := GemTDOrderParser new parse: 'extra/combinedTowerOrder.txt' asFileReference readStream contents readStream.	order keysAndValuesDo: [ :title :towerCodes |		s << '!! ' << title.		s cr.		towerCodes do: [ :tc |			self unitNamed: tc do: [ :unit | unit exportOn: s ] ifNone: [ ] ].		printed := printed , towerCodes. ].	others := units select: [ :each | 			(each class = GemTDAdvancedTower or: [ each class = GemTDSlate ]) 			and: [ (printed includes: each codeName) not ] ].	others ifNotEmpty: [ 		s << '!! Others'.		s cr.		others do: [ :u | u exportOn: s ] ].	self export: s to: 'advancedTowers'! !----SNAPSHOT----2018-01-28T12:50:34.962554+01:00 Pharo.image priorSource: 309408!----SNAPSHOT----2018-01-28T12:50:38.154548+01:00 Pharo.image priorSource: 313164!----SNAPSHOT----2018-01-28T12:50:44.195097+01:00 Pharo.image priorSource: 313247!!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 12:51'!exportAdvancedTowersOn: s	| printed order others |	printed := #().	order := GemTDOrderParser new parse: 'extra/combinedTowerOrder.txt' asFileReference readStream contents readStream.	order keysAndValuesDo: [ :title :towerCodes |		s << '!! ' << title.		s cr.		towerCodes do: [ :tc |			self unitNamed: tc do: [ :unit | unit exportOn: s ] ifNone: [ ] ].		printed := printed , towerCodes. ].	others := units select: [ :each | 			(each class = GemTDAdvancedTower or: [ each class = GemTDSlate ]) 			and: [ (printed includes: each codeName) not ] ].	others ifNotEmpty: [ 		s << '!! Others'.		s cr.		others do: [ :u | u exportOn: s ] ].! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 12:51' prior: 33866832!exportAdvancedTowers	| s order printed others |	s := WriteStream on: (String new: 10000).	self exportAdvancedTowersHeaderOn: s.	self exportAdvancedTowersOn: s.	self export: s to: 'advancedTowers'! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 12:51' prior: 33868649!exportAdvancedTowers	| s |	s := WriteStream on: (String new: 10000).	self exportAdvancedTowersHeaderOn: s.	self exportAdvancedTowersOn: s.	self export: s to: 'advancedTowers'! !----SNAPSHOT----2018-01-28T12:51:57.661138+01:00 Pharo.image priorSource: 313330!----SNAPSHOT----2018-01-28T12:52:20.513371+01:00 Pharo.image priorSource: 314688!!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/28/2018 12:53' prior: 33863494!export: s to: fileName	(self path, '/' , fileName ,'.pillar') asFileReference writeStream nextPutAll: s contents! !----SNAPSHOT----2018-01-28T12:53:04.129081+01:00 Pharo.image priorSource: 314771!!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/28/2018 12:56'!cleanNameFor: key lang: lang importer: importer	^ self clean: ((importer resources at: lang) 			at: codeName 			ifAbsent: [ self getFallBackNames 							at: codeName 							ifAbsent: ['Unavailable'] ])! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/28/2018 12:56' prior: 33688891!enNameFor: key importer: importer	^ self cleanNameFor: key lang: 'en' importer: importer! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/28/2018 12:56' prior: 33746442!importNameWithImporter: importer	name := Dictionary new.	#(en sch tch) do: [ :l |		name at: l put: (self cleanNameFor: codeName lang: l importer: importer)].! !----SNAPSHOT----2018-01-28T12:56:54.661786+01:00 Pharo.image priorSource: 315056!----SNAPSHOT----2018-01-28T12:57:01.991879+01:00 Pharo.image priorSource: 315869!----SNAPSHOT----2018-01-28T12:57:04.430281+01:00 Pharo.image priorSource: 315952!!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/28/2018 12:57' prior: 33869649!cleanNameFor: key lang: lang importer: importer	^ self clean: ((importer resources at: lang) 			at: key 			ifAbsent: [ self getFallBackNames 							at: key 							ifAbsent: ['Unavailable'] ])! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/28/2018 13:00' prior: 33790191!clean: string	| ws upNext noUp |	string size = 0 ifTrue: [ ^ string ].	ws := WriteStream on: (string class new: string size).	upNext := true.	noUp := false.	string readStreamDo: [ :rs |		[rs peek = $/ ifTrue: [ ws space ].		rs peek isUppercase ifTrue: [ 			noUp ifFalse: [				rs position = 0 ifFalse: [ 					(rs peekBack = Character space or: [ rs peekBack = $/ or: [ rs peekBack isUppercase ] ]) ifFalse: [ws space] ] ] ].		noUp := false.		rs peek = $- ifTrue: [ noUp := true ].		ws nextPut: (upNext ifTrue: [rs peek asUppercase] ifFalse: [rs peek]).		rs peek = $/ ifTrue: [ ws space ].		upNext := false.		rs peek = Character space ifTrue: [ upNext := true ].		rs next.		rs atEnd ] whileFalse ].	^ ws contents trimBoth	! !!GemTDElement methodsFor: 'export' stamp: 'ClementBera 1/28/2018 13:01' prior: 33852309!exportCombo: combo names: comboNames on: s	combo ifNil: [ ^ self ].	combo size < 2 ifTrue: [ ^ self ] .	s << '""Combination""' .	s cr.	s cr.	s << (name at: 'en') << ' = '.	comboNames 		do: [ :cn | s << cn ]		separatedBy: [ s << ' \+ ' ].	s cr.	s cr.	s << codeName << ' = '.	combo		do: [ :cn | s << cn ]		separatedBy: [ s << ' \+ ' ].	s cr.	"s << '|!! Combination |!! Combination |!! Combination |!! Combination'.	s cr.	s 		<< '| ' << comboNames first		<< ' | ' << comboNames second		<< ' | ' << (comboNames size < 3 ifTrue: [ '' ] ifFalse: [ comboNames at: 3 ])		<< ' | ' << (comboNames size < 4 ifTrue: [ '' ] ifFalse: [ 			comboNames size = 5 			ifTrue: [ (comboNames at: 4) , ' & ' , (comboNames at: 5) ]			ifFalse: [comboNames at: 4 ] ]).	s cr.	s 		<< '| ' << combo first		<< ' | ' << combo second		<< ' | ' << (combo size < 3 ifTrue: [ '' ] ifFalse: [ combo at: 3 ])		<< ' | ' << (combo size < 4 ifTrue: [ '' ] ifFalse: [ 			combo size = 5 			ifTrue: [ (combo at: 4) , ' & ' , (combo at: 5) ]			ifFalse: [combo at: 4 ] ]).	s cr."! !!GemTDTower methodsFor: 'export' stamp: 'ClementBera 1/28/2018 13:01' prior: 33748116!exportOn: s	| width |	width := codeName = 'gemtd_zhenjiazhishi' ifTrue: [ 15 ] ifFalse: [ 8 ]. 	s << '!!!! ' << (name at: 'en') capitalized.	s cr. 	s << '+file://wards/' << picture << '.png|width=' << width printString << '+'.	s cr.	self exportNamesOn: s.	s << '|!! Attack Damage |!! Attack Rate |!! Attack Range |!! Projectile Speed'.	s cr.	s		<< '| ' << damage  		<< ' | ' <<  rate		<< ' | ' <<  range		<< ' | ' <<  projectileSpeed.	s cr.	self exportAbilitiesOn: s! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:03' prior: 33642539!importWith: importer 	name := Dictionary new.	self importDetailsWith: importer.	#(en sch tch) do: [ :l |		name at: l put: ((importer resources at: l) at: 'DOTA_Tooltip_Ability_' , codeName ifAbsent: ['Unavailable']) ].	tooltip := Dictionary new.	#(en sch tch) do: [ :l |		tooltip at: l put: ((importer resources at: l) at: 'DOTA_Tooltip_Ability_' , codeName , '_Description' ifAbsent: ['Unavailable']) ].! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:04'!importDetailsWith: importer	| details |	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	1halt.! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:08' prior: 33874021!importDetailsWith: importer	| details |	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	(details at: 'AbilityBehavior') logCr.! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:08' prior: 33874256!importDetailsWith: importer	| details |	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	(details at: 'AbilityBehavior' ifAbsent: []) logCr.! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:10' prior: 33874523!importDetailsWith: importer	| details isAura |	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	isAura := false.	(details at: 'AbilityBehavior' ifPresent: [:beh |		| split |		split := (beh splitOn: '|') collect: #trimBoth.		(split includes: 'DOTA_ABILITY_BEHAVIOR_AURA') ifTrue: [ isAura := true ].]) logCr.! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:11' prior: 33874803!importDetailsWith: importer	| details isAura |	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	isAura := false.	details at: 'AbilityBehavior' ifPresent: [:beh |		| split |		split := (beh splitOn: '|') collect: #trimBoth.		(split includes: 'DOTA_ABILITY_BEHAVIOR_AURA') ifTrue: [ isAura := true ]].	1halt.! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:15' prior: 33875254!importDetailsWith: importer	| details isAura modifiers |	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	isAura := false.	details at: 'AbilityBehavior' ifPresent: [:beh |		| split |		split := (beh splitOn: '|') collect: #trimBoth.		(split includes: 'DOTA_ABILITY_BEHAVIOR_AURA') ifTrue: [ isAura := true ]].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	modifiers values 		detect: [ :m | m includesKey: 'OnAttackLanded' ]		ifFound: [ :f | ^ self importAttackLanded: f modifiers: modifiers importer: importer ].			1halt.! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:16'!importAttackLanded: attackLanded modifiers: modifiers importer: importer	1halt.! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:16' prior: 33875704!importDetailsWith: importer	| details isAura modifiers |	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	isAura := false.	details at: 'AbilityBehavior' ifPresent: [:beh |		| split |		split := (beh splitOn: '|') collect: #trimBoth.		(split includes: 'DOTA_ABILITY_BEHAVIOR_AURA') ifTrue: [ isAura := true ]].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	modifiers values 		detect: [ :m | m includesKey: 'OnAttackLanded' ]		ifFound: [ :f | ^ self importAttackLanded: (f at: 'OnAttackLanded') modifiers: modifiers importer: importer ].			1halt.! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:19' prior: 33876371!importAttackLanded: attackLanded modifiers: modifiers importer: importer	| finalMod |	finalMod := modifiers at: ((attackLanded at: 'ApplyModifier') at: 'ModifierName').	(finalMod includesKey: 'ThinkInterval') ifTrue: [ ^ self importThinkAbility: finalMod ].	1halt.! !!GemTDAbility methodsFor: 'import' stamp: 'ClementBera 1/28/2018 13:19'!importThinkAbility: aCollection 	self shouldBeImplemented.! !!GemTDAbility methodsFor: 'import' stamp: 'ClementBera 1/28/2018 13:24' prior: 33877608!importThinkAbility: modifier	| think |	think := modifier at: 'OnIntervalThink'.	property := String streamContents: [:s |		s 			<< 'During ' << (modifier at: 'Duration') << ' seconds, every ' 			<< (modifier at: 'ThinkInterval') << ' seconds, deals ' << (think at: 'Damage')			<< ' ' << (self damageKeywordFrom:(think at: 'Type')) << ' damage.' ].! !!GemTDAbility methodsFor: 'import' stamp: 'ClementBera 1/28/2018 13:25' prior: 33877760!importThinkAbility: modifier	| think |	think := modifier at: 'OnIntervalThink'.	property := String streamContents: [:s |		s 			<< 'During ' << (modifier at: 'Duration') << ' seconds, every ' 			<< (modifier at: 'ThinkInterval') << ' seconds, deals ' << (think at: 'Damage')			<< ' ' << (self damageKeywordFrom: (think at: 'Type')) << ' damage.' ].! !!GemTDAbility methodsFor: 'import' stamp: 'ClementBera 1/28/2018 13:25'!damageKeywordFrom: keyword	keyword = 'DAMAGE_TYPE_MAGICAL' ifTrue: [ ^ 'magic' ].	1halt.! !!GemTDAbility methodsFor: 'import' stamp: 'ClementBera 1/28/2018 13:26' prior: 33878206!importThinkAbility: modifier	| think |	think := modifier at: 'OnIntervalThink'.	property := String streamContents: [:s |		s  			<< 'During ' << (modifier at: 'Duration') << ' seconds, every ' 			<< (modifier at: 'ThinkInterval') << ' seconds, deals ' << (think at: 'Damage')			<< ' ' << (self damageKeywordFrom: (think at: 'Type')) << ' damage.' ].! !!GemTDAbility methodsFor: 'import' stamp: 'ClementBera 1/28/2018 13:27' prior: 33878820!importThinkAbility: modifier	| think |	think := (modifier at: 'OnIntervalThink') at: 'Damage'.	property := String streamContents: [:s |		s  			<< 'During ' << (modifier at: 'Duration') << ' seconds, every ' 			<< (modifier at: 'ThinkInterval') << ' seconds, deals ' << (think at: 'Damage')			<< ' ' << (self damageKeywordFrom: (think at: 'Type')) << ' damage.' ].! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:27' prior: 33876557!importDetailsWith: importer	| details isAura modifiers |	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	isAura := false.	details at: 'AbilityBehavior' ifPresent: [:beh |		| split |		split := (beh splitOn: '|') collect: #trimBoth.		(split includes: 'DOTA_ABILITY_BEHAVIOR_AURA') ifTrue: [ isAura := true ]].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	modifiers values 		detect: [ :m | m includesKey: 'OnAttackLanded' ]		ifFound: [ :f | ^ self importAttackLanded: (f at: 'OnAttackLanded') modifiers: modifiers importer: importer ].	1halt.! !!GemTDAbility methodsFor: 'import' stamp: 'ClementBera 1/28/2018 13:29'!importAttack: aCollection modifiers: aCollection2 importer: aGemTDImporter 	self shouldBeImplemented.! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:30'!import: attackLanded modifiers: modifiers importer: importer prefix: prefix	| finalMod |	finalMod := modifiers at: ((attackLanded at: 'ApplyModifier') at: 'ModifierName').	(finalMod includesKey: 'ThinkInterval') ifTrue: [ ^ self importThinkAbility: finalMod prefix: prefix ].	1halt.! !!GemTDAbility methodsFor: 'import' stamp: 'ClementBera 1/28/2018 13:31'!importThinkAbility: modifier prefix: prefix	| think |	think := (modifier at: 'OnIntervalThink') at: 'Damage'.	property := String streamContents: [:s |		s  			<< prefix			<< 'during ' << (modifier at: 'Duration') << ' seconds, every ' 			<< (modifier at: 'ThinkInterval') << ' seconds, deals ' << (think at: 'Damage')			<< ' ' << (self damageKeywordFrom: (think at: 'Type')) << ' damage.' ].! !GemTDAbility removeSelector: #importThinkAbility:!GemTDAbility removeSelector: #importAttackLanded:modifiers:importer:!!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:32' prior: 33879744!importDetailsWith: importer	| details isAura modifiers |	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	isAura := false.	details at: 'AbilityBehavior' ifPresent: [:beh |		| split |		split := (beh splitOn: '|') collect: #trimBoth.		(split includes: 'DOTA_ABILITY_BEHAVIOR_AURA') ifTrue: [ isAura := true ]].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	modifiers values 		detect: [ :m | m includesKey: 'OnAttackLanded' ]		ifFound: [ :f | 			^ self import: (f at: 'OnAttackLanded') modifiers: modifiers importer: importer prefix: 'On attack landed, ' ].	1halt.! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:32' prior: 33881600!importDetailsWith: importer	| details isAura modifiers |	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	isAura := false.	details at: 'AbilityBehavior' ifPresent: [:beh |		| split |		split := (beh splitOn: '|') collect: #trimBoth.		(split includes: 'DOTA_ABILITY_BEHAVIOR_AURA') ifTrue: [ isAura := true ]].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	modifiers values 		detect: [ :m | m includesKey: 'OnAttackLanded' ]		ifFound: [ :f | 			^ self import: (f at: 'OnAttackLanded') modifiers: modifiers importer: importer prefix: 'On attack landed, ' ].	modifiers values 		detect: [ :m | m includesKey: 'OnAttack' ]		ifFound: [ :f | 			^ self import: (f at: 'OnAttack') modifiers: modifiers importer: importer prefix: 'On attack, ' ].	1halt.! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:32' prior: 33880610!import: triggerModifier modifiers: modifiers importer: importer prefix: prefix	| finalMod |	finalMod := modifiers at: ((triggerModifier at: 'ApplyModifier') at: 'ModifierName').	(finalMod includesKey: 'ThinkInterval') ifTrue: [ ^ self importThinkAbility: finalMod prefix: prefix ].	1halt.! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:33' prior: 33883233!import: triggerModifier modifiers: modifiers importer: importer prefix: prefix	| finalMod |	triggerModifier 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalMod := modifiers at: ((triggerModifier at: 'ApplyModifier') at: 'ModifierName').	(finalMod includesKey: 'ThinkInterval') ifTrue: [ ^ self importThinkAbility: finalMod prefix: prefix ].	1halt.! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:34'!importRunScript: rn prefix: prefix	! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:34' prior: 33884115!importRunScript: rn prefix: prefix	1halt.	"| think |	think := (modifier at: 'OnIntervalThink') at: 'Damage'.	property := String streamContents: [:s |		s  			<< prefix			<< 'during ' << (modifier at: 'Duration') << ' seconds, every ' 			<< (modifier at: 'ThinkInterval') << ' seconds, deals ' << (think at: 'Damage')			<< ' ' << (self damageKeywordFrom: (think at: 'Type')) << ' damage.' ]."! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:40' prior: 33884257!importRunScript: modifier prefix: prefix	| otherModif |	otherModif := modifier copy.	#('Function' 'ScriptFile' 'Target' 'attack_effect') do: [ :e | otherModif removeKey: e ].	otherModif := otherModif associations.	property := String streamContents: [:s |		s  			<< prefix			<< 'run script named ' << (modifier at: 'Function') << ' in '			<< ((modifier at: 'ScriptFile') splitOn: '/') last 			<< ' with parameters: ['.		otherModif do: [ :assoc | s << assoc key << ': ' << assoc value ]  separatedBy: [ s << ', ' ].		s << ']'  ].! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:41' prior: 33882324!importDetailsWith: importer	| details isAura modifiers |	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	modifiers values 		detect: [ :m | m includesKey: 'OnAttackLanded' ]		ifFound: [ :f | 			^ self import: (f at: 'OnAttackLanded') modifiers: modifiers importer: importer prefix: 'On attack landed, ' ].	modifiers values 		detect: [ :m | m includesKey: 'OnAttack' ]		ifFound: [ :f | 			^ self import: (f at: 'OnAttack') modifiers: modifiers importer: importer prefix: 'On attack, ' ].	1halt.! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:42' prior: 33885407!importDetailsWith: importer	| details modifiers |	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	modifiers values 		detect: [ :m | m includesKey: 'OnAttackLanded' ]		ifFound: [ :f | 			^ self import: (f at: 'OnAttackLanded') modifiers: modifiers importer: importer prefix: 'On attack landed, ' ].	modifiers values 		detect: [ :m | m includesKey: 'OnAttack' ]		ifFound: [ :f | 			^ self import: (f at: 'OnAttack') modifiers: modifiers importer: importer prefix: 'On attack, ' ].	1halt.! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:42' prior: 33886108!importDetailsWith: importer	| details modifiers |	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	modifiers values 		detect: [ :m | m includesKey: 'OnAttackLanded' ]		ifFound: [ :f | 			^ self import: (f at: 'OnAttackLanded') modifiers: modifiers importer: importer prefix: 'On attack landed, ' ].	modifiers values 		detect: [ :m | m includesKey: 'OnAttack' ]		ifFound: [ :f | 			^ self import: (f at: 'OnAttack') modifiers: modifiers importer: importer prefix: 'On attack, ' ].	modifiers values 		detect: [ :m | m includesKey: 'Aura' ]		ifFound: [ :f | 			^ self import: (f at: 'Aura') modifiers: modifiers importer: importer prefix: 'Aura: ' ].	1halt.! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:44' prior: 33886802!importDetailsWith: importer	| details modifiers |	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	modifiers values 		detect: [ :m | m includesKey: 'OnAttackLanded' ]		ifFound: [ :f | 			^ self import: (f at: 'OnAttackLanded') modifiers: modifiers importer: importer prefix: 'On attack landed, ' ].	modifiers values 		detect: [ :m | m includesKey: 'OnAttack' ]		ifFound: [ :f | 			^ self import: (f at: 'OnAttack') modifiers: modifiers importer: importer prefix: 'On attack, ' ].	modifiers values 		detect: [ :m | m includesKey: 'Aura' ]		ifFound: [ :f | 			^ self importAura: f modifiers: modifiers importer: importer ].	1halt.! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:45'!importAura: aura modifiers: modifiers importer: importer	| otherModif |1halt."	property := String streamContents: [:s |		s  			<< prefix			<< 'run script named ' << (modifier at: 'Function') << ' in '			<< ((modifier at: 'ScriptFile') splitOn: '/') last 			<< ' with parameters: ['.		otherModif do: [ :assoc | s << assoc key << ': ' << assoc value ]  separatedBy: [ s << ', ' ].		s << ']'  ]."! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:49' prior: 33888492!importAura: aura modifiers: modifiers importer: importer	| otherModif |	otherModif := modifiers at: (aura at: 'Aura').	property := String streamContents: [:s |		s << 'Aura: Range ' << (aura at: 'Aura_Radius') << ' Effect: '.		self importProperties: otherModif on: s ].! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:49'!importProperties: modifier on: s	| prop |	prop := modifier at: 'Properties'.	 ! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:51' prior: 33889364!importProperties: modifier on: s	| prop |	prop := modifier at: 'Properties'.	prop keys do: [ :each |		(each beginsWith: 'MODIFIER_PROPERTY') ifTrue: [ self importModifierProperty: each on: s ] ]! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:51'!importModifierProperty: each on: s! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:51' prior: 33889839!importModifierProperty: each on: s	1halt.! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:54' prior: 33889551!importProperties: modifier on: s	| prop |	prop := modifier at: 'Properties'.	prop keys do: [ :each |		(each beginsWith: 'MODIFIER_PROPERTY') ifTrue: [ self importModifierProperty: each with: (prop at: each) on: s ] ]! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:55'!importModifierProperty: prop with: val on: s	| split percent |	percent := false.	split := prop splitOn: '_'.	split last = 'PERCENTAGE' ifTrue: [ percent := true ].	#('MODIFIER' 'PROPERTY' 'BONUS' 'PERCENTAGE') do: [ :s2 |		split remove: s2 ifAbsent: [ ] ].	s << '['.	split do: [ :e | s << e ] separatedBy: [ s space ].	s << val.	s << ']'.! !GemTDAbility removeSelector: #importModifierProperty:on:!!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:55' prior: 33890437!importModifierProperty: prop with: val on: s	| split percent |	percent := false.	split := prop splitOn: '_'.	split last = 'PERCENTAGE' ifTrue: [ percent := true ].	#('MODIFIER' 'PROPERTY' 'BONUS' 'PERCENTAGE') do: [ :s2 |		split remove: s2 ifAbsent: [ ] ].	s << '['.	split do: [ :e | s << e ] separatedBy: [ s space ].	s << val.	percent ifTrue: [ s << '\%' ].	s << ']'.! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:56' prior: 33890950!importModifierProperty: prop with: val on: s	| split percent |	percent := false.	split := prop splitOn: '_'.	split last = 'PERCENTAGE' ifTrue: [ percent := true ].	#('MODIFIER' 'PROPERTY' 'BONUS' 'PERCENTAGE') do: [ :s2 |		split remove: s2 ifAbsent: [ ] ].	s << '['.	split do: [ :e | s << e. s space ].	s << val.	percent ifTrue: [ s << '\%' ].	s << ']'.! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:57' prior: 33891436!importModifierProperty: prop with: val on: s	| split percent |	percent := false.	split := prop splitOn: '_'.	split last = 'PERCENTAGE' ifTrue: [ percent := true ].	#('MODIFIER' 'PROPERTY' 'BONUS' 'PERCENTAGE') do: [ :s2 |		split remove: s2 ifAbsent: [ ] ].	s << '['.	split do: [ :e | s << e] separatedBy: [ s space ].	s << ': '.	s << val.	percent ifTrue: [ s << '\%' ].	s << ']'.! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:57' prior: 33887668!importDetailsWith: importer	| details modifiers |	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	modifiers values 		detect: [ :m | m includesKey: 'OnAttackLanded' ]		ifFound: [ :f | 			^ self import: (f at: 'OnAttackLanded') modifiers: modifiers importer: importer prefix: 'On attack landed, ' ].	modifiers values 		detect: [ :m | m includesKey: 'OnAttack' ]		ifFound: [ :f | 			^ self import: (f at: 'OnAttack') modifiers: modifiers importer: importer prefix: 'On attack, ' ].	modifiers values 		detect: [ :m | m includesKey: 'Aura' ]		ifFound: [ :f | 			^ self importAura: f modifiers: modifiers importer: importer ].! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:58' prior: 33884762!importRunScript: modifier prefix: prefix	| otherModif |	otherModif := modifier copy.	#('Function' 'ScriptFile' 'Target' 'attack_effect') do: [ :e | otherModif removeKey: e ifAbsent: [  ] ].	otherModif := otherModif associations.	property := String streamContents: [:s |		s  			<< prefix			<< 'run script named ' << (modifier at: 'Function') << ' in '			<< ((modifier at: 'ScriptFile') splitOn: '/') last 			<< ' with parameters: ['.		otherModif do: [ :assoc | s << assoc key << ': ' << assoc value ]  separatedBy: [ s << ', ' ].		s << ']'  ].! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:59' prior: 33883631!import: triggerModifier modifiers: modifiers importer: importer prefix: prefix	| finalMod |	triggerModifier 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalMod := modifiers at: ((triggerModifier at: 'ApplyModifier') at: 'ModifierName') ifAbsent: [^self].	(finalMod includesKey: 'ThinkInterval') ifTrue: [ ^ self importThinkAbility: finalMod prefix: prefix ].	1halt.! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 13:59' prior: 33893895!import: triggerModifier modifiers: modifiers importer: importer prefix: prefix	| finalMod |	triggerModifier 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalMod := modifiers at: ((triggerModifier at: 'ApplyModifier') at: 'ModifierName') ifAbsent: [^self].	(finalMod includesKey: 'ThinkInterval') ifTrue: [ ^ self importThinkAbility: finalMod prefix: prefix ].! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 14:00' prior: 33894413!import: triggerModifier modifiers: modifiers importer: importer prefix: prefix	| finalMod |	triggerModifier 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalMod := modifiers at: ((triggerModifier at: 'ApplyModifier' ifAbsent: [^ self]) at: 'ModifierName') ifAbsent: [^self].	(finalMod includesKey: 'ThinkInterval') ifTrue: [ ^ self importThinkAbility: finalMod prefix: prefix ].! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 14:03' prior: 33889001!importAura: aura modifiers: modifiers importer: importer	| otherModif prefix |	otherModif := modifiers at: (aura at: 'Aura').	prefix := 'Aura: Range ' , (aura at: 'Aura_Radius') , ' Effect: '.	(otherModif includesKey: 'ThinkInterval')		ifTrue: [  ^ self importThinkAbility: otherModif prefix: prefix ].	property := String streamContents: [:s |		s << prefix.		self importProperties: otherModif on: s ].! !!GemTDAbility methodsFor: 'import' stamp: 'ClementBera 1/28/2018 14:04' prior: 33880973!importThinkAbility: modifier prefix: prefix	| think |	think := (modifier at: 'OnIntervalThink' ifAbsent: [^self]) at: 'Damage'.	property := String streamContents: [:s |		s  			<< prefix			<< 'during ' << (modifier at: 'Duration') << ' seconds, every ' 			<< (modifier at: 'ThinkInterval') << ' seconds, deals ' << (think at: 'Damage')			<< ' ' << (self damageKeywordFrom: (think at: 'Type')) << ' damage.' ].! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 14:04' prior: 33890127!importProperties: modifier on: s	| prop |	prop := modifier at: 'Properties' ifAbsent: [^ self].	prop keys do: [ :each |		(each beginsWith: 'MODIFIER_PROPERTY') ifTrue: [ self importModifierProperty: each with: (prop at: each) on: s ] ]! !----SNAPSHOT----2018-01-28T14:05:17.867655+01:00 Pharo.image priorSource: 316035!!GemTDAbility methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:07' prior: 33819969!shortExportOn: s	s << '""Ability""'.	s cr.	s cr.	s << '|!! Ability Code |!! Ability name |!! Ability Tooltip '.	s cr.	s 		<< '| ' << codeName		<< ' | ' << (name at: 'en')		<< ' | ' << (tooltip at: 'en').	s cr.	! !!GemTDAbility methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:07' prior: 33896891!shortExportOn: s	s << '""Ability""'.	s cr.	s cr.	s << '|!! Ability Code |!! Ability name |!! Ability Tooltip '.	s cr.	s 		<< '| ' << codeName		<< ' | ' << (name at: 'en')		<< ' | ' << (tooltip at: 'en').	s cr.	s cr.! !!GemTDAbility methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:08' prior: 33897205!shortExportOn: s	s << '""Ability""'.	s cr.	s cr.	s << '|!! Ability Code |!! Ability name |!! Ability Tooltip '.	s cr.	s 		<< '| ' << codeName		<< ' | ' << (name at: 'en')		<< ' | ' << (tooltip at: 'en').	s cr.	property ifNotNil: [ :p |		s << '""Raw Program extract:"" '.		s << property.		s cr ]! !!GemTDElement methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:08' prior: 33786945!exportAbilitiesOn: s	abilities withIndexDo: [ :ab :i |		ab shortExportOn: s i: i ]! !!GemTDAbility methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:10'!shortExportOn: s i: i	s << '""Ability ' << i printString << '""'.	s cr.	s << '|!! Ability Code |!! Ability name |!! Ability Tooltip '.	s cr.	s 		<< '| ' << codeName		<< ' | ' << (name at: 'en')		<< ' | ' << (tooltip at: 'en').	s cr.	property ifNotNil: [ :p |		s << 'Raw Program extract: =='.		s << property.		s << '=='.		s cr ]! !GemTDAbility removeSelector: #shortExportOn:!!GemTDAbility methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:10' prior: 33898087!shortExportOn: s i: i	s << '""Ability ' << i printString << '""'.	s cr.	s << '|!! Ability Code |!! Ability name |!! Ability Tooltip '.	s cr.	s 		<< '| ' << codeName		<< ' | ' << (name at: 'en')		<< ' | ' << (tooltip at: 'en').	s cr.	property ifNotNil: [ :p |		s cr.		s << 'Raw Program extract: =='.		s << property.		s << '=='.		s cr ]! !----QUIT----2018-01-28T14:12:17.295284+01:00 Pharo.image priorSource: 342286!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDAbility methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:22' prior: 33898569!shortExportOn: s i: i	s << '""Ability ' << i printString << '""'.	s cr.	s 		<< '|!! Ability Code | '		<< codeName.	s cr.	s 		<< '|!! Ability Name | ' 		<< (name at: 'en').	s cr.	s 		<< '|!! Ability Tooltip | '		<< (tooltip at: 'en').	s cr.	property ifNotNil: [ :p |		s << '|!! Raw Extract: | =='.		s << property.		s << '=='.		s cr ]! !----SNAPSHOT----2018-01-28T14:23:00.065016+01:00 Pharo.image priorSource: 344490!----QUIT----2018-01-28T14:23:05.470564+01:00 Pharo.image priorSource: 347939!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDElement methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:24' prior: 33871771!exportCombo: combo names: comboNames on: s	combo ifNil: [ ^ self ].	combo size < 2 ifTrue: [ ^ self ] .	s << '""Combination""' .	s cr.	s << '|!! ' << (name at: 'en') << ' | '.	comboNames 		do: [ :cn | s << cn ]		separatedBy: [ s << ' \+ ' ].	s cr.	s << '|!! ' << codeName << ' | '.	combo		do: [ :cn | s << cn ]		separatedBy: [ s << ' \+ ' ].	s cr.	"s << '|!! Combination |!! Combination |!! Combination |!! Combination'.	s cr.	s 		<< '| ' << comboNames first		<< ' | ' << comboNames second		<< ' | ' << (comboNames size < 3 ifTrue: [ '' ] ifFalse: [ comboNames at: 3 ])		<< ' | ' << (comboNames size < 4 ifTrue: [ '' ] ifFalse: [ 			comboNames size = 5 			ifTrue: [ (comboNames at: 4) , ' & ' , (comboNames at: 5) ]			ifFalse: [comboNames at: 4 ] ]).	s cr.	s 		<< '| ' << combo first		<< ' | ' << combo second		<< ' | ' << (combo size < 3 ifTrue: [ '' ] ifFalse: [ combo at: 3 ])		<< ' | ' << (combo size < 4 ifTrue: [ '' ] ifFalse: [ 			combo size = 5 			ifTrue: [ (combo at: 4) , ' & ' , (combo at: 5) ]			ifFalse: [combo at: 4 ] ]).	s cr."! !----SNAPSHOT----2018-01-28T14:24:52.463469+01:00 Pharo.image priorSource: 348022!!GemTDElement methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:45' prior: 33823239!exportNamesOn: s withAssoc: assoc	s << '|!! Code | ' << codeName.	s cr.	s << '|!! English | ' << self printName.	s cr.	s << '|!! ' << assoc key << ' | ' << assoc value.	s cr.	"	s << '|!! Code |!! English |!! Initials |!! ' << assoc key.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  (self initialsFrom: (name at: 'en')) 		<< ' | ' <<  assoc value.	s cr."! !!GemTDElement methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:46'!printName	^ (name at: 'en')! !----SNAPSHOT----2018-01-28T14:46:09.839195+01:00 Pharo.image priorSource: 352195!----SNAPSHOT----2018-01-28T14:46:12.819677+01:00 Pharo.image priorSource: 352875!----SNAPSHOT----2018-01-28T14:46:19.597862+01:00 Pharo.image priorSource: 352958!----SNAPSHOT----2018-01-28T14:46:24.250902+01:00 Pharo.image priorSource: 353041!!GemTDAdvancedTower methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 14:47'!printName	! !!GemTDAdvancedTower methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:47' prior: 33907732!printName	^ super printName , ' / ' , (self initialsFrom: (name at: 'en')) ! !----SNAPSHOT----2018-01-28T14:47:36.20824+01:00 Pharo.image priorSource: 353124!----SNAPSHOT----2018-01-28T14:47:41.853155+01:00 Pharo.image priorSource: 353489!!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:49' prior: 33827569!exportOn: s	((name at: 'en') = 'Unavailable' or: [ (name at: 'en') = '' ]) ifTrue: [ ^ self ].	self exportNamesOn: s withAssoc: 'Lvl' -> level.	s << '|!! Base HP | ' << hp.	s cr.	s << '|!! Base Movement | ' << ms.	mc = 'DOTA_UNIT_CAP_MOVE_FLY' ifTrue: [ s << ' (flying)' ].	s cr.	s << '|!! Armor | ' << armor.	s cr.	s << '|!! Magic resistance | ' << res.	s cr.	self exportAbilitiesOn: s! !!GemTDElement methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:50' prior: 33905548!exportCombo: combo names: comboNames on: s	combo ifNil: [ ^ self ].	combo size < 2 ifTrue: [ ^ self ] .	s << '|!! Combination  | '.	comboNames 		do: [ :cn | s << cn ]		separatedBy: [ s << ' \+ ' ].	"s << '|!! Combination |!! Combination |!! Combination |!! Combination'.	s cr.	s 		<< '| ' << comboNames first		<< ' | ' << comboNames second		<< ' | ' << (comboNames size < 3 ifTrue: [ '' ] ifFalse: [ comboNames at: 3 ])		<< ' | ' << (comboNames size < 4 ifTrue: [ '' ] ifFalse: [ 			comboNames size = 5 			ifTrue: [ (comboNames at: 4) , ' & ' , (comboNames at: 5) ]			ifFalse: [comboNames at: 4 ] ]).	s cr.	s 		<< '| ' << combo first		<< ' | ' << combo second		<< ' | ' << (combo size < 3 ifTrue: [ '' ] ifFalse: [ combo at: 3 ])		<< ' | ' << (combo size < 4 ifTrue: [ '' ] ifFalse: [ 			combo size = 5 			ifTrue: [ (combo at: 4) , ' & ' , (combo at: 5) ]			ifFalse: [combo at: 4 ] ]).	s cr."! !!GemTDSlate methodsFor: 'initialize' stamp: 'ClementBera 1/28/2018 14:51' prior: 33760538!importWith: details importer: importer	super importWith: details importer: importer.	picture := 'advanced/' , codeName.	combo := importer combinations at: codeName ifAbsent: [ #() ].	comboNames := self comboNamesFrom: combo importer: importer! !!GemTDSlate methodsFor: 'initialize' stamp: 'ClementBera 1/28/2018 14:51'!comboNamesFrom: com importer: importer	^ com collect: [ :c | self enNameFor: c importer: importer ].! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/28/2018 14:51'!comboNamesFrom: com importer: importer	^ com collect: [ :c | self enNameFor: c importer: importer ].! !GemTDSlate removeSelector: #comboNamesFrom:importer:!!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/28/2018 14:51' prior: 33910185!comboNamesFrom: com importer: importer	^ com collect: [ :c | 		((self enNameFor: c importer: importer) splitOn: '/') last trim ].! !!GemTDElement methodsFor: 'initialize' stamp: 'ClementBera 1/28/2018 14:51' prior: 33910438!comboNamesFrom: com importer: importer	^ com collect: [ :c | 		((self enNameFor: c importer: importer) splitOn: '/') last trim ]! !!GemTDAdvancedTower methodsFor: 'initialize' stamp: 'ClementBera 1/28/2018 14:52' prior: 33684994!importWith: details importer: importer	super importWith: details importer: importer.	picture := 'advanced/' , codeName.	combo := importer combinations at: codeName ifAbsent: [ #() ].	comboNames := self comboNamesFrom: combo importer: importer! !----SNAPSHOT----2018-01-28T14:52:02.840214+01:00 Pharo.image priorSource: 353571!----SNAPSHOT----2018-01-28T14:52:07.398922+01:00 Pharo.image priorSource: 356716!!GemTDSlate methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:52' prior: 33770455!exportOn: s 	s << '!!!! ' << (name at: 'en') capitalized.	s cr. 	s << '+file://wards/' << picture << '.png|width=8+'.	s cr.	self exportNamesOn: s.	self exportCombo: combo names: comboNames on: s.	self exportAbilitiesOn: s.! !!GemTDTower methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:53'!exportDamageOn: s	s << '|!! Attack Damage |!! Attack Rate |!! Attack Range'.	s cr.	s		<< '| ' << damage  		<< ' | ' <<  rate		<< ' | ' <<  range.	s cr.! !!GemTDTower methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:53' prior: 33872932!exportOn: s	| width |	width := codeName = 'gemtd_zhenjiazhishi' ifTrue: [ 15 ] ifFalse: [ 8 ]. 	s << '!!!! ' << (name at: 'en') capitalized.	s cr. 	s << '+file://wards/' << picture << '.png|width=' << width printString << '+'.	s cr.	self exportNamesOn: s.	self exportDamageOn: s.	self exportAbilitiesOn: s! !!GemTDTower methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:53'!exportHeaderOn: s	| width |	width := codeName = 'gemtd_zhenjiazhishi' ifTrue: [ 15 ] ifFalse: [ 8 ]. 	s << '!!!! ' << (name at: 'en') capitalized.	s cr. 	s << '+file://wards/' << picture << '.png|width=' << width printString << '+'.	s cr.! !!GemTDTower methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:53' prior: 33911955!exportOn: s	self exportHeaderOn: s.	self exportNamesOn: s.	self exportDamageOn: s.	self exportAbilitiesOn: s! !!GemTDAdvancedTower methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:54' prior: 33762087!exportOn: s	self exportHeaderOn: s.	self exportNamesOn: s.	self exportDamageOn: s.	self exportCombo: combo names: comboNames on: s.	self exportAbilitiesOn: s.! !!GemTDElement methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:54'!exSplit: s	s << '| ~ | ~'.	s cr.! !!GemTDAdvancedTower methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:55' prior: 33912890!exportOn: s	self exportHeaderOn: s.	self exSplit: s.	self exportNamesOn: s.	self exSplit: s.	self exportDamageOn: s.	self exSplit: s.	self exportCombo: combo names: comboNames on: s.	self exportAbilitiesOn: s.! !!GemTDElement methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:55' prior: 33897926!exportAbilitiesOn: s	abilities withIndexDo: [ :ab :i |		self exSplit: s.		ab shortExportOn: s i: i ]! !!GemTDTower methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:55' prior: 33912679!exportOn: s	self exportHeaderOn: s.	self exSplit: s.	self exportNamesOn: s.	self exSplit: s.	self exportDamageOn: s.	self exportAbilitiesOn: s! !!GemTDSlate methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:55' prior: 33911402!exportOn: s 	s << '!!!! ' << (name at: 'en') capitalized.	s cr. 	s << '+file://wards/' << picture << '.png|width=8+'.	s cr.	self exportNamesOn: s.	self exSplit: s.	self exportCombo: combo names: comboNames on: s.	self exSplit: s.	self exportAbilitiesOn: s.! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:55' prior: 33908174!exportOn: s	((name at: 'en') = 'Unavailable' or: [ (name at: 'en') = '' ]) ifTrue: [ ^ self ].	self exportNamesOn: s withAssoc: 'Lvl' -> level.	self exSplit: s.	s << '|!! Base HP | ' << hp.	s cr.	s << '|!! Base Movement | ' << ms.	mc = 'DOTA_UNIT_CAP_MOVE_FLY' ifTrue: [ s << ' (flying)' ].	s cr.	s << '|!! Armor | ' << armor.	s cr.	s << '|!! Magic resistance | ' << res.	s cr.	self exportAbilitiesOn: s! !!GemTDElement methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:56' prior: 33823580!exportNamesOn: s	self exportNamesOn: s withAssoc: nil! !!GemTDElement methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:56' prior: 33906800!exportNamesOn: s withAssoc: assoc	s << '|!! Code | ' << codeName.	s cr.	s << '|!! English | ' << self printName.	s cr.	assoc ifNotNil: [ 		s << '|!! ' << assoc key << ' | ' << assoc value.		s cr].	"	s << '|!! Code |!! English |!! Initials |!! ' << assoc key.	s cr.	s 		<< '| ' << codeName 		<< ' | ' <<  (name at: 'en') 		<< ' | ' <<  (self initialsFrom: (name at: 'en')) 		<< ' | ' <<  assoc value.	s cr."! !!GemTDTower methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:57' prior: 33911706!exportDamageOn: s	s << '|!! Attack Damage | ' << damage.	s cr.	s << '|!! Attack Rate | ' << rate. 	s cr.	s << '|!! Attack Range | ' << range .	s cr.! !!GemTDElement methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:57' prior: 33908665!exportCombo: combo names: comboNames on: s	combo ifNil: [ ^ self ].	combo size < 2 ifTrue: [ ^ self ] .	s << '|!! Combination  | '.	comboNames 		do: [ :cn | s << cn ]		separatedBy: [ s << ' \+ ' ].	s cr.	"s << '|!! Combination |!! Combination |!! Combination |!! Combination'.	s cr.	s 		<< '| ' << comboNames first		<< ' | ' << comboNames second		<< ' | ' << (comboNames size < 3 ifTrue: [ '' ] ifFalse: [ comboNames at: 3 ])		<< ' | ' << (comboNames size < 4 ifTrue: [ '' ] ifFalse: [ 			comboNames size = 5 			ifTrue: [ (comboNames at: 4) , ' & ' , (comboNames at: 5) ]			ifFalse: [comboNames at: 4 ] ]).	s cr.	s 		<< '| ' << combo first		<< ' | ' << combo second		<< ' | ' << (combo size < 3 ifTrue: [ '' ] ifFalse: [ combo at: 3 ])		<< ' | ' << (combo size < 4 ifTrue: [ '' ] ifFalse: [ 			combo size = 5 			ifTrue: [ (combo at: 4) , ' & ' , (combo at: 5) ]			ifFalse: [combo at: 4 ] ]).	s cr."! !!GemTDAbility methodsFor: 'export' stamp: 'ClementBera 1/28/2018 14:59' prior: 33902016!shortExportOn: s i: i	| num |	num := i printString.	s 		<< '|!! Ability ' << num << ' Code | '		<< codeName.	s cr.	s 		<< '|!! Ability ' << num << ' Name | ' 		<< (name at: 'en').	s cr.	s 		<< '|!! Ability ' << num << ' Tooltip | '		<< (tooltip at: 'en').	s cr.	property ifNotNil: [ :p |		s << '|!! Ability ' << num << ' Raw | =='.		s << property.		s << '=='.		s cr ]! !!GemTDTower methodsFor: 'export' stamp: 'ClementBera 1/28/2018 15:01' prior: 33913767!exportOn: s	self exportHeaderOn: s.	self exportNamesOn: s.	self exSplit: s.	self exportDamageOn: s.	self exportAbilitiesOn: s! !!GemTDAdvancedTower methodsFor: 'export' stamp: 'ClementBera 1/28/2018 15:01' prior: 33913263!exportOn: s	self exportHeaderOn: s.	self exportNamesOn: s.	self exSplit: s.	self exportDamageOn: s.	self exSplit: s.	self exportCombo: combo names: comboNames on: s.	self exportAbilitiesOn: s.! !----QUIT----2018-01-28T15:06:56.082133+01:00 Pharo.image priorSource: 356799!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 15:16' prior: 33891906!importModifierProperty: prop with: val on: s	| split percent |	percent := false.	split := prop splitOn: '_'.	split last = 'PERCENTAGE' ifTrue: [ percent := true ].	#('MODIFIER' 'PROPERTY' 'BONUS' 'CONSTANT' 'PERCENTAGE') do: [ :s2 |		split remove: s2 ifAbsent: [ ] ].	s << '['.	split do: [ :e | s << e] separatedBy: [ s space ].	s << ': '.	s << val.	percent ifTrue: [ s << '\%' ].	s << ']'.! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 15:17' prior: 33892403!importDetailsWith: importer	| details modifiers |	codeName = 'tower_speed1' ifTrue: [ 1halt ].	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	modifiers values 		detect: [ :m | m includesKey: 'OnAttackLanded' ]		ifFound: [ :f | 			^ self import: (f at: 'OnAttackLanded') modifiers: modifiers importer: importer prefix: 'On attack landed, ' ].	modifiers values 		detect: [ :m | m includesKey: 'OnAttack' ]		ifFound: [ :f | 			^ self import: (f at: 'OnAttack') modifiers: modifiers importer: importer prefix: 'On attack, ' ].	modifiers values 		detect: [ :m | m includesKey: 'Aura' ]		ifFound: [ :f | 			^ self importAura: f modifiers: modifiers importer: importer ].! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 15:19' prior: 33921320!importDetailsWith: importer	| details modifiers |	codeName = 'tower_speed1' ifTrue: [ 1halt ].	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	modifiers values 		detect: [ :m | m includesKey: 'OnAttackLanded' ]		ifFound: [ :f | 			^ self import: (f at: 'OnAttackLanded') modifiers: modifiers importer: importer prefix: 'On attack landed, ' ].	modifiers values 		detect: [ :m | m includesKey: 'OnAttack' ]		ifFound: [ :f | 			^ self import: (f at: 'OnAttack') modifiers: modifiers importer: importer prefix: 'On attack, ' ].	modifiers values 		detect: [ :m | m includesKey: 'Aura' ]		ifFound: [ :f | 			^ self importAura: f modifiers: modifiers importer: importer ].	modifiers values 		detect: [ :m | m includesKey: 'Properties' ]		ifFound: [ :f | 			^ String streamContents: [:s | self importProperties: f on: s ] ].! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 15:19' prior: 33922198!importDetailsWith: importer	| details modifiers |	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	modifiers values 		detect: [ :m | m includesKey: 'OnAttackLanded' ]		ifFound: [ :f | 			^ self import: (f at: 'OnAttackLanded') modifiers: modifiers importer: importer prefix: 'On attack landed, ' ].	modifiers values 		detect: [ :m | m includesKey: 'OnAttack' ]		ifFound: [ :f | 			^ self import: (f at: 'OnAttack') modifiers: modifiers importer: importer prefix: 'On attack, ' ].	modifiers values 		detect: [ :m | m includesKey: 'Aura' ]		ifFound: [ :f | 			^ self importAura: f modifiers: modifiers importer: importer ].	modifiers values 		detect: [ :m | m includesKey: 'Properties' ]		ifFound: [ :f | 			^ String streamContents: [:s | self importProperties: f on: s ] ].! !----QUIT----2018-01-28T15:20:00.295095+01:00 Pharo.image priorSource: 363273!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 15:21' prior: 33923231!importDetailsWith: importer	| details modifiers |	codeName = 'tower_speed2' ifTrue: [ 1halt ].	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	modifiers values 		detect: [ :m | m includesKey: 'OnAttackLanded' ]		ifFound: [ :f | 			^ self import: (f at: 'OnAttackLanded') modifiers: modifiers importer: importer prefix: 'On attack landed, ' ].	modifiers values 		detect: [ :m | m includesKey: 'OnAttack' ]		ifFound: [ :f | 			^ self import: (f at: 'OnAttack') modifiers: modifiers importer: importer prefix: 'On attack, ' ].	modifiers values 		detect: [ :m | m includesKey: 'Aura' ]		ifFound: [ :f | 			^ self importAura: f modifiers: modifiers importer: importer ].	modifiers values 		detect: [ :m | m includesKey: 'Properties' ]		ifFound: [ :f | 			^ String streamContents: [:s | self importProperties: f on: s ] ].! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 15:22' prior: 33927222!importDetailsWith: importer	| details modifiers |	codeName = 'tower_speed2' ifTrue: [ 1halt ].	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	modifiers values 		detect: [ :m | m includesKey: 'OnAttackLanded' ]		ifFound: [ :f | 			^ self import: (f at: 'OnAttackLanded') modifiers: modifiers importer: importer prefix: 'On attack landed, ' ].	modifiers values 		detect: [ :m | m includesKey: 'OnAttack' ]		ifFound: [ :f | 			^ self import: (f at: 'OnAttack') modifiers: modifiers importer: importer prefix: 'On attack, ' ].	modifiers values 		detect: [ :m | m includesKey: 'Aura' ]		ifFound: [ :f | 			^ self importAura: f modifiers: modifiers importer: importer ].	modifiers values 		detect: [ :m | m includesKey: 'Properties' ]		ifFound: [ :f | 			^ property := String streamContents: [:s | self importProperties: f on: s ] ].! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 15:22' prior: 33928255!importDetailsWith: importer	| details modifiers |	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	modifiers values 		detect: [ :m | m includesKey: 'OnAttackLanded' ]		ifFound: [ :f | 			^ self import: (f at: 'OnAttackLanded') modifiers: modifiers importer: importer prefix: 'On attack landed, ' ].	modifiers values 		detect: [ :m | m includesKey: 'OnAttack' ]		ifFound: [ :f | 			^ self import: (f at: 'OnAttack') modifiers: modifiers importer: importer prefix: 'On attack, ' ].	modifiers values 		detect: [ :m | m includesKey: 'Aura' ]		ifFound: [ :f | 			^ self importAura: f modifiers: modifiers importer: importer ].	modifiers values 		detect: [ :m | m includesKey: 'Properties' ]		ifFound: [ :f | 			^ property := String streamContents: [:s | self importProperties: f on: s ] ].! !----QUIT----2018-01-28T15:22:28.372869+01:00 Pharo.image priorSource: 369683!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 15:31' prior: 33873520!importWith: importer 	name := Dictionary new.	self importDetailsWith: importer.	#(en sch tch) do: [ :l |		name at: l put: ((importer resources at: l) at: 'DOTA_Tooltip_Ability_' , codeName ifAbsent: [nil]) ].	tooltip := Dictionary new.	#(en sch tch) do: [ :l |		tooltip at: l put: ((importer resources at: l) at: 'DOTA_Tooltip_Ability_' , codeName , '_Description' ifAbsent: [nil]) ].! !!GemTDAbility methodsFor: 'export' stamp: 'ClementBera 1/28/2018 15:32' prior: 33916796!shortExportOn: s i: i	| num |	num := i printString.	s 		<< '|!! Ability ' << num << ' Code | '		<< codeName.	s cr.	(name at: 'en') ifNotNil: [ 		s 			<< '|!! Ability ' << num << ' Name | ' 			<< (name at: 'en').		s cr].	(tooltip at: 'en') ifNotNil: [		s 			<< '|!! Ability ' << num << ' Tooltip | '			<< (tooltip at: 'en').		s cr].	property ifNotNil: [ :p |		s << '|!! Ability ' << num << ' Raw | =='.		s << property.		s << '=='.		s cr ]! !----SNAPSHOT----2018-01-28T15:32:38.424377+01:00 Pharo.image priorSource: 375764!----SNAPSHOT----2018-01-28T15:32:40.417493+01:00 Pharo.image priorSource: 379817!----SNAPSHOT----2018-01-28T15:32:45.881405+01:00 Pharo.image priorSource: 379900!!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/28/2018 15:33' prior: 33914362!exportOn: s	((name at: 'en') = 'Unavailable' or: [ (name at: 'en') = '' ]) ifTrue: [ ^ self ].	s << '+file://wards/' << codeName << '.png|width=' << 8 printString << '+'.	s cr.	self exportNamesOn: s withAssoc: 'Lvl' -> level.	self exSplit: s.	s << '|!! Base HP | ' << hp.	s cr.	s << '|!! Base Movement | ' << ms.	mc = 'DOTA_UNIT_CAP_MOVE_FLY' ifTrue: [ s << ' (flying)' ].	s cr.	s << '|!! Armor | ' << armor.	s cr.	s << '|!! Magic resistance | ' << res.	s cr.	self exportAbilitiesOn: s! !----SNAPSHOT----2018-01-28T15:33:23.590285+01:00 Pharo.image priorSource: 379983!!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/28/2018 15:34' prior: 33934586!exportOn: s	((name at: 'en') = 'Unavailable' or: [ (name at: 'en') = '' ]) ifTrue: [ ^ self ].	s << '+file://creeps/' << codeName << '.png|width=' << 8 printString << '+'.	s cr.	self exportNamesOn: s withAssoc: 'Lvl' -> level.	self exSplit: s.	s << '|!! Base HP | ' << hp.	s cr.	s << '|!! Base Movement | ' << ms.	mc = 'DOTA_UNIT_CAP_MOVE_FLY' ifTrue: [ s << ' (flying)' ].	s cr.	s << '|!! Armor | ' << armor.	s cr.	s << '|!! Magic resistance | ' << res.	s cr.	self exportAbilitiesOn: s! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/28/2018 15:34' prior: 33935260!exportOn: s	((name at: 'en') = 'Unavailable' or: [ (name at: 'en') = '' ]) ifTrue: [ ^ self ].	s << '+file://creeps/' << codeName << '.png|width=8+'.	s cr.	self exportNamesOn: s withAssoc: 'Lvl' -> level.	self exSplit: s.	s << '|!! Base HP | ' << hp.	s cr.	s << '|!! Base Movement | ' << ms.	mc = 'DOTA_UNIT_CAP_MOVE_FLY' ifTrue: [ s << ' (flying)' ].	s cr.	s << '|!! Armor | ' << armor.	s cr.	s << '|!! Magic resistance | ' << res.	s cr.	self exportAbilitiesOn: s! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/28/2018 15:34' prior: 33935852!exportOn: s	((name at: 'en') = 'Unavailable' or: [ (name at: 'en') = '' ]) ifTrue: [ ^ self ].	s << '+file://creeps/' << codeName << '.png|width=8+'.	s cr.	self exportNamesOn: s withAssoc: 'Lvl' -> level.	self exSplit: s.	s << '|!! Base HP | ' << hp.	s cr.	s << '|!! Base Movement | ' << ms.	mc = 'DOTA_UNIT_CAP_MOVE_FLY' ifTrue: [ s << ' (flying)' ].	s cr.	s << '|!! Armor | ' << armor. 	s cr.	s << '|!! Magic resistance | ' << res.	s cr.	self exportAbilitiesOn: s! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/28/2018 15:35' prior: 33936422!exportOn: s	((name at: 'en') = 'Unavailable' or: [ (name at: 'en') = '' ]) ifTrue: [ ^ self ].	s << '+file://creeps/' << codeName << '.png|width=10+'.	s cr.	self exportNamesOn: s withAssoc: 'Lvl' -> level.	self exSplit: s.	s << '|!! Base HP | ' << hp.	s cr.	s << '|!! Base Movement | ' << ms.	mc = 'DOTA_UNIT_CAP_MOVE_FLY' ifTrue: [ s << ' (flying)' ].	s cr.	s << '|!! Armor | ' << armor. 	s cr.	s << '|!! Magic resistance | ' << res.	s cr.	self exportAbilitiesOn: s! !----QUIT----2018-01-28T15:35:37.338166+01:00 Pharo.image priorSource: 380657!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 21:26' prior: 33929300!importDetailsWith: importer	| details modifiers |	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	self importModifiers: modifiers copy.	! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 21:27'!importModifiers: modifiers	self importAuras: modifiers.	self importOnTriggers: modifiers.	self importProperties: modifiers.! !!GemTDAbility methodsFor: 'as yet unclassified' stamp: 'ClementBera 1/28/2018 21:28'!importAuras: modifiers	modifiers copy do: [ :mod |		(mod includesKey: 'Aura') ifTrue: [ self importAura: mod editing: modifiers ] ]! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:29'!importAura: mod editing: modifiers	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:30' prior: 33941338!importAura: aura editing: modifiers	| otherModif prefix |	otherModif := modifiers at: (aura at: 'Aura').	prefix := 'Aura: Range ' , (aura at: 'Aura_Radius') , ' Effect: '.	(otherModif includesKey: 'ThinkInterval')		ifTrue: [  ^ self importThinkAbility: otherModif prefix: prefix ].	property := String streamContents: [:s |		s << prefix.		self importProperties: otherModif on: s ].! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:31'!importOnTriggers: modifiers	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:32' prior: 33941473!importAura: aura editing: modifiers	| auraModif prefix |	auraModif := modifiers at: (aura at: 'Aura').	modifiers removeKey: (aura at: 'Aura').	prefix := 'Aura: Range ' , (aura at: 'Aura_Radius') , ' Effect: '.	(auraModif includesKey: 'ThinkInterval')		ifTrue: [  ^ self importThinkAbility: auraModif prefix: prefix ].	property := String streamContents: [:s |		s << prefix.		self importProperties: auraModif on: s ].! !----SNAPSHOT----2018-01-28T21:32:11.594561+01:00 Pharo.image priorSource: 383045!----SNAPSHOT----2018-01-28T21:32:22.12186+01:00 Pharo.image priorSource: 388067!!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:33' prior: 33941944!importOnTriggers: modifiers	modifiers copy do: [ :mod |		(mod keys anySatisfy: [:k | k beginsWith: 'OnAttack']) ifTrue: [ 			self importTrigger: mod editing: modifiers ] ]! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:34' prior: 33942072!importAura: aura editing: modifiers	| auraModif prefix |	auraModif := modifiers at: (aura at: 'Aura').	modifiers removeKey: (aura at: 'Aura').	modifiers removeKey: (modifiers keyForValue: aura).	prefix := 'Aura: Range ' , (aura at: 'Aura_Radius') , ' Effect: '.	(auraModif includesKey: 'ThinkInterval')		ifTrue: [  ^ self importThinkAbility: auraModif prefix: prefix ].	property := String streamContents: [:s |		s << prefix.		self importProperties: auraModif on: s ].! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:37'!importTrigger: trigger editing: modifiers	| key triggerModifier |	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	triggerModifier :=	(trigger at: key).	modifiers removeKey: key.	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:38'!importSecondMod: mod prefix: prefix	(mod includesKey: 'ThinkInterval')		ifTrue: [  ^ self importThinkAbility: mod prefix: prefix ].	property := String streamContents: [:s |		s << prefix.		self importProperties: mod on: s ].! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:38' prior: 33943033!importAura: aura editing: modifiers	| auraModif prefix |	auraModif := modifiers at: (aura at: 'Aura').	modifiers removeKey: (aura at: 'Aura').	modifiers removeKey: (modifiers keyForValue: aura).	prefix := 'Aura: Range ' , (aura at: 'Aura_Radius') , ' Effect: '.	self importSecondMod: auraModif prefix: prefix! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:41' prior: 33943593!importTrigger: trigger editing: modifiers	| key triggerModifier prefix finalMod finalModKey |	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	triggerModifier :=	(trigger at: key).	prefix := (self clean: key) , ', '.	modifiers removeKey: key.	triggerModifier 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (triggerModifier at: 'ApplyModifier' ifAbsent: [^ self]) at: 'ModifierName'.	modifiers removeKey: finalModKey.	finalMod := modifiers at: finalModKey.	self importSecondMod: finalMod prefix: prefix.! !----SNAPSHOT----2018-01-28T21:41:19.062171+01:00 Pharo.image priorSource: 388150!----SNAPSHOT----2018-01-28T21:41:23.261773+01:00 Pharo.image priorSource: 390777!----SNAPSHOT----2018-01-28T21:41:39.498486+01:00 Pharo.image priorSource: 390860!!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:42' prior: 33940906!importModifiers: modifiers	self importAuras: modifiers.	self importOnTriggers: modifiers.	self importDirect: modifiers.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:43'!importDirect: modifiers	modifiers copy do: [ :mod |		self importSecondMod: mod prefix: 'Unit ' ] ! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:43' prior: 33945759!importDirect: modifiers	modifiers copy do: [ :mod |		self importSecondMod: mod prefix: 'Apply ' ] ! !----SNAPSHOT----2018-01-28T21:43:29.865327+01:00 Pharo.image priorSource: 390943!!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:43' prior: 33945957!importDirect: modifiers	modifiers copy do: [ :mod |		self importSecondMod: mod prefix: 'Direct ' ] ! !----SNAPSHOT----2018-01-28T21:43:42.213034+01:00 Pharo.image priorSource: 391628!!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:44' prior: 33944620!importTrigger: trigger editing: modifiers	| key triggerModifier prefix finalMod finalModKey |	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	triggerModifier :=	(trigger at: key).	prefix := (self clean: key) , ', '.	modifiers removeKey: key.	triggerModifier 		at: 'RunScript'		ifPresent: [ :rn | 1halt. ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (triggerModifier at: 'ApplyModifier' ifAbsent: [^ self]) at: 'ModifierName'.	modifiers removeKey: finalModKey.	finalMod := modifiers at: finalModKey.	self importSecondMod: finalMod prefix: prefix.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:45' prior: 33946522!importTrigger: trigger editing: modifiers	| key triggerModifier prefix finalMod finalModKey |	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	triggerModifier :=	(trigger at: key).	prefix := (self clean: key) , ', '.	modifiers removeKey: (modifiers keyForValue: trigger).	triggerModifier 		at: 'RunScript'		ifPresent: [ :rn | 1halt. ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (triggerModifier at: 'ApplyModifier' ifAbsent: [^ self]) at: 'ModifierName'.	modifiers removeKey: finalModKey.	finalMod := modifiers at: finalModKey.	self importSecondMod: finalMod prefix: prefix.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:45' prior: 33947214!importTrigger: trigger editing: modifiers	| key triggerModifier prefix finalMod finalModKey |	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	triggerModifier :=	(trigger at: key).	prefix := (self clean: key) , ', '.	modifiers removeKey: (modifiers keyAtValue: trigger).	triggerModifier 		at: 'RunScript'		ifPresent: [ :rn | 1halt. ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (triggerModifier at: 'ApplyModifier' ifAbsent: [^ self]) at: 'ModifierName'.	modifiers removeKey: finalModKey.	finalMod := modifiers at: finalModKey.	self importSecondMod: finalMod prefix: prefix.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:46' prior: 33947935!importTrigger: trigger editing: modifiers	| key triggerModifier prefix finalMod finalModKey |	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	triggerModifier :=	(trigger at: key).	modifiers removeKey: (modifiers keyAtValue: trigger).	prefix := (self clean: key) , ', '.	triggerModifier 		at: 'RunScript'		ifPresent: [ :rn | 1halt. ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (triggerModifier at: 'ApplyModifier' ifAbsent: [^ self]) at: 'ModifierName'.	finalMod := modifiers at: finalModKey.	modifiers removeKey: finalModKey.	self importSecondMod: finalMod prefix: prefix.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:47' prior: 33948655!importTrigger: trigger editing: modifiers	| key triggerModifier prefix finalMod finalModKey |	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	triggerModifier :=	(trigger at: key).	modifiers removeKey: (modifiers keyAtValue: trigger).	prefix := (self clean: key) , ', '.	triggerModifier 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (triggerModifier at: 'ApplyModifier' ifAbsent: [^ self]) at: 'ModifierName'.	finalMod := modifiers at: finalModKey.	modifiers removeKey: finalModKey.	self importSecondMod: finalMod prefix: prefix.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:47' prior: 33944207!importAura: aura editing: modifiers	| auraModif prefix |	auraModif := modifiers at: (aura at: 'Aura').	modifiers removeKey: (aura at: 'Aura').	modifiers removeKey: (modifiers keyAtValue: aura).	prefix := 'Aura: Range ' , (aura at: 'Aura_Radius') , ' Effect: '.	self importSecondMod: auraModif prefix: prefix! !GemTDAbility removeSelector: #import:modifiers:importer:prefix:!GemTDAbility removeSelector: #importAura:modifiers:importer:!GemTDAbility removeSelector: #importAttack:modifiers:importer:!!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:48' prior: 33878637!damageKeywordFrom: keyword	keyword = 'DAMAGE_TYPE_MAGICAL' ifTrue: [ ^ 'magic' ].	keyword = 'DAMAGE_TYPE_PHYSICAL' ifTrue: [ ^ 'physical' ].	^ 'pure'! !----SNAPSHOT----2018-01-28T21:48:17.48563+01:00 Pharo.image priorSource: 391911!----SNAPSHOT----2018-01-28T21:48:41.364795+01:00 Pharo.image priorSource: 396417!!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:49' prior: 33940584!importDetailsWith: importer	| details modifiers |	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	codeName = 'tower_baoji1' ifTrue: [ 1halt ].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	self importModifiers: modifiers copy.	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:54' prior: 33920812!importModifierProperty: prop with: val on: s	| split percent |	percent := false.	split := prop splitOn: '_'.	split last = 'PERCENTAGE' ifTrue: [ percent := true ].	#('MODIFIER' 'PROPERTY' 'BONUS' 'PREATTACK' 'CONSTANT' 'PERCENTAGE') do: [ :s2 |		split remove: s2 ifAbsent: [ ] ].	s << '['.	split do: [ :e | s << e] separatedBy: [ s space ].	s << ': '.	s << val.	percent ifTrue: [ s << '\%' ].	s << ']'.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:54' prior: 33949375!importTrigger: trigger editing: modifiers	| key triggerModifier prefix finalMod finalModKey |	modifiers removeKey: (modifiers keyAtValue: trigger).	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	prefix := (self clean: key) , ', '.	(trigger includesKey: 'Properties') ifTrue: [  ^ self importSecondMod: trigger prefix: prefix].	triggerModifier :=	(trigger at: key).	triggerModifier 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (triggerModifier at: 'ApplyModifier' ifAbsent: [^ self]) at: 'ModifierName'.	finalMod := modifiers at: finalModKey.	modifiers removeKey: finalModKey.	self importSecondMod: finalMod prefix: prefix.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:55'!addProperty: prop	property ifNil: [ ^ property := prop ].	property := property , String cr , prop! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:56' prior: 33893235!importRunScript: modifier prefix: prefix	| otherModif |	otherModif := modifier copy.	#('Function' 'ScriptFile' 'Target' 'attack_effect') do: [ :e | otherModif removeKey: e ifAbsent: [  ] ].	otherModif := otherModif associations.	self addProperty: (String streamContents: [:s |		s  			<< prefix			<< 'run script named ' << (modifier at: 'Function') << ' in '			<< ((modifier at: 'ScriptFile') splitOn: '/') last 			<< ' with parameters: ['.		otherModif do: [ :assoc | s << assoc key << ': ' << assoc value ]  separatedBy: [ s << ', ' ].		s << ']'  ]).! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:56' prior: 33943880!importSecondMod: mod prefix: prefix	(mod includesKey: 'ThinkInterval')		ifTrue: [  ^ self importThinkAbility: mod prefix: prefix ].	self addProperty: (String streamContents: [:s |		s << prefix.		self importProperties: mod on: s ])! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:56' prior: 33895954!importThinkAbility: modifier prefix: prefix	| think |	think := (modifier at: 'OnIntervalThink' ifAbsent: [^self]) at: 'Damage'.	self addProperty: (String streamContents: [:s |		s  			<< prefix			<< 'during ' << (modifier at: 'Duration') << ' seconds, every ' 			<< (modifier at: 'ThinkInterval') << ' seconds, deals ' << (think at: 'Damage')			<< ' ' << (self damageKeywordFrom: (think at: 'Type')) << ' damage.' ]).! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:58' prior: 33952000!importTrigger: trigger editing: modifiers	| key triggerModifier prefix finalMod finalModKey |	modifiers removeKey: (modifiers keyAtValue: trigger).	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	prefix := (self clean: key) , ', '.	(trigger includesKey: 'Properties') ifTrue: [  ^ self importSecondMod: trigger prefix: prefix].	(trigger includesKey: 'Random') ifTrue: [  ^ self importSecondMod: trigger prefix: prefix].	triggerModifier :=	(trigger at: key).	triggerModifier 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (triggerModifier at: 'ApplyModifier' ifAbsent: [^ self]) at: 'ModifierName'.	finalMod := modifiers at: finalModKey.	modifiers removeKey: finalModKey.	self importSecondMod: finalMod prefix: prefix.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:59' prior: 33953653!importSecondMod: mod prefix: prefix	(mod includesKey: 'ThinkInterval')		ifTrue: [  ^ self importThinkAbility: mod prefix: prefix ].	(mod includesKey: 'Random') 		ifTrue: [ ^ self importRandomAbility: mod prefix: prefix ].	self addProperty: (String streamContents: [:s |		s << prefix.		self importProperties: mod on: s ])! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 21:59'!importRandomAbility: modifier prefix: prefix 	| think |	1halt.	think := (modifier at: 'OnIntervalThink' ifAbsent: [^self]) at: 'Damage'.	self addProperty: (String streamContents: [:s |		s  			<< prefix			<< 'during ' << (modifier at: 'Duration') << ' seconds, every ' 			<< (modifier at: 'ThinkInterval') << ' seconds, deals ' << (think at: 'Damage')			<< ' ' << (self damageKeywordFrom: (think at: 'Type')) << ' damage.' ]).! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:00' prior: 33954510!importTrigger: trigger editing: modifiers	| key triggerModifier prefix finalMod finalModKey |	modifiers removeKey: (modifiers keyAtValue: trigger).	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	prefix := (self clean: key) , ', '.	(trigger includesKey: 'Properties') ifTrue: [  ^ self importSecondMod: trigger prefix: prefix].	1halt.	(trigger includesKey: 'Random') ifTrue: [  ^ self importSecondMod: trigger prefix: prefix].	triggerModifier :=	(trigger at: key).	triggerModifier 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (triggerModifier at: 'ApplyModifier' ifAbsent: [^ self]) at: 'ModifierName'.	finalMod := modifiers at: finalModKey.	modifiers removeKey: finalModKey.	self importSecondMod: finalMod prefix: prefix.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:01' prior: 33956356!importTrigger: trigger editing: modifiers	| key triggerModifier prefix finalMod finalModKey |	modifiers removeKey: (modifiers keyAtValue: trigger).	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	prefix := (self clean: key) , ', '.	(trigger includesKey: 'Properties') ifTrue: [  ^ self importSecondMod: trigger prefix: prefix].	triggerModifier :=	(trigger at: key).	(triggerModifier includesKey: 'Random') ifTrue: [  ^ self importSecondMod: trigger prefix: prefix].	triggerModifier 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (triggerModifier at: 'ApplyModifier' ifAbsent: [^ self]) at: 'ModifierName'.	finalMod := modifiers at: finalModKey.	modifiers removeKey: finalModKey.	self importSecondMod: finalMod prefix: prefix.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:01' prior: 33957267!importTrigger: trigger editing: modifiers	| key triggerModifier prefix finalMod finalModKey |	modifiers removeKey: (modifiers keyAtValue: trigger).	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	prefix := (self clean: key) , ', '.	(trigger includesKey: 'Properties') ifTrue: [  ^ self importSecondMod: trigger prefix: prefix].	triggerModifier :=	(trigger at: key).	(triggerModifier includesKey: 'Random') ifTrue: [  ^ self importSecondMod: triggerModifier prefix: prefix].	triggerModifier 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (triggerModifier at: 'ApplyModifier' ifAbsent: [^ self]) at: 'ModifierName'.	finalMod := modifiers at: finalModKey.	modifiers removeKey: finalModKey.	self importSecondMod: finalMod prefix: prefix.! !----SNAPSHOT----2018-01-28T22:01:46.107311+01:00 Pharo.image priorSource: 396499!!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:04' prior: 33942760!importOnTriggers: modifiers	#(OnAttackStart OnAttack OnAttackLanded) do: [ :key | 		modifiers copy do: [ :mod |			(mod keys anySatisfy: [:k | k includes: key]) ifTrue: [ 				self importTrigger: mod editing: modifiers ] ] ]! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:04' prior: 33955823!importRandomAbility: modifier prefix: prefix 	| think |	1halt. 	think := (modifier at: 'OnIntervalThink' ifAbsent: [^self]) at: 'Damage'.	self addProperty: (String streamContents: [:s |		s  			<< prefix			<< 'during ' << (modifier at: 'Duration') << ' seconds, every ' 			<< (modifier at: 'ThinkInterval') << ' seconds, deals ' << (think at: 'Damage')			<< ' ' << (self damageKeywordFrom: (think at: 'Type')) << ' damage.' ]).! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:05' prior: 33958178!importTrigger: trigger editing: modifiers	| key triggerModifier prefix finalMod finalModKey |	1halt.	modifiers removeKey: (modifiers keyAtValue: trigger).	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	prefix := (self clean: key) , ', '.	(trigger includesKey: 'Properties') ifTrue: [  ^ self importSecondMod: trigger prefix: prefix].	triggerModifier :=	(trigger at: key).	(triggerModifier includesKey: 'Random') ifTrue: [  ^ self importSecondMod: triggerModifier prefix: prefix].	triggerModifier 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (triggerModifier at: 'ApplyModifier' ifAbsent: [^ self]) at: 'ModifierName'.	finalMod := modifiers at: finalModKey.	modifiers removeKey: finalModKey.	self importSecondMod: finalMod prefix: prefix.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:05' prior: 33955413!importSecondMod: mod prefix: prefix	(mod includesKey: 'ThinkInterval')		ifTrue: [  ^ self importThinkAbility: mod prefix: prefix ].	self addProperty: (String streamContents: [:s |		s << prefix.		self importProperties: mod on: s ])! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:06' prior: 33960039!importTrigger: trigger editing: modifiers	| key triggerModifier prefix finalMod finalModKey |	1halt.	modifiers removeKey: (modifiers keyAtValue: trigger).	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	prefix := (self clean: key) , ', '.	(trigger includesKey: 'Properties') ifTrue: [  ^ self importSecondMod: trigger prefix: prefix].	triggerModifier :=	(trigger at: key).	(triggerModifier includesKey: 'Random') ifTrue: [  ^ self importRandom: triggerModifier prefix: prefix editing: modifiers].	triggerModifier 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (triggerModifier at: 'ApplyModifier' ifAbsent: [^ self]) at: 'ModifierName'.	finalMod := modifiers at: finalModKey.	modifiers removeKey: finalModKey.	self importSecondMod: finalMod prefix: prefix.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:06'!importRandom: modifier prefix: prefix editing: modifiers	| think |	1halt. 	think := (modifier at: 'OnIntervalThink' ifAbsent: [^self]) at: 'Damage'.	self addProperty: (String streamContents: [:s |		s  			<< prefix			<< 'during ' << (modifier at: 'Duration') << ' seconds, every ' 			<< (modifier at: 'ThinkInterval') << ' seconds, deals ' << (think at: 'Damage')			<< ' ' << (self damageKeywordFrom: (think at: 'Type')) << ' damage.' ]).! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:11' prior: 33962227!importRandom: modifier prefix: prefix editing: modifiers	| think mod ch finalModKey finalMod fullPrefix |	mod := modifier at: 'Random'.	ch := mod at: 'Chance'.	fullPrefix := prefix , '[' , ch printString , '\%]'.	finalModKey := ((mod at: 'OnSuccess') at: 'ApplyModifier' ifAbsent: [^ self		addProperty: fullPrefix]) at: 'ModifierName'.	finalMod := modifiers at: finalModKey.	self addProperty: (String streamContents: [:s |		self importSecondMod: finalMod prefix: 	fullPrefix ]).! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:12' prior: 33961300!importTrigger: trigger editing: modifiers	| key triggerModifier prefix finalMod finalModKey |	1halt.	modifiers removeKey: (modifiers keyAtValue: trigger).	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	prefix := (self clean: key) , ', '.	(trigger includesKey: 'Properties') ifTrue: [  ^ self importSecondMod: trigger prefix: prefix].	triggerModifier :=	(trigger at: key).	(triggerModifier includesKey: 'Random') ifTrue: [  ^ self importRandom: triggerModifier prefix: prefix].	triggerModifier 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (triggerModifier at: 'ApplyModifier' ifAbsent: [^ self]) at: 'ModifierName'.	finalMod := modifiers at: finalModKey.	modifiers removeKey: finalModKey.	self importSecondMod: finalMod prefix: prefix.! !GemTDAbility removeSelector: #importRandomAbility:prefix:!!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:13'!importRandom: modifier prefix: prefix 	| mod ch |	mod := modifier at: 'Random'.	ch := mod at: 'Chance'.	self addProperty: (prefix , '[' , ch printString , '\%]')! !GemTDAbility removeSelector: #importRandom:prefix:editing:!!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:13' prior: 33963358!importTrigger: trigger editing: modifiers	| key triggerModifier prefix finalMod finalModKey |	modifiers removeKey: (modifiers keyAtValue: trigger).	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	prefix := (self clean: key) , ', '.	(trigger includesKey: 'Properties') ifTrue: [  ^ self importSecondMod: trigger prefix: prefix].	triggerModifier :=	(trigger at: key).	(triggerModifier includesKey: 'Random') ifTrue: [  ^ self importRandom: triggerModifier prefix: prefix].	triggerModifier 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (triggerModifier at: 'ApplyModifier' ifAbsent: [^ self]) at: 'ModifierName'.	finalMod := modifiers at: finalModKey.	modifiers removeKey: finalModKey.	self importSecondMod: finalMod prefix: prefix.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:14' prior: 33964651!importTrigger: trigger editing: modifiers	| key triggerModifier prefix finalMod finalModKey |	1halt.	modifiers removeKey: (modifiers keyAtValue: trigger).	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	prefix := (self clean: key) , ', '.	(trigger includesKey: 'Properties') ifTrue: [  ^ self importSecondMod: trigger prefix: prefix].	triggerModifier :=	(trigger at: key).	(triggerModifier includesKey: 'Random') ifTrue: [  ^ self importRandom: triggerModifier prefix: prefix].	triggerModifier 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (triggerModifier at: 'ApplyModifier' ifAbsent: [^ self]) at: 'ModifierName'.	finalMod := modifiers at: finalModKey.	modifiers removeKey: finalModKey.	self importSecondMod: finalMod prefix: prefix.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:14' prior: 33965567!importTrigger: trigger editing: modifiers	| key triggerModifier prefix finalMod finalModKey |	1halt. 	modifiers removeKey: (modifiers keyAtValue: trigger).	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	prefix := (self clean: key) , ', '.	(trigger includesKey: 'Properties') ifTrue: [  ^ self importSecondMod: trigger prefix: prefix].	triggerModifier :=	(trigger at: key).	(triggerModifier includesKey: 'Random') ifTrue: [  ^ self importRandom: triggerModifier prefix: prefix].	triggerModifier 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (triggerModifier at: 'ApplyModifier' ifAbsent: [^ self]) at: 'ModifierName'.	finalMod := modifiers at: finalModKey.	modifiers removeKey: finalModKey.	self importSecondMod: finalMod prefix: prefix.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:14' prior: 33966491!importTrigger: trigger editing: modifiers	| key triggerModifier prefix finalMod finalModKey |	1halt.  	modifiers removeKey: (modifiers keyAtValue: trigger).	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	prefix := (self clean: key) , ', '.	(trigger includesKey: 'Properties') ifTrue: [  ^ self importSecondMod: trigger prefix: prefix].	triggerModifier :=	(trigger at: key).	(triggerModifier includesKey: 'Random') ifTrue: [  ^ self importRandom: triggerModifier prefix: prefix].	triggerModifier 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (triggerModifier at: 'ApplyModifier' ifAbsent: [^ self]) at: 'ModifierName'.	finalMod := modifiers at: finalModKey.	modifiers removeKey: finalModKey.	self importSecondMod: finalMod prefix: prefix.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:15' prior: 33959180!importOnTriggers: modifiers	#(OnAttackStart OnAttack OnAttackLanded) do: [ :key | 		modifiers copy do: [ :mod |			(mod keys includesKey: key) ifTrue: [ 				self importTrigger: mod editing: modifiers ] ] ]! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:15' prior: 33968342!importOnTriggers: modifiers	#(OnAttackStart OnAttack OnAttackLanded) do: [ :key | 		modifiers copy do: [ :mod |			(mod includesKey: key) ifTrue: [ 				self importTrigger: mod editing: modifiers ] ] ]! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:16' prior: 33964326!importRandom: modifier prefix: prefix 	| mod ch |	1halt.	mod := modifier at: 'Random'.	ch := mod at: 'Chance'.	self addProperty: (prefix , '[' , ch printString , '\%]')! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:17' prior: 33968951!importRandom: modifier prefix: prefix 	| mod ch |	1halt.	mod := modifier at: 'Random'.	ch := mod at: 'Chance'.	self addProperty: (prefix , '[' , ch , '\%]')! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:17' prior: 33967416!importTrigger: trigger editing: modifiers	| key triggerModifier prefix finalMod finalModKey |	modifiers removeKey: (modifiers keyAtValue: trigger).	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	prefix := (self clean: key) , ', '.	(trigger includesKey: 'Properties') ifTrue: [  ^ self importSecondMod: trigger prefix: prefix].	triggerModifier :=	(trigger at: key).	(triggerModifier includesKey: 'Random') ifTrue: [  ^ self importRandom: triggerModifier prefix: prefix].	triggerModifier 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (triggerModifier at: 'ApplyModifier' ifAbsent: [^ self]) at: 'ModifierName'.	finalMod := modifiers at: finalModKey.	modifiers removeKey: finalModKey.	self importSecondMod: finalMod prefix: prefix.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:17' prior: 33969223!importRandom: modifier prefix: prefix 	| mod ch |	mod := modifier at: 'Random'.	ch := mod at: 'Chance'.	self addProperty: (prefix , '[' , ch , '\%]')! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:19' prior: 33951110!importDetailsWith: importer	| details modifiers |	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	self importModifiers: modifiers copy.	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:20' prior: 33952794!addProperty: prop	property ifNil: [ ^ property := prop ].	property := property , ' ~ ' , prop! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:21' prior: 33952992!importRunScript: modifier prefix: prefix	| otherModif |	otherModif := modifier copy.	#('Function' 'ScriptFile' 'Target' 'attack_effect') do: [ :e | otherModif removeKey: e ifAbsent: [  ] ].	otherModif := otherModif associations.	self addProperty: (String streamContents: [:s |		s  			<< prefix			<< 'run ' << (modifier at: 'Function') << ' ('			<< ((modifier at: 'ScriptFile') splitOn: '/') last 			<< ') with parameters: ['.		otherModif do: [ :assoc | s << assoc key << ': ' << assoc value ]  separatedBy: [ s << ', ' ].		s << ']'  ]).! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:21' prior: 33946239!importDirect: modifiers	modifiers copy do: [ :mod |		self importSecondMod: mod prefix: '' ] ! !!GemTDAbility methodsFor: 'export' stamp: 'ClementBera 1/28/2018 22:22' prior: 33933787!shortExportOn: s i: i	| num |	num := i printString.	s 		<< '|!! Ability ' << num << ' Code | '		<< codeName.	s cr.	(name at: 'en') ifNotNil: [ 		s 			<< '|!! Ability ' << num << ' Name | ' 			<< (name at: 'en').		s cr].	(tooltip at: 'en') ifNotNil: [		s 			<< '|!! Ability ' << num << ' Tooltip | '			<< (tooltip at: 'en').		s cr].	(property notNil and: [ property isEmpty not ]) ifTrue: [		s << '|!! Ability ' << num << ' Raw | =='.		s << property.		s << '=='.		s cr ]! !----SNAPSHOT----2018-01-28T22:24:10.443986+01:00 Pharo.image priorSource: 404569!!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:24' prior: 33971176!importRunScript: modifier prefix: prefix	| otherModif |	otherModif := modifier copy.	#('Function' 'ScriptFile' 'Target' 'attack_effect') do: [ :e | otherModif removeKey: e ifAbsent: [  ] ].	otherModif := otherModif associations.	self addProperty: (String streamContents: [:s |		s  			<< prefix			<< 'run script ' << (modifier at: 'Function') << ' ('			<< ((modifier at: 'ScriptFile') splitOn: '/') last 			<< ') with parameters: ['.		otherModif do: [ :assoc | s << assoc key << ': ' << assoc value ]  separatedBy: [ s << ', ' ].		s << ']'  ]).! !----SNAPSHOT----2018-01-28T22:33:20.976015+01:00 Pharo.image priorSource: 418072!----SNAPSHOT----2018-01-28T22:33:24.082022+01:00 Pharo.image priorSource: 418809!----SNAPSHOT----2018-01-28T22:33:29.703857+01:00 Pharo.image priorSource: 418892!----QUIT----2018-01-28T22:33:31.747577+01:00 Pharo.image priorSource: 418975!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:40'!importInnerMod: mod editing: modifiers prefix: prefix	| finalModKey finalMod |	(mod includesKey: 'Random') ifTrue: [  ^ self importRandom: mod prefix: prefix editing: modifiers ].	mod 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (mod at: 'ApplyModifier' ifAbsent: [^ self]) at: 'ModifierName'.	finalMod := modifiers at: finalModKey.	modifiers removeKey: finalModKey.	self importSecondMod: finalMod prefix: prefix.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:41'!importRandom: modifier prefix: prefix editing: modifiers	| mod ch |	mod := modifier at: 'Random'.	ch := mod at: 'Chance'.	self importInnerMod: mod editing: modifiers prefix: (prefix , '[' , ch , '\%]').! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:41' prior: 33977133!importRandom: modifier prefix: prefix editing: modifiers	| mod ch |	mod := modifier at: 'Random'.	ch := mod at: 'Chance'.	self importInnerMod: mod editing: modifiers prefix: (prefix , '[' , ch , '\%]')! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:41' prior: 33969483!importTrigger: trigger editing: modifiers	| key triggerModifier prefix finalMod finalModKey |	modifiers removeKey: (modifiers keyAtValue: trigger).	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	prefix := (self clean: key) , ', '.	(trigger includesKey: 'Properties') ifTrue: [  ^ self importSecondMod: trigger prefix: prefix].	triggerModifier :=	(trigger at: key).	self importInnerMod: triggerModifier editing: modifiers prefix: prefix! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:41' prior: 33976574!importInnerMod: mod editing: modifiers prefix: prefix	| finalModKey finalMod |	(mod includesKey: 'Random') ifTrue: [  ^ self importRandom: mod prefix: prefix editing: modifiers ].	mod 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (mod at: 'ApplyModifier' ifAbsent: [^ self addProperty: prefix]) at: 'ModifierName'.	finalMod := modifiers at: finalModKey.	modifiers removeKey: finalModKey.	self importSecondMod: finalMod prefix: prefix.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:41' prior: 33977742!importTrigger: trigger editing: modifiers	| key triggerModifier prefix|	modifiers removeKey: (modifiers keyAtValue: trigger).	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	prefix := (self clean: key) , ', '.	(trigger includesKey: 'Properties') ifTrue: [  ^ self importSecondMod: trigger prefix: prefix].	triggerModifier :=	(trigger at: key).	self importInnerMod: triggerModifier editing: modifiers prefix: prefix! !----SNAPSHOT----2018-01-28T22:42:05.520388+01:00 Pharo.image priorSource: 419058!----SNAPSHOT----2018-01-28T22:42:21.280251+01:00 Pharo.image priorSource: 424913!!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:45' prior: 33970651!importDetailsWith: importer	| details modifiers |	codeName = 'tower_aojiao' ifTrue: [1halt].		details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	self importModifiers: modifiers copy.	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:49' prior: 33951487!importModifierProperty: prop with: val on: s	| split percent |	percent := false.	split := prop splitOn: '_'.	split last = 'PERCENTAGE' ifTrue: [ percent := true ].	#('MODIFIER' 'PROPERTY' 'STATE' 'BONUS' 'PREATTACK' 'CONSTANT' 'PERCENTAGE') do: [ :s2 |		split remove: s2 ifAbsent: [ ] ].	s << '['.	split do: [ :e | s << e] separatedBy: [ s space ].	s << ': '.	(val endsWith: 'ENABLED') 		ifTrue: [ s << 'true' ]		ifFalse: [ 			s << val.			val = '0' ifTrue: [ s << '' ] ].	percent ifTrue: [ s << '\%' ].	s << ']'.! !----SNAPSHOT----2018-01-28T22:49:53.058022+01:00 Pharo.image priorSource: 424996!----SNAPSHOT----2018-01-28T22:49:56.156835+01:00 Pharo.image priorSource: 426083!!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:50' prior: 33979984!importModifierProperty: prop with: val on: s	| split percent |	percent := false.	split := prop splitOn: '_'.	split last = 'PERCENTAGE' ifTrue: [ percent := true ].	#('MODIFIER' 'PROPERTY' 'STATE' 'BONUS' 'PREATTACK' 'CONSTANT' 'PERCENTAGE') do: [ :s2 |		split remove: s2 ifAbsent: [ ] ].	s << '['.	split do: [ :e | s << e] separatedBy: [ s space ].	s << ': '.	(val endsWith: 'ENABLED') 		ifTrue: [ s << 'true' ]		ifFalse: [ 			s << val.			val = '0' ifTrue: [ s << '(false ?)' ].			val = '1' ifTrue: [ s << '(true ?)' ]. ].	percent ifTrue: [ s << '\%' ].	s << ']'.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:50' prior: 33980777!importModifierProperty: prop with: val on: s	| split percent |	percent := false.	split := prop splitOn: '_'.	split last = 'PERCENTAGE' ifTrue: [ percent := true ].	#('MODIFIER' 'PROPERTY' 'STATE' 'BONUS' 'PREATTACK' 'CONSTANT' 'PERCENTAGE') do: [ :s2 |		split remove: s2 ifAbsent: [ ] ].	s << '['.	split do: [ :e | s << e] separatedBy: [ s space ].	s << ': '.	(val endsWith: 'ENABLED') 		ifTrue: [ s << 'true' ]		ifFalse: [ 			s << val.			val = '0' ifTrue: [ s << '(could mean false)' ].			val = '1' ifTrue: [ s << '(could mean true)' ]. ].	percent ifTrue: [ s << '\%' ].	s << ']'.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:54' prior: 33977438!importRandom: modifier prefix: prefix editing: modifiers	| mod ch |	mod := modifier at: 'Random'.	ch := mod at: 'Chance'.	self importInnerMod: (mod at: 'OnSuccess') editing: modifiers prefix: (prefix , '[' , ch , '\%]')! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:55' prior: 33978305!importInnerMod: mod editing: modifiers prefix: prefix	| finalModKey finalMod fullPrefix |	(mod includesKey: 'Random') ifTrue: [  ^ self importRandom: mod prefix: prefix editing: modifiers ].	mod 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (mod at: 'ApplyModifier' ifAbsent: [^ self addProperty: prefix]) at: 'ModifierName'.	finalMod := modifiers at: finalModKey.	fullPrefix := prefix , ((mod at: 'ApplyModifier') at: 'Duration' ifPresent: [:e | ' ' , e] ifAbsent: [ '' ]) .	modifiers removeKey: finalModKey.	self importSecondMod: finalMod prefix: fullPrefix.! !----SNAPSHOT----2018-01-28T22:55:32.74076+01:00 Pharo.image priorSource: 426166!!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:56' prior: 33982475!importInnerMod: mod editing: modifiers prefix: prefix	| finalModKey finalMod fullPrefix |	(mod includesKey: 'Random') ifTrue: [  ^ self importRandom: mod prefix: prefix editing: modifiers ].	mod 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (mod at: 'ApplyModifier' ifAbsent: [^ self addProperty: prefix]) at: 'ModifierName'.	finalMod := modifiers at: finalModKey.	fullPrefix := prefix , ((mod at: 'ApplyModifier') at: 'Duration' ifPresent: [:e | ' [Duration: ' , e , ']'] ifAbsent: [ '' ]) .	modifiers removeKey: finalModKey.	1halt.	self importSecondMod: finalMod prefix: fullPrefix.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:58' prior: 33896476!importProperties: modifier on: s	| prop prop2 |	prop := modifier at: 'Properties' ifAbsent: [Dictionary new].	prop2 := modifier at: 'States' ifAbsent: [Dictionary new].	prop2 keysAndValuesDo: [ :k :v | prop at: k put: v ].	prop keys do: [ :each |		(each beginsWith: 'MODIFIER_') ifTrue: [ self importModifierProperty: each with: (prop at: each) on: s ] ]! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:58' prior: 33983279!importInnerMod: mod editing: modifiers prefix: prefix	| finalModKey finalMod fullPrefix |	(mod includesKey: 'Random') ifTrue: [  ^ self importRandom: mod prefix: prefix editing: modifiers ].	mod 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (mod at: 'ApplyModifier' ifAbsent: [^ self addProperty: prefix]) at: 'ModifierName'.	finalMod := modifiers at: finalModKey.	fullPrefix := prefix , ((mod at: 'ApplyModifier') at: 'Duration' ifPresent: [:e | ' [Duration: ' , e , ']'] ifAbsent: [ '' ]) .	modifiers removeKey: finalModKey.	self importSecondMod: finalMod prefix: fullPrefix.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:59' prior: 33979607!importDetailsWith: importer	| details modifiers |	codeName = 'tower_aojiao' ifTrue: [1halt].	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	self importModifiers: modifiers copy.	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 22:59' prior: 33985224!importDetailsWith: importer	| details modifiers |	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	self importModifiers: modifiers copy.	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 23:01' prior: 33985599!importDetailsWith: importer	| details modifiers |	codeName = 'gemtd_gudaidejixueshi' ifTrue: [ 1halt ].	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	self importModifiers: modifiers copy.	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 23:01' prior: 33985930!importDetailsWith: importer	| details modifiers |	codeName = 'gemtd_gudaidejixueshi' ifTrue: [ 1halt ]. 	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	self importModifiers: modifiers copy.	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 23:02' prior: 33986316!importDetailsWith: importer	| details modifiers |	codeName = 'tower_chazhuangshandian' ifTrue: [ 1halt ]. 	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	self importModifiers: modifiers copy.	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 23:02' prior: 33972683!importRunScript: modifier prefix: prefix	| otherModif |	1halt.	otherModif := modifier copy.	#('Function' 'ScriptFile' 'Target' 'attack_effect') do: [ :e | otherModif removeKey: e ifAbsent: [  ] ].	otherModif := otherModif associations.	self addProperty: (String streamContents: [:s |		s  			<< prefix			<< 'run script ' << (modifier at: 'Function') << ' ('			<< ((modifier at: 'ScriptFile') splitOn: '/') last 			<< ') with parameters: ['.		otherModif do: [ :assoc | s << assoc key << ': ' << assoc value ]  separatedBy: [ s << ', ' ].		s << ']'  ]).! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 23:03' prior: 33987092!importRunScript: modifier prefix: prefix	| otherModif |	"1halt."	otherModif := modifier copy.	#('Function' 'ScriptFile' 'Target' 'attack_effect') do: [ :e | otherModif removeKey: e ifAbsent: [  ] ].	otherModif := otherModif associations.	self addProperty: (String streamContents: [:s |		s  			<< prefix			<< 'run script ' << (modifier at: 'Function') << ' ('			<< ((modifier at: 'ScriptFile') splitOn: '/') last 			<< ') with parameters: ['.		otherModif do: [ :assoc | s << assoc key << ': ' << assoc value ]  separatedBy: [ s << ', ' ].		s << ']'  ]).! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 23:03' prior: 33987754!importRunScript: modifier prefix: prefix	| otherModif |	1halt.	otherModif := modifier copy.	#('Function' 'ScriptFile' 'Target' 'attack_effect') do: [ :e | otherModif removeKey: e ifAbsent: [  ] ].	otherModif := otherModif associations.	self addProperty: (String streamContents: [:s |		s  			<< prefix			<< 'run script ' << (modifier at: 'Function') << ' ('			<< ((modifier at: 'ScriptFile') splitOn: '/') last 			<< ') with parameters: ['.		otherModif do: [ :assoc | s << assoc key << ': ' << assoc value ]  separatedBy: [ s << ', ' ].		s << ']'  ]).! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 23:05' prior: 33986703!importDetailsWith: importer	| details modifiers |	codeName = 'tower_chazhuangshandian' ifTrue: [ 1halt ]. 	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	self importModifiers: modifiers copy.	details at: 'AbilitySpecial' ifPresent: [ :it |		self importAbilitySpecial: it ]	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 23:06'!importAbilitySpecial: collection	1halt.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 23:06' prior: 33988418!importRunScript: modifier prefix: prefix	| otherModif |	otherModif := modifier copy.	#('Function' 'ScriptFile' 'Target' 'attack_effect') do: [ :e | otherModif removeKey: e ifAbsent: [  ] ].	otherModif := otherModif associations.	self addProperty: (String streamContents: [:s |		s  			<< prefix			<< 'run script ' << (modifier at: 'Function') << ' ('			<< ((modifier at: 'ScriptFile') splitOn: '/') last 			<< ') with parameters: ['.		otherModif do: [ :assoc | s << assoc key << ': ' << assoc value ]  separatedBy: [ s << ', ' ].		s << ']'  ]).! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 23:07' prior: 33989536!importAbilitySpecial: collection	abilitySpecial := Dictionary new.	collection values do: [ :val |		val removeKey: 'var_type' ifAbsent: [  ].		val keysAndValuesDo: [ :k :v | abilitySpecial at: k put: v ] ]	! !!GemTDAbility methodsFor: 'export' stamp: 'ClementBera 1/28/2018 23:09' prior: 33972010!shortExportOn: s i: i	| num |	num := i printString.	s 		<< '|!! Ability ' << num << ' Code | '		<< codeName.	s cr.	(name at: 'en') ifNotNil: [ 		s 			<< '|!! Ability ' << num << ' Name | ' 			<< (name at: 'en').		s cr].	(tooltip at: 'en') ifNotNil: [		s 			<< '|!! Ability ' << num << ' Tooltip | '			<< (tooltip at: 'en').		s cr].	(property notNil and: [ property isEmpty not ]) ifTrue: [		s << '|!! Ability ' << num << ' Raw | =='.		s << property.		s << '=='.		s cr ].	abilitySpecial ifNotNil: [ 		s << '|!! Special ' << num << ' Raw | =='.		abilitySpecial keysAndValuesDo: [ :k :v |			s << '[' << k << ': ' << v << ']' ].		s << '=='.		s cr ]! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 23:09' prior: 33990329!importAbilitySpecial: collection	codeName logCr.	abilitySpecial := Dictionary new.	collection values do: [ :val |		val removeKey: 'var_type' ifAbsent: [  ].		val keysAndValuesDo: [ :k :v | abilitySpecial at: k put: v ] ]	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 23:09' prior: 33989080!importDetailsWith: importer	| details modifiers | 	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	self importModifiers: modifiers copy.	details at: 'AbilitySpecial' ifPresent: [ :it |		self importAbilitySpecial: it ]	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 23:10' prior: 33991403!importAbilitySpecial: collection	abilitySpecial := Dictionary new.	collection values do: [ :val |		val removeKey: 'var_type' ifAbsent: [  ].		val keysAndValuesDo: [ :k :v | abilitySpecial at: k put: v ] ]	! !!GemTDAbility methodsFor: 'export' stamp: 'ClementBera 1/28/2018 23:10' prior: 33990632!shortExportOn: s i: i	| num |	num := i printString.	s 		<< '|!! Ability ' << num << ' Code | '		<< codeName.	s cr.	(name at: 'en') ifNotNil: [ 		s 			<< '|!! Ability ' << num << ' Name | ' 			<< (name at: 'en').		s cr].	(tooltip at: 'en') ifNotNil: [		s 			<< '|!! Ability ' << num << ' Tooltip | '			<< (tooltip at: 'en').		s cr].	(property notNil and: [ property isEmpty not ]) ifTrue: [		s << '|!! Ability ' << num << ' Raw | =='.		s << property.		s << '=='.		s cr ].	abilitySpecial ifNotNil: [ 		s << '|!! Ability ' << num << ' Spe. Raw | =='.		abilitySpecial keysAndValuesDo: [ :k :v |			s << '[' << k << ': ' << v << ']' ].		s << '=='.		s cr ]! !----QUIT----2018-01-28T23:10:56.904141+01:00 Pharo.image priorSource: 428669!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 23:18' prior: 33991729!importDetailsWith: importer	| details modifiers | 	codeName = 'tower_zheyi2' ifTrue: [ 1halt ].	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	self importModifiers: modifiers copy.	details at: 'AbilitySpecial' ifPresent: [ :it |		self importAbilitySpecial: it ]	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 23:19' prior: 33996227!importDetailsWith: importer	| details modifiers | 	codeName = 'tower_zheyi2' ifTrue: [ 1halt ].	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	self importModifiers: modifiers copy.	details at: 'AbilitySpecial' ifPresent: [ :it |		self importAbilitySpecial: it ].	details at: 'SpellImmunityType' ifPresent: [ :it |		spellImmunityType := it endsWith: 'YES' ]	! !!GemTDAbility methodsFor: 'export' stamp: 'ClementBera 1/28/2018 23:20' prior: 33992447!shortExportOn: s i: i	| num |	num := i printString.	s 		<< '|!! Ability ' << num << ' Code | '		<< codeName.	s cr.	(name at: 'en') ifNotNil: [ 		s 			<< '|!! Ability ' << num << ' Name | ' 			<< (name at: 'en').		s cr].	(tooltip at: 'en') ifNotNil: [		s 			<< '|!! Ability ' << num << ' Tooltip | '			<< (tooltip at: 'en').		s cr].	(property notNil and: [ property isEmpty not ]) ifTrue: [		s << '|!! Ability ' << num << ' Raw | =='.		s << property.		s << '=='.		s cr ].	abilitySpecial ifNotNil: [ 		s << '|!! Ability ' << num << ' Spe. Raw | =='.		abilitySpecial keysAndValuesDo: [ :k :v |			s << '[' << k << ': ' << v << ']' ].		s << '=='.		s cr ].	spellImmunityType ifNotNil: [ 		s 			<< '|!! Pierce Spell Immunity (Raw) | =='			<< spellImmunityType printString 			<< '==' ]! !!GemTDAbility methodsFor: 'export' stamp: 'ClementBera 1/28/2018 23:20' prior: 33997240!shortExportOn: s i: i	| num |	num := i printString.	s 		<< '|!! Ability ' << num << ' Code | '		<< codeName.	s cr.	(name at: 'en') ifNotNil: [ 		s 			<< '|!! Ability ' << num << ' Name | ' 			<< (name at: 'en').		s cr].	(tooltip at: 'en') ifNotNil: [		s 			<< '|!! Ability ' << num << ' Tooltip | '			<< (tooltip at: 'en').		s cr].	(property notNil and: [ property isEmpty not ]) ifTrue: [		s << '|!! Ability ' << num << ' Raw | =='.		s << property.		s << '=='.		s cr ].	abilitySpecial ifNotNil: [ 		s << '|!! Ability ' << num << ' Spe. Raw | =='.		abilitySpecial keysAndValuesDo: [ :k :v |			s << '[' << k << ': ' << v << ']' ].		s << '=='.		s cr ].	spellImmunityType ifNotNil: [ 		s 			<< '|!! Pierce Spell Immunity (Raw) | =='			<< spellImmunityType printString 			<< '=='.		s cr  ]! !----SNAPSHOT----2018-01-28T23:21:00.265336+01:00 Pharo.image priorSource: 438695!!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/28/2018 23:21' prior: 33996688!importDetailsWith: importer	| details modifiers | 	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	self importModifiers: modifiers copy.	details at: 'AbilitySpecial' ifPresent: [ :it |		self importAbilitySpecial: it ].	details at: 'SpellImmunityType' ifPresent: [ :it |		spellImmunityType := it endsWith: 'YES' ]	! !----QUIT----2018-01-28T23:21:14.517353+01:00 Pharo.image priorSource: 444533!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDAbility methodsFor: 'export' stamp: 'ClementBera 1/28/2018 23:23' prior: 33998143!shortExportOn: s i: i	| num |	num := i printString.	s 		<< '|!! Ability ' << num << ' | '		<< codeName.	s cr.	(name at: 'en') ifNotNil: [ 		s 			<< '|!! Name | ' 			<< (name at: 'en').		s cr].	(tooltip at: 'en') ifNotNil: [		s 			<< '|!! Tooltip | '			<< (tooltip at: 'en').		s cr].	(property notNil and: [ property isEmpty not ]) ifTrue: [		s << '|!! Raw | =='.		s << property.		s << '=='.		s cr ].	abilitySpecial ifNotNil: [ 		s << '|!! Raw: Special | =='.		abilitySpecial keysAndValuesDo: [ :k :v |			s << '[' << k << ': ' << v << ']' ].		s << '=='.		s cr ].	spellImmunityType ifNotNil: [ 		s 			<< '|!! Raw: Pierce Spell Immunity | =='			<< spellImmunityType printString 			<< '=='.		s cr  ]! !----QUIT----2018-01-28T23:26:35.554693+01:00 Pharo.image priorSource: 445128!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 10:26' prior: 33999144!importDetailsWith: importer	| details modifiers | 	codeName = 'gemtd_sililankazhixing' ifTrue: [ 1halt ].	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	self importModifiers: modifiers copy.	details at: 'AbilitySpecial' ifPresent: [ :it |		self importAbilitySpecial: it ].	details at: 'SpellImmunityType' ifPresent: [ :it |		spellImmunityType := it endsWith: 'YES' ]	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 10:26' prior: 34006486!importDetailsWith: importer	| details modifiers | 	codeName = 'tower_jihan' ifTrue: [ 1halt ].	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	self importModifiers: modifiers copy.	details at: 'AbilitySpecial' ifPresent: [ :it |		self importAbilitySpecial: it ].	details at: 'SpellImmunityType' ifPresent: [ :it |		spellImmunityType := it endsWith: 'YES' ]	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 10:26' prior: 33984485!importInnerMod: mod editing: modifiers prefix: prefix	| finalModKey finalMod fullPrefix |	(mod includesKey: 'Random') ifTrue: [  ^ self importRandom: mod prefix: prefix editing: modifiers ].	mod 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (mod at: 'ApplyModifier' ifAbsent: [^ self addProperty: prefix]) at: 'ModifierName'.	finalMod := modifiers at: finalModKey.	1halt.	fullPrefix := prefix , ((mod at: 'ApplyModifier') at: 'Duration' ifPresent: [:e | ' [Duration: ' , e , ']'] ifAbsent: [ '' ]) .	modifiers removeKey: finalModKey.	self importSecondMod: finalMod prefix: fullPrefix.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 10:28' prior: 34007611!importInnerMod: mod editing: modifiers prefix: prefix	| finalModKey finalMod fullPrefix |	(mod includesKey: 'Random') ifTrue: [  ^ self importRandom: mod prefix: prefix editing: modifiers ].	mod 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (mod at: 'ApplyModifier' ifAbsent: [^ self addProperty: prefix]) at: 'ModifierName'.	finalMod := modifiers at: finalModKey.	fullPrefix := self applyModifierPrefix: mod.	modifiers removeKey: finalModKey.	self importSecondMod: finalMod prefix: fullPrefix.! !!GemTDAbility methodsFor: 'import' stamp: 'ClementBera 1/29/2018 10:28'!applyModifierPrefix: aCollection 	self shouldBeImplemented.! !!GemTDAbility methodsFor: 'import' stamp: 'ClementBera 1/29/2018 10:29'!applyModifierPrefix: applyModifier prefix: prefix	^ String streamContents: [ :s | 		s << prefix.		applyModifier at: 'Duration' ifPresent: [:e | s << ' [Duration: ' , e , ']'] ifAbsent: [ '' ] .		applyModifier at: 'Target'	]! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 10:29' prior: 34008358!importInnerMod: mod editing: modifiers prefix: prefix	| finalModKey finalMod fullPrefix |	(mod includesKey: 'Random') ifTrue: [  ^ self importRandom: mod prefix: prefix editing: modifiers ].	mod 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (mod at: 'ApplyModifier' ifAbsent: [^ self addProperty: prefix]) at: 'ModifierName'.	finalMod := modifiers at: finalModKey.	fullPrefix := self applyModifierPrefix: mod prefix: prefix.	modifiers removeKey: finalModKey.	self importSecondMod: finalMod prefix: fullPrefix.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 10:30' prior: 34009456!importInnerMod: mod editing: modifiers prefix: prefix	| finalModKey finalMod fullPrefix |	(mod includesKey: 'Random') ifTrue: [  ^ self importRandom: mod prefix: prefix editing: modifiers ].	mod 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (mod at: 'ApplyModifier' ifAbsent: [^ self addProperty: prefix]) at: 'ModifierName'.	finalMod := modifiers at: finalModKey.	fullPrefix := self applyModifierPrefix: (mod at: 'ApplyModifier') prefix: prefix.	modifiers removeKey: finalModKey.	self importSecondMod: finalMod prefix: fullPrefix.! !!GemTDAbility methodsFor: 'import' stamp: 'ClementBera 1/29/2018 10:30' prior: 34009129!applyModifierPrefix: applyModifier prefix: prefix	^ String streamContents: [ :s | 		s << prefix.		applyModifier at: 'Duration' ifPresent: [:e | s << ' [Duration: ' << e << ']'] ifAbsent: [ '' ] .		(applyModifier at: 'Target') halt.	]! !!GemTDAbility methodsFor: 'import' stamp: 'ClementBera 1/29/2018 10:32' prior: 34010814!applyModifierPrefix: applyModifier prefix: prefix	^ String streamContents: [ :s | 		s << prefix.		applyModifier at: 'Duration' ifPresent: [:e | s << ' [Duration: ' << e << ']'] ifAbsent: [ '' ] .		(applyModifier at: 'Target') class = Dictionary 			ifTrue: [ "non single target"					(applyModifier at: 'Target') 					at: 'Radius'						ifPresent: [:e | s << ' [Splash: ' << e << ']'] ifAbsent: [ '' ] ]]! !GemTDAbility removeSelector: #applyModifierPrefix:!!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 10:32' prior: 33981456!importModifierProperty: prop with: val on: s	| split percent |	percent := false.	split := prop splitOn: '_'.	split last = 'PERCENTAGE' ifTrue: [ percent := true ].	#('MODIFIER' 'PROPERTY' 'STATE' 'BONUS' 'PREATTACK' 'CONSTANT' 'PERCENTAGE') do: [ :s2 |		split remove: s2 ifAbsent: [ ] ].	s << '['.	split do: [ :e | s << e] separatedBy: [ s space ].	s << ': '.	(val endsWith: 'ENABLED') 		ifTrue: [ s << 'true' ]		ifFalse: [ s << val ].	percent ifTrue: [ s << '\%' ].	s << ']'.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 10:33' prior: 34007054!importDetailsWith: importer	| details modifiers | 	codeName = 'tower_ranjin' ifTrue: [ 1halt ].	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	self importModifiers: modifiers copy.	details at: 'AbilitySpecial' ifPresent: [ :it |		self importAbilitySpecial: it ].	details at: 'SpellImmunityType' ifPresent: [ :it |		spellImmunityType := it endsWith: 'YES' ]	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 10:35' prior: 33989675!importRunScript: modifier prefix: prefix	| otherModif |	otherModif := modifier copy.	#('Function' 'ScriptFile' 'Target' 'attack_effect') do: [ :e | otherModif removeKey: e ifAbsent: [  ] ].	otherModif := otherModif associations.	self addProperty: (String streamContents: [:s |		s  			<< prefix			<< 'run script ' << (modifier at: 'Function') << ' ('			<< ((modifier at: 'ScriptFile') splitOn: '/') last 			<< ') with ['.		otherModif do: [ :assoc | s << assoc key << ': ' << assoc value ]  separatedBy: [ s << ', ' ].		s << ']'  ]).! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 10:35' prior: 34012295!importDetailsWith: importer	| details modifiers | 	codeName = 'tower_10jiyun' ifTrue: [ 1halt ].	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	self importModifiers: modifiers copy.	details at: 'AbilitySpecial' ifPresent: [ :it |		self importAbilitySpecial: it ].	details at: 'SpellImmunityType' ifPresent: [ :it |		spellImmunityType := it endsWith: 'YES' ]	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 10:36' prior: 33982153!importRandom: modifier prefix: prefix editing: modifiers	| mod ch |	mod := modifier at: 'Random'.	ch := mod at: 'Chance'.	1halt.	self importInnerMod: (mod at: 'OnSuccess') editing: modifiers prefix: (prefix , '[' , ch , '\%]')! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 10:37' prior: 34010127!importInnerMod: mod editing: modifiers prefix: prefix	| finalModKey finalMod fullPrefix |	(mod includesKey: 'Stun') ifTrue: [  ^ self importStun: mod prefix: prefix ].	(mod includesKey: 'Random') ifTrue: [  ^ self importRandom: mod prefix: prefix editing: modifiers ].	mod 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (mod at: 'ApplyModifier' ifAbsent: [^ self addProperty: prefix]) at: 'ModifierName'.	finalMod := modifiers at: finalModKey.	fullPrefix := self applyModifierPrefix: (mod at: 'ApplyModifier') prefix: prefix.	modifiers removeKey: finalModKey.	self importSecondMod: finalMod prefix: fullPrefix.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 10:38'!importStun: mod prefix: prefix 	1halt.	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 10:39' prior: 34014384!importInnerMod: mod editing: modifiers prefix: prefix	| finalModKey finalMod fullPrefix |	(mod includesKey: 'Stun') ifTrue: [  ^ self importStun: (mod at: 'Stun') prefix: prefix ].	(mod includesKey: 'Random') ifTrue: [  ^ self importRandom: mod prefix: prefix editing: modifiers ].	mod 		at: 'RunScript'		ifPresent: [ :rn | ^ self importRunScript: rn prefix: prefix ].	finalModKey  := (mod at: 'ApplyModifier' ifAbsent: [^ self addProperty: prefix]) at: 'ModifierName'.	finalMod := modifiers at: finalModKey.	fullPrefix := self applyModifierPrefix: (mod at: 'ApplyModifier') prefix: prefix.	modifiers removeKey: finalModKey.	self importSecondMod: finalMod prefix: fullPrefix.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 10:40' prior: 34015140!importStun: mod prefix: prefix 	self addProperty: prefix , '[Stun ' , (mod at: 'Duration') , ' seconds]'! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 10:40' prior: 34014054!importRandom: modifier prefix: prefix editing: modifiers	| mod ch |	mod := modifier at: 'Random'.	ch := mod at: 'Chance'.	self importInnerMod: (mod at: 'OnSuccess') editing: modifiers prefix: (prefix , '[' , ch , '\%]')! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 10:40' prior: 34013495!importDetailsWith: importer	| details modifiers | 	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	self importModifiers: modifiers copy.	details at: 'AbilitySpecial' ifPresent: [ :it |		self importAbilitySpecial: it ].	details at: 'SpellImmunityType' ifPresent: [ :it |		spellImmunityType := it endsWith: 'YES' ]	! !----SNAPSHOT----2018-01-29T10:41:00.409425+01:00 Pharo.image priorSource: 448954!!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/29/2018 10:44'!difficultyHP	(scripts at: 1) halt.! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/29/2018 10:44' prior: 33785237!importWith: details importer: importer	super importWith: details importer: importer.	self importExtraAbilities: importer.	level := details at: 'Level'.	mc := details at: 'MovementCapabilities'.	ms := details at: 'MovementSpeed'.	res := details at: 'MagicalResistance'.	armor := details at: 'ArmorPhysical'.	hp := details at: 'StatusHealth'.	self difficultyPatchWith: importer.! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/29/2018 10:45'!difficultyPatchWith: importer	importer difficultyHP! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/29/2018 10:45' prior: 34017754!difficultyPatchWith: importer	importer difficultyHP.	1halt.! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/29/2018 10:46' prior: 33794006!parseArrayCombination	^ self parseArrayCombinationWith: #parseStringOrInt! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/29/2018 10:48'!parseStringOrInt	^ readStream peek = $"		ifTrue: [ self parseString ]		ifFalse: [ NumberParser parse:  readStream ]! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/29/2018 10:49' prior: 34017168!difficultyHP	^ difficultyHP ifNil: [difficultyHP := (self parseCreepAbilites: 'GameRules.gem_difficulty =') first: 4]! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/29/2018 10:50'!difficultyHPSpeed	^ difficultyHPSpeed ifNil: [difficultyHPSpeed := (self parseCreepAbilites: 'GameRules.gem_difficulty_speed =') first: 4]! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/29/2018 10:50' prior: 34018622!difficultyHPSpeed	1halt.	^ difficultyHPSpeed ifNil: [difficultyHPSpeed := (self parseCreepAbilites: 'GameRules.gem_difficulty_speed =') first: 4]! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/29/2018 10:50' prior: 34017897!difficultyPatchWith: importer	importer difficultyHP.	importer difficultyHPSpeed.	1halt.! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/29/2018 10:50' prior: 34018858!difficultyHPSpeed	^ difficultyHPSpeed ifNil: [difficultyHPSpeed := (self parseCreepAbilites: 'GameRules.gem_difficulty_speed =') first: 4]! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/29/2018 10:53' prior: 34019096!difficultyPatchWith: importer	| base coef |	"HP"	coef := importer difficultyHP.	base := Integer readFrom: hp.	hp := ''.	(coef collect: [ :c | (c * base) rounded ]) do: [ :each | hp := hp , each printString , ' ~ '].	"Speed"	coef := importer difficultyHPSpeed.	base := Integer readFrom: ms.	ms := ''.	(coef collect: [ :c | (c * base) rounded ]) do: [ :each | ms := ms , each printString , ' ~ '].! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/29/2018 10:54' prior: 34019513!difficultyPatchWith: importer	| base coef |	"HP"	coef := importer difficultyHP.	base := Integer readFrom: hp.	hp := ''.	(coef collect: [ :c | (c * base) rounded ]) do: [ :each | hp := hp , each printString] separatedBy: [ hp := hp , ' ~ '].	"Speed"	coef := importer difficultyHPSpeed.	base := Integer readFrom: ms.	ms := ''.	(coef collect: [ :c | (c * base) rounded ]) do: [ :each | ms := ms , each printString] separatedBy: [ hp := hp , ' ~ '].! !----SNAPSHOT----2018-01-29T10:54:39.906874+01:00 Pharo.image priorSource: 462575!!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/29/2018 10:55' prior: 34020010!difficultyPatchWith: importer	| base coef |	1halt.	"HP"	coef := importer difficultyHP.	base := Integer readFrom: hp.	hp := ''.	(coef collect: [ :c | (c * base) rounded ]) do: [ :each | hp := hp , each printString] separatedBy: [ hp := hp , ' ~ '].	"Speed"	coef := importer difficultyHPSpeed.	base := Integer readFrom: ms.	ms := ''.	(coef collect: [ :c | (c * base) rounded ]) do: [ :each | ms := ms , each printString] separatedBy: [ hp := hp , ' ~ '].! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/29/2018 10:58' prior: 34020640!difficultyPatchWith: importer	| base coef |	1halt.	"HP"	coef := importer difficultyHP.	base := Integer readFrom: hp.	hp := ''.	(coef collect: [ :c | (c * base) rounded ]) do: [ :each | hp := hp , each printString] separatedBy: [ hp := hp , ' ~ '].	"Speed"	coef := importer difficultyHPSpeed.	base := Integer readFrom: ms.	ms := ''.	(coef collect: [ :c | (c * base) rounded ]) do: [ :each | ms := ms , each printString] separatedBy: [ ms := ms , ' ~ '].! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/29/2018 10:58' prior: 34021195!difficultyPatchWith: importer	| base coef |	"HP"	coef := importer difficultyHP.	base := Integer readFrom: hp.	hp := ''.	(coef collect: [ :c | (c * base) rounded ]) do: [ :each | hp := hp , each printString] separatedBy: [ hp := hp , ' ~ '].	"Speed"	coef := importer difficultyHPSpeed.	base := Integer readFrom: ms.	ms := ''.	(coef collect: [ :c | (c * base) rounded ]) do: [ :each | ms := ms , each printString] separatedBy: [ ms := ms , ' ~ '].! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/29/2018 10:59' prior: 33936993!exportOn: s	((name at: 'en') = 'Unavailable' or: [ (name at: 'en') = '' ]) ifTrue: [ ^ self ].	s << '+file://creeps/' << codeName << '.png|width=10+'.	s cr.	self exportNamesOn: s withAssoc: 'Lvl' -> level.	self exSplit: s.	s << '|!! HP | ' << hp.	s cr.	s << '|!! Movement | ' << ms.	mc = 'DOTA_UNIT_CAP_MOVE_FLY' ifTrue: [ s << ' (flying)' ].	s cr.	s << '|!! Armor | ' << armor. 	s cr.	s << '|!! Magic resistance | ' << res.	s cr.	self exportAbilitiesOn: s! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/29/2018 10:59' prior: 34021750!difficultyPatchWith: importer	| base coef |	"HP"	coef := importer difficultyHP.	base := Integer readFrom: hp.	hp := ''.	(coef collect: [ :c | (c * base) rounded ]) do: [ :each | hp := hp , each printString] separatedBy: [ hp := hp , ' . '].	"Speed"	coef := importer difficultyHPSpeed.	base := Integer readFrom: ms.	ms := ''.	(coef collect: [ :c | (c * base) rounded ]) do: [ :each | ms := ms , each printString] separatedBy: [ ms := ms , ' . '].! !!GemTDCreep methodsFor: 'export' stamp: 'ClementBera 1/29/2018 11:00' prior: 34022297!exportOn: s	((name at: 'en') = 'Unavailable' or: [ (name at: 'en') = '' ]) ifTrue: [ ^ self ].	s << '+file://creeps/' << codeName << '.png|width=10+'.	s cr.	self exportNamesOn: s withAssoc: 'Lvl' -> level.	self exSplit: s.	s << '|!! HP (1-4 players) | ' << hp.	s cr.	s << '|!! Movement (1-4 players) | ' << ms.	mc = 'DOTA_UNIT_CAP_MOVE_FLY' ifTrue: [ s << ' (flying)' ].	s cr.	s << '|!! Armor | ' << armor. 	s cr.	s << '|!! Magic resistance | ' << res.	s cr.	self exportAbilitiesOn: s! !----SNAPSHOT----2018-01-29T11:00:47.917648+01:00 Pharo.image priorSource: 466037!----SNAPSHOT----2018-01-29T11:00:51.727782+01:00 Pharo.image priorSource: 469476!----SNAPSHOT----2018-01-29T11:00:59.516084+01:00 Pharo.image priorSource: 469559!----QUIT----2018-01-29T11:01:18.792569+01:00 Pharo.image priorSource: 469642!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 13:35' prior: 34016591!importDetailsWith: importer	| details modifiers | 	codeName = 'tower_shechengguanghuan' ifTrue: [ 1halt ].	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	self importModifiers: modifiers copy.	details at: 'AbilitySpecial' ifPresent: [ :it |		self importAbilitySpecial: it ].	details at: 'SpellImmunityType' ifPresent: [ :it |		spellImmunityType := it endsWith: 'YES' ]	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 13:38' prior: 33970982!addProperty: prop
	prop ifEmpty: [ ^ self ].	property ifNil: [ ^ property := prop ].	property := property , ' ~ ' , prop! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 13:39' prior: 33953987!importThinkAbility: modifier prefix: prefix	| think |	1halt.	think := (modifier at: 'OnIntervalThink' ifAbsent: [^self addProperty: prefix]) at: 'Damage'.	self addProperty: (String streamContents: [:s |		s  			<< prefix			<< 'during ' << (modifier at: 'Duration') << ' seconds, every ' 			<< (modifier at: 'ThinkInterval') << ' seconds, deals ' << (think at: 'Damage')			<< ' ' << (self damageKeywordFrom: (think at: 'Type')) << ' damage.' ]).! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 13:39' prior: 33960966!importSecondMod: mod prefix: prefix	(mod includesKey: 'OnIntervalThink')		ifTrue: [  ^ self importThinkAbility: mod prefix: prefix ].	self addProperty: (String streamContents: [:s |		s << prefix.		self importProperties: mod on: s ])! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 13:39' prior: 34028048!importThinkAbility: modifier prefix: prefix	| think |	think := (modifier at: 'OnIntervalThink' ifAbsent: [^self addProperty: prefix]) at: 'Damage'.	self addProperty: (String streamContents: [:s |		s  			<< prefix			<< 'during ' << (modifier at: 'Duration') << ' seconds, every ' 			<< (modifier at: 'ThinkInterval') << ' seconds, deals ' << (think at: 'Damage')			<< ' ' << (self damageKeywordFrom: (think at: 'Type')) << ' damage.' ]).! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 13:40' prior: 34027257!importDetailsWith: importer	| details modifiers | 	codeName = 'tower_tanlan' ifTrue: [ 1halt ].	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	self importModifiers: modifiers copy.	details at: 'AbilitySpecial' ifPresent: [ :it |		self importAbilitySpecial: it ].	details at: 'SpellImmunityType' ifPresent: [ :it |		spellImmunityType := it endsWith: 'YES' ]	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 13:41' prior: 33950088!importAura: aura editing: modifiers	| auraModif prefix |	auraModif := modifiers at: (aura at: 'Aura').	modifiers removeKey: (aura at: 'Aura').	modifiers removeKey: (modifiers keyAtValue: aura).	prefix := 'Aura: Range ' , (aura at: 'Aura_Radius') , ' Effect: '.	1halt.	self importSecondMod: auraModif prefix: prefix! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 13:42' prior: 34030036!importAura: aura editing: modifiers	| auraModif prefix |	auraModif := modifiers at: (aura at: 'Aura').	modifiers removeKey: (aura at: 'Aura').	modifiers removeKey: (modifiers keyAtValue: aura).	prefix := 'Aura: Range ' , (aura at: 'Aura_Radius') , ' Effect: '.	self importSecondMod: auraModif prefix: prefix! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 13:42' prior: 34029478!importDetailsWith: importer	| details modifiers | 	codeName = 'tower_chenmoguanghuan' ifTrue: [ 1halt ].	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	self importModifiers: modifiers copy.	details at: 'AbilitySpecial' ifPresent: [ :it |		self importAbilitySpecial: it ].	details at: 'SpellImmunityType' ifPresent: [ :it |		spellImmunityType := it endsWith: 'YES' ]	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 13:43' prior: 34030868!importDetailsWith: importer	| details modifiers | 	codeName = 'tower_ranjin' ifTrue: [ 1halt ].	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	self importModifiers: modifiers copy.	details at: 'AbilitySpecial' ifPresent: [ :it |		self importAbilitySpecial: it ].	details at: 'SpellImmunityType' ifPresent: [ :it |		spellImmunityType := it endsWith: 'YES' ]	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 13:44' prior: 33968649!importOnTriggers: modifiers	#(OnAttackStart OnAttack OnAttackLanded OnAttacklanded) do: [ :key | 		modifiers copy do: [ :mod |			(mod includesKey: key) ifTrue: [ 				self importTrigger: mod editing: modifiers ] ] ]! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 13:44' prior: 33978900!importTrigger: trigger editing: modifiers	| key triggerModifier prefix|	1halt.	modifiers removeKey: (modifiers keyAtValue: trigger).	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	prefix := (self clean: key) , ', '.	(trigger includesKey: 'Properties') ifTrue: [  ^ self importSecondMod: trigger prefix: prefix].	triggerModifier :=	(trigger at: key).	self importInnerMod: triggerModifier editing: modifiers prefix: prefix! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 13:45' prior: 34032310!importTrigger: trigger editing: modifiers	| key triggerModifier prefix|	"1halt."	modifiers removeKey: (modifiers keyAtValue: trigger).	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	prefix := (self clean: key) , ', '.	(trigger includesKey: 'Properties') ifTrue: [  ^ self importSecondMod: trigger prefix: prefix].	triggerModifier :=	(trigger at: key).	self importInnerMod: triggerModifier editing: modifiers prefix: prefix! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 13:45' prior: 34032859!importTrigger: trigger editing: modifiers	| key triggerModifier prefix|	1halt.	modifiers removeKey: (modifiers keyAtValue: trigger).	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	prefix := (self clean: key) , ', '.	(trigger includesKey: 'Properties') ifTrue: [  ^ self importSecondMod: trigger prefix: prefix].	triggerModifier :=	(trigger at: key).	self importInnerMod: triggerModifier editing: modifiers prefix: prefix! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 13:49' prior: 34033410!importTrigger: trigger editing: modifiers	| key triggerModifier prefix|	1halt.	modifiers removeKey: (modifiers keyAtValue: trigger).	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	prefix := (self clean: key) , ', '.	(trigger includesKey: 'Properties') ifTrue: [  ^ self importSecondMod: trigger prefix: prefix].	triggerModifier :=	(trigger at: key).	(triggerModifier includesKey: 'FireSound') ifTrue: [ 'F' logCr ].	(triggerModifier includesKey: 'Damage') ifTrue: [ 'D' logCr ].	self importInnerMod: triggerModifier editing: modifiers prefix: prefix! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 13:49' prior: 34033959!importTrigger: trigger editing: modifiers	| key triggerModifier prefix|	modifiers removeKey: (modifiers keyAtValue: trigger).	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	prefix := (self clean: key) , ', '.	(trigger includesKey: 'Properties') ifTrue: [  ^ self importSecondMod: trigger prefix: prefix].	triggerModifier :=	(trigger at: key).	(triggerModifier includesKey: 'FireSound') ifTrue: [ 'F' logCr ].	(triggerModifier includesKey: 'Damage') ifTrue: [ 'D' logCr ].	self importInnerMod: triggerModifier editing: modifiers prefix: prefix! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 13:49' prior: 34034639!importTrigger: trigger editing: modifiers	| key triggerModifier prefix|	modifiers removeKey: (modifiers keyAtValue: trigger).	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	prefix := (self clean: key) , ', '.	(trigger includesKey: 'Properties') ifTrue: [  ^ self importSecondMod: trigger prefix: prefix].	triggerModifier :=	(trigger at: key).	(triggerModifier includesKey: 'Damage') ifTrue: [ 		^ self importDamage: triggerModifier prefix: prefix ].	self importInnerMod: triggerModifier editing: modifiers prefix: prefix! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 13:49'!importDamage: triggerModifier prefix: prefix 	1halt.! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 13:50' prior: 34035311!importTrigger: trigger editing: modifiers	| key triggerModifier prefix|	modifiers removeKey: (modifiers keyAtValue: trigger).	key := trigger keys detect: [ :each | each beginsWith: 'OnAttack' ].	prefix := (self clean: key) , ', '.	(trigger includesKey: 'Properties') ifTrue: [  ^ self importSecondMod: trigger prefix: prefix].	triggerModifier :=	(trigger at: key).	(triggerModifier includesKey: 'Damage') ifTrue: [ 		^ self importDamage: (triggerModifier at: 'Damage') prefix: prefix ].	self importInnerMod: triggerModifier editing: modifiers prefix: prefix! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 13:52' prior: 34035945!importDamage: mod prefix: prefix 	self addProperty: (String streamContents: [:s | 		s << prefix.		s << '[Radius: ' ,  ((mod at: 'Target') at: 'Radius') , ']'.		s << 'deals ' << (mod at: 'Damage')			<< ' ' << (self damageKeywordFrom: (mod at: 'Type')) << ' damage.' ])! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 13:53' prior: 34036762!importDamage: mod prefix: prefix 	self addProperty: (String streamContents: [:s | 		s << prefix.		s << '[Radius: ' <<  ((mod at: 'Target') at: 'Radius') << ']'.		s << 'deals ' << (mod at: 'Damage')			<< ' ' << (self damageKeywordFrom: (mod at: 'Type')) << ' damage.' ])! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 13:53' prior: 34031435!importDetailsWith: importer	| details modifiers | 	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	self importModifiers: modifiers copy.	details at: 'AbilitySpecial' ifPresent: [ :it |		self importAbilitySpecial: it ].	details at: 'SpellImmunityType' ifPresent: [ :it |		spellImmunityType := it endsWith: 'YES' ]	! !----SNAPSHOT----2018-01-29T13:53:47.240357+01:00 Pharo.image priorSource: 469725!!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/29/2018 13:54'!stealable	1halt.! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/29/2018 13:54'!exportStealable	importer stealable.	1halt.! !!GemTDGod methodsFor: 'public' stamp: 'ClementBera 1/29/2018 13:54' prior: 33713957!process	importer := GemTDImporter new.	importer importAll.	self generate.	self clearExport.	self exportBaseTowers.	self exportAdvancedTowers.	self exportCreeps.	self exportStealable.! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/29/2018 13:57'!parseComboPublic: rs	readStream := rs.	^ self parseCombo! !!GemTDLuaParser methodsFor: 'parsing' stamp: 'ClementBera 1/29/2018 14:00' prior: 33794340!parseComboWith: parseSelector	| ws |	ws := WriteStream on: (Array new: 5).	self skipUntilRelevant.	self assert: readStream peek = ${.	readStream next. "skip {"	readStream peek = $} ifTrue: [ readStream next. ^ #() ].	self skipSeparators.	ws nextPut: (self perform: parseSelector).	[self skipSeparators.	readStream peek = $,] whileTrue: [ 	readStream next. "skip ,"	self skipSeparators.	readStream peek = $} ifTrue: [ ", with nothing after..."		readStream next. "skip }"		^ ws contents ]. 	ws nextPut: (self perform: parseSelector) ].	self skipUntilRelevant.	self assert: readStream peek = $}.	readStream next. "skip }"	^ ws contents	! !!GemTDImporter methodsFor: 'accessing' stamp: 'ClementBera 1/29/2018 14:00' prior: 34038083!stealable	| i |	i := scripts first indexOfSubCollection: 'GameRules.stealable_ability_pool ='.	i := i + 'GameRules.stealable_ability_pool =' size.	^ GemTDLuaParser new parseComboPublic: (scripts first copyFrom: i to: i + 100000) readStream	! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/29/2018 14:02' prior: 34038173!exportStealable	| abilities s |	abilities := importer stealable collect: [ :each |		GemTDAbility newFrom: each importer: importer ].	s := WriteStream on: (String new: 10000).	s << '!! Abilities to steal'.	s cr.	abilities do: [ :ab | ab exportOn: s ].	self export: s to: 'steal'! !!GemTDGod methodsFor: 'export' stamp: 'ClementBera 1/29/2018 14:03' prior: 34039815!exportStealable	| abilities s |	abilities := importer stealable collect: [ :each |		GemTDAbility newFrom: each importer: importer ].	s := WriteStream on: (String new: 10000).	s << '!! Abilities to steal'.	s cr.	abilities withIndexDo: [ :ab :i | ab shortExportOn: s i: i ].	self export: s to: 'steal'! !!GemTDAdvancedTower methodsFor: 'export' stamp: 'ClementBera 1/29/2018 14:06' prior: 33917503!exportOn: s	self exportHeaderOn: s.	self exportNamesOn: s.	self exSplit: s.	self exportDamageOn: s.	self exSplit: s.	self exportCombo: combo names: comboNames on: s.	self exportAbilitiesOn: s.	codeName = 'gemtd_tianranzumulv' ifTrue: [ 		s << '*Spells to steal>steal.pillar*' ]! !----QUIT----2018-01-29T14:06:56.2069+01:00 Pharo.image priorSource: 483490!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 14:09' prior: 34037506!importDetailsWith: importer	| details modifiers | 	codeName = 'chain_frost' ifTrue: [ 1halt ].	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	self importModifiers: modifiers copy.	details at: 'AbilitySpecial' ifPresent: [ :it |		self importAbilitySpecial: it ].	details at: 'SpellImmunityType' ifPresent: [ :it |		spellImmunityType := it endsWith: 'YES' ]	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 14:10' prior: 33992144!importAbilitySpecial: collection	abilitySpecial := Dictionary new.	1hat.	collection values do: [ :val |		val removeKey: 'var_type' ifAbsent: [  ].		val keysAndValuesDo: [ :k :v | abilitySpecial at: k put: v ] ]	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 14:10' prior: 34044539!importAbilitySpecial: collection	abilitySpecial := Dictionary new.	1halt.	collection values do: [ :val |		val removeKey: 'var_type' ifAbsent: [  ].		val keysAndValuesDo: [ :k :v | abilitySpecial at: k put: v ] ]	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 14:11' prior: 34044855!importAbilitySpecial: collection	abilitySpecial := Dictionary new.	collection values do: [ :val |		val removeKey: 'var_type' ifAbsent: [  ].		val keysAndValuesDo: [ :k :v | abilitySpecial at: k put: v ] ].	#(vision_radius slow_attack_speed damage_scepter cast_range_scepter) do: [:k |		abilitySpecial removeKey: k ifAbsent: [  ] ].	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 14:12' prior: 34045172!importAbilitySpecial: collection	abilitySpecial := Dictionary new.	collection values do: [ :val |		val removeKey: 'var_type' ifAbsent: [  ].		val keysAndValuesDo: [ :k :v | abilitySpecial at: k put: v ] ].	#(vision_radius damage_scepter cast_range_scepter) do: [:k |		abilitySpecial removeKey: k ifAbsent: [  ] ].	! !!GemTDAbility methodsFor: 'import modif' stamp: 'ClementBera 1/29/2018 14:13' prior: 34043982!importDetailsWith: importer	| details modifiers | 	details := (importer npcs at: 'DOTAAbilities') at: codeName ifAbsent: [^ self].	modifiers := details at: 'Modifiers' ifAbsent: [ ^ self ].	self importModifiers: modifiers copy.	details at: 'AbilitySpecial' ifPresent: [ :it |		self importAbilitySpecial: it ].	details at: 'SpellImmunityType' ifPresent: [ :it |		spellImmunityType := it endsWith: 'YES' ]	! !!GemTDAbility methodsFor: 'export' stamp: 'ClementBera 1/29/2018 14:17' prior: 34002654!shortExportOn: s i: i	| num |	num := i printString.	s 		<< '|!! Ability ' << num << ' | '		<< codeName.	s cr.	(name at: 'en') ifNotNil: [ 		s 			<< '|!! Name | ' 			<< (name at: 'en').		s cr].	(tooltip at: 'en') ifNotNil: [		s 			<< '|!! Tooltip | '			<< (tooltip at: 'en').		s cr].	(property notNil and: [ property isEmpty not ]) ifTrue: [		s << '|!! Raw | =='.		s << property.		s << '=='.		s cr ].	abilitySpecial ifNotNil: [ 		| count |		count := 0.		s << '|!! Raw: Special | =='.		abilitySpecial keysAndValuesDo: [ :k :v |			count = 7 ifTrue: [ 				s << '=='.				s cr.				s << '|!! Raw: Special 2 | =='. ]			s << '[' << k << ': ' << v << ']'.			count := count + 1. 			 ].		s << '=='.		s cr ].	spellImmunityType ifNotNil: [ 		s 			<< '|!! Raw: Pierce Spell Immunity | =='			<< spellImmunityType printString 			<< '=='.		s cr  ]! !!GemTDAbility methodsFor: 'export' stamp: 'ClementBera 1/29/2018 14:18' prior: 34046536!shortExportOn: s i: i	| num |	num := i printString.	s 		<< '|!! Ability ' << num << ' | '		<< codeName.	s cr.	(name at: 'en') ifNotNil: [ 		s 			<< '|!! Name | ' 			<< (name at: 'en').		s cr].	(tooltip at: 'en') ifNotNil: [		s 			<< '|!! Tooltip | '			<< (tooltip at: 'en').		s cr].	(property notNil and: [ property isEmpty not ]) ifTrue: [		s << '|!! Raw | =='.		s << property.		s << '=='.		s cr ].	abilitySpecial ifNotNil: [ 		| count |		count := 0.		s << '|!! Raw: Special | =='.		abilitySpecial keysAndValuesDo: [ :k :v |			count = 7 ifTrue: [ 				s << '=='.				s cr.				s << '|!! Raw: Special 2 | =='. ].			s << '[' << k << ': ' << v << ']'.			count := count + 1. 			 ].		s << '=='.		s cr ].	spellImmunityType ifNotNil: [ 		s 			<< '|!! Raw: Pierce Spell Immunity | =='			<< spellImmunityType printString 			<< '=='.		s cr  ]! !!GemTDAbility methodsFor: 'export' stamp: 'ClementBera 1/29/2018 14:18' prior: 34047500!shortExportOn: s i: i	| num |	num := i printString.	s 		<< '|!! Ability ' << num << ' | '		<< codeName.	s cr.	(name at: 'en') ifNotNil: [ 		s 			<< '|!! Name | ' 			<< (name at: 'en').		s cr].	(tooltip at: 'en') ifNotNil: [		s 			<< '|!! Tooltip | '			<< (tooltip at: 'en').		s cr].	(property notNil and: [ property isEmpty not ]) ifTrue: [		s << '|!! Raw | =='.		s << property.		s << '=='.		s cr ].	abilitySpecial ifNotNil: [ 		| count |		count := 0.		s << '|!! Raw: Special | =='.		abilitySpecial keysAndValuesDo: [ :k :v |			count = 7 ifTrue: [ 				s << '=='.				s cr.				s << '|!! Raw: Special 2 | =='. ].			s << '[' << k << ': ' << v << ']'.			count := count + 1. ].		s << '=='.		s cr ].	spellImmunityType ifNotNil: [ 		s 			<< '|!! Raw: Pierce Spell Immunity | =='			<< spellImmunityType printString 			<< '=='.		s cr  ]! !----QUIT----2018-01-29T14:18:55.100871+01:00 Pharo.image priorSource: 486452!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDAbility methodsFor: 'export' stamp: 'ClementBera 1/29/2018 14:19' prior: 34048465!shortExportOn: s i: i	| num |	num := i printString.	s 		<< '|!! Ability ' << num << ' | '		<< codeName.	s cr.	(name at: 'en') ifNotNil: [ 		s 			<< '|!! Name | ' 			<< (name at: 'en').		s cr].	(tooltip at: 'en') ifNotNil: [		s 			<< '|!! Tooltip | '			<< (tooltip at: 'en').		s cr].	(property notNil and: [ property isEmpty not ]) ifTrue: [		s << '|!! Raw | =='.		s << property.		s << '=='.		s cr ].	abilitySpecial ifNotNil: [ 		| count |		count := 0.		s << '|!! Raw: Special | =='.		abilitySpecial keysAndValuesDo: [ :k :v |			count = 6 ifTrue: [ 				s << '=='.				s cr.				s << '|!! Raw: Special 2 | =='. ].			s << '[' << k << ': ' << v << ']'.			count := count + 1. ].		s << '=='.		s cr ].	spellImmunityType ifNotNil: [ 		s 			<< '|!! Raw: Pierce Spell Immunity | =='			<< spellImmunityType printString 			<< '=='.		s cr  ]! !----SNAPSHOT----2018-01-29T14:19:49.319428+01:00 Pharo.image priorSource: 494903!----QUIT----2018-01-29T14:19:52.816701+01:00 Pharo.image priorSource: 498867!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!----QUIT/NOSAVE----2018-01-29T14:20:07.140174+01:00 Pharo.image priorSource: 498950!| evalBlock pwd |

pwd := '13V',(Character value: 33) asString,'@7h4n5'.

evalBlock := [:block :debugInfo |
	block 
		on: Exception 
		do: [ :ex | FileStream stdout 
			<< debugInfo;
			<< ' could not be changed : ';
			<< ex class name;
			<< ' ';
			<< ex messageText;
			cr ] ].

evalBlock value: [SystemVersion current major >= 7		ifTrue: [PharoLightTheme beCurrent]		ifFalse: [Pharo3Theme beCurrent]] value: 'White theme'.

evalBlock value: [Author fullName: 'ClementBera'] value: 'Author'.

evalBlock 
	value: [Nautilus inlineCritiques: true.
			QASettings nautilusPlugin: false] 
	value: 'Nautilus'.
	
"evalBlock 
	value: [ | w |
	w := Workspace openLabel: 'FF-Helper'.
	
	w contents: '
| target repo fork fileTreeRepository repositoryGroup |
target := ''/Users/clementbera/pharo'' asFileReference.
repo := IceRepositoryCreator new location: target; subdirectory:''src''; createRepository.
repo register.

fork := repo remotes detect: [:remote|remote remoteName = #clementbera].
repo pushRemote: fork; pullRemote: repo origin.

repo checkoutBranch: ''development''.	
repo backend pullFrom: repo origin.
repo push; checkoutBranch: SystemVersion current commitHash.

fileTreeRepository := (MCFileTreeRepository new directory: target / #src; yourself).
repositoryGroup := MCRepositoryGroup withRepositories: {fileTreeRepository. MCCacheRepository uniqueInstance}.
MCWorkingCopy allManagers
	select: [:wc|(wc repositoryGroup repositories reject: [:repo|repo isCache]) isEmpty]
	thenDo: [:wc|wc repositoryGroup: repositoryGroup].
	
#(FT2Handle FreeTypeCache FreeTypeSettings) do: [ :each | 
	SessionManager default unregisterClassNamed: each ].'.
	w containingWindow position: 20@20.
	w containingWindow width: 900.
	w containingWindow height: 600.
	w containingWindow collapseOrExpand] 
	value: 'No freetype'."

evalBlock 
	value: [
		{'http://source.squeak.org/VMMaker' . 
		 'http://smalltalkhub.com/mc/ClementBera/Scorch/main/' .
		 'http://ss3.gemtalksystems.com/ss/MethodMassage' .
		 'http://www.hpi.uni-potsdam.de/hirschfeld/squeaksource/BenchmarkRunner' } do: [:each |
			MCRepositoryGroup default addRepository: (MCHttpRepository 
				location: each
				user: Author fullName 
				password: pwd)]]
	value: 'adding common repos'.
	
evalBlock
	value: [IceCredentialsProvider useCustomSsh: true.
			IceCredentialsProvider sshCredentials
					username: 'git';
					publicKey: '/Users/clementbera/.ssh/id_rsa.pub';
					privateKey: '/Users/clementbera/.ssh/id_rsa';
					keyPassphrase: pwd.
			IceCredentialsProvider
					plaintextCredentials: (IcePlaintextCredentials new 
						username: 'clementbera'; 
						password: pwd).]
	value: 'SSH settings for Iceberg'.
	
"evalBlock 
	value: [(SystemWindow allSubInstances select: [:w | 
				w model isKindOf: GTGenericStackDebugger])
					do: [:w | (w model title beginsWith: 'FT2Error: ') ifTrue: [w delete]]]
	value: 'Close Freetype debugger'"
!----End fileIn----!!GemTDAdvancedTower methodsFor: 'export' stamp: 'ClementBera 1/29/2018 14:22' prior: 34040595!exportOn: s	self exportHeaderOn: s.	self exportNamesOn: s.	self exSplit: s.	self exportDamageOn: s.	self exSplit: s.	self exportCombo: combo names: comboNames on: s.	self exportAbilitiesOn: s.	codeName = 'gemtd_tianranzumulv' ifTrue: [ 		s << '*Spells to steal>steal.pillar*'.		s cr. ]! !----SNAPSHOT----2018-01-29T14:22:16.174227+01:00 Pharo.image priorSource: 498950!----QUIT----2018-01-29T14:22:23.432069+01:00 Pharo.image priorSource: 505359!