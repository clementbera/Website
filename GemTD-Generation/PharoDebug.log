THERE_BE_DRAGONS_HERE
FileDoesNotExist: File @ /Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-Generation/resource/addon_english
26 January 2018 11:33:10.885733 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

FileHandle>>streamError
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-...etc...
		writable: 	false
		id: 	nil


FileHandle>>readStream
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-...etc...
		writable: 	false
		id: 	nil


FileSystem>>readStreamOn:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path * 'resource' / 'addon_english'
	Receiver's instance variables: 
		store: 	a MacStore


FileReference>>readStream
	Receiver: File @ resource/addon_english
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path * 'resource' / 'addon_english'


[ :id | GemTDParser new parse: ('resource/' , id) asFileReference readStream ] in GemTDImporter>>importResources
	Receiver: a GemTDImporter
	Arguments and temporary variables: 
		id: 	#addon_english
	Receiver's instance variables: 
a GemTDImporter

Array(SequenceableCollection)>>collect:
	Receiver: #(#addon_english #'.' #txt #addon_schinese #'.' #txt #addon_tchinese #'.' #txt)
	Arguments and temporary variables: 
		aBlock: 	[ :id | GemTDParser new parse: ('resource/' , id) asFileReference readS...etc...
		newCollection: 	#(nil nil nil nil nil nil nil nil nil)
		index: 	1
	Receiver's instance variables: 
#(#addon_english #'.' #txt #addon_schinese #'.' #txt #addon_tchinese #'.' #txt)

GemTDImporter>>importResources
	Receiver: a GemTDImporter
	Arguments and temporary variables: 

	Receiver's instance variables: 
a GemTDImporter

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDImporter new importResources
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(50576384)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result inspect ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(50576384)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(87157248)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(50576384)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(708040704)
		submorphs: 	an Array(a RubCursor(740452352) a RubPrimarySelectionMorph(118704640...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (57113088) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(836983296)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(740452352)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1051985920))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(87157248)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(466592768))(a DropList...etc...
		lastStepTime: 	1117777
		lastStepMessage: 	nil
		lastCycleTime: 	1117798
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	1117777
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1016@675)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(763785728) a Na...etc...
		fullBounds: 	(0@0) corner: (1016@675)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(466592768))(a DropList...etc...
		lastStepTime: 	1117777
		lastStepMessage: 	nil
		lastCycleTime: 	1117798
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	1117777
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(466592768))(a DropList...etc...
		lastStepTime: 	1117777
		lastStepMessage: 	nil
		lastCycleTime: 	1117798
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	1117777
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1016@675)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(763785728) a Na...etc...
		fullBounds: 	(0@0) corner: (1016@675)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
FileHandle>>streamError
FileHandle>>readStream
FileSystem>>readStreamOn:
FileReference>>readStream
[ :id | GemTDParser new parse: ('resource/' , id) asFileReference readStream ] in GemTDImporter>>importResources
Array(SequenceableCollection)>>collect:
GemTDImporter>>importResources
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FileDoesNotExist: File @ /Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-Generation/resource/addon_english
26 January 2018 11:33:33.269839 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

FileHandle>>streamError
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-...etc...
		writable: 	false
		id: 	nil


FileHandle>>readStream
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-...etc...
		writable: 	false
		id: 	nil


FileSystem>>readStreamOn:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path * 'resource' / 'addon_english'
	Receiver's instance variables: 
		store: 	a MacStore


FileReference>>readStream
	Receiver: File @ resource/addon_english
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path * 'resource' / 'addon_english'


[ :id | GemTDParser new parse: ('resource/' , id) asFileReference readStream ] in GemTDImporter>>importResources
	Receiver: a GemTDImporter
	Arguments and temporary variables: 
		id: 	#addon_english
	Receiver's instance variables: 
a GemTDImporter

Array(SequenceableCollection)>>collect:
	Receiver: #(#addon_english #'.' #txt #addon_schinese #'.' #txt #addon_tchinese #'.' #txt)
	Arguments and temporary variables: 
		aBlock: 	[ :id | GemTDParser new parse: ('resource/' , id) asFileReference readS...etc...
		newCollection: 	#(nil nil nil nil nil nil nil nil nil)
		index: 	1
	Receiver's instance variables: 
#(#addon_english #'.' #txt #addon_schinese #'.' #txt #addon_tchinese #'.' #txt)

GemTDImporter>>importResources
	Receiver: a GemTDImporter
	Arguments and temporary variables: 

	Receiver's instance variables: 
a GemTDImporter

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDImporter new importResources
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(50576384)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result inspect ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(50576384)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(87157248)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(50576384)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(708040704)
		submorphs: 	an Array(a RubCursor(740452352) a RubPrimarySelectionMorph(118704640...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (57113088) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(836983296)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(740452352)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(535652864))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(457.0@149.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(87157248)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(763785728))(a GLMSys...etc...
		lastStepTime: 	1140163
		lastStepMessage: 	nil
		lastCycleTime: 	1140186
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	1140163
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1016@675)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(763785728) a Na...etc...
		fullBounds: 	(0@0) corner: (1016@675)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(763785728))(a GLMSys...etc...
		lastStepTime: 	1140163
		lastStepMessage: 	nil
		lastCycleTime: 	1140186
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	1140163
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(763785728))(a GLMSys...etc...
		lastStepTime: 	1140163
		lastStepMessage: 	nil
		lastCycleTime: 	1140186
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	1140163
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1016@675)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(763785728) a Na...etc...
		fullBounds: 	(0@0) corner: (1016@675)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
FileHandle>>streamError
FileHandle>>readStream
FileSystem>>readStreamOn:
FileReference>>readStream
[ :id | GemTDParser new parse: ('resource/' , id) asFileReference readStream ] in GemTDImporter>>importResources
Array(SequenceableCollection)>>collect:
GemTDImporter>>importResources
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
UTF8InvalidText: Invalid utf8 input detected
26 January 2018 11:34:09.088256 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

UTF8TextConverter>>errorMalformedInput
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


UTF8TextConverter>>nextFromStream:
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ec...etc...
		character1: 	$ÿ
		value1: 	255
		character2: 	$þ
		value2: 	254
		unicode: 	nil
		character3: 	$"
		value3: 	34
		character4: 	nil
		value4: 	nil
	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


MultiByteFileStream>>next
	Receiver: MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-Generat...etc...
	Arguments and temporary variables: 
		char: 	nil
		secondChar: 	nil
		state: 	nil
	Receiver's instance variables: 



MultiByteFileStream>>peek
	Receiver: MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-Generat...etc...
	Arguments and temporary variables: 
		next: 	nil
		save: 	0
	Receiver's instance variables: 



GemTDParser>>skipSeparators
	Receiver: a GemTDParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		readStream: 	MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite...etc...


GemTDParser>>parse:
	Receiver: a GemTDParser
	Arguments and temporary variables: 
		rs: 	MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ecstati...etc...
	Receiver's instance variables: 
		readStream: 	MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite...etc...


[ :id | GemTDParser new parse: ('resource/' , id) asFileReference readStream ] in GemTDImporter>>importResources
	Receiver: a GemTDImporter
	Arguments and temporary variables: 
		id: 	'addon_english.txt'
	Receiver's instance variables: 
a GemTDImporter

Array(SequenceableCollection)>>collect:
	Receiver: #('addon_english.txt' 'addon_schinese.txt' 'addon_tchinese.txt')
	Arguments and temporary variables: 
		aBlock: 	[ :id | GemTDParser new parse: ('resource/' , id) asFileReference readS...etc...
		newCollection: 	#(nil nil nil)
		index: 	1
	Receiver's instance variables: 
#('addon_english.txt' 'addon_schinese.txt' 'addon_tchinese.txt')

GemTDImporter>>importResources
	Receiver: a GemTDImporter
	Arguments and temporary variables: 

	Receiver's instance variables: 
a GemTDImporter

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDImporter new importResources
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(50576384)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result inspect ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(50576384)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(87157248)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(50576384)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(708040704)
		submorphs: 	an Array(a RubCursor(740452352) a RubPrimarySelectionMorph(118704640...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (57113088) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(836983296)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(740452352)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(785933312))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(433.0@44.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(87157248)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1055894528))(a SearchMor...etc...
		lastStepTime: 	1175982
		lastStepMessage: 	nil
		lastCycleTime: 	1176003
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	1175982
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1016@675)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(763785728) a Na...etc...
		fullBounds: 	(0@0) corner: (1016@675)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1055894528))(a SearchMor...etc...
		lastStepTime: 	1175982
		lastStepMessage: 	nil
		lastCycleTime: 	1176003
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	1175982
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1055894528))(a SearchMor...etc...
		lastStepTime: 	1175982
		lastStepMessage: 	nil
		lastCycleTime: 	1176003
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	1175982
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1016@675)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(763785728) a Na...etc...
		fullBounds: 	(0@0) corner: (1016@675)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UTF8TextConverter>>errorMalformedInput
UTF8TextConverter>>nextFromStream:
MultiByteFileStream>>next
MultiByteFileStream>>peek
GemTDParser>>skipSeparators
GemTDParser>>parse:
[ :id | GemTDParser new parse: ('resource/' , id) asFileReference readStream ] in GemTDImporter>>importResources
Array(SequenceableCollection)>>collect:
GemTDImporter>>importResources
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
UTF8InvalidText: Invalid utf8 input detected
26 January 2018 11:34:53.738194 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

UTF8TextConverter>>errorMalformedInput
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


UTF8TextConverter>>nextFromStream:
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ec...etc...
		character1: 	$ÿ
		value1: 	255
		character2: 	$þ
		value2: 	254
		unicode: 	nil
		character3: 	$"
		value3: 	34
		character4: 	nil
		value4: 	nil
	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


MultiByteFileStream>>next
	Receiver: MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-Generat...etc...
	Arguments and temporary variables: 
		char: 	nil
		secondChar: 	nil
		state: 	nil
	Receiver's instance variables: 



MultiByteFileStream>>next:
	Receiver: MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-Generat...etc...
	Arguments and temporary variables: 
		anInteger: 	200718
		multiString: 	'                                                                 ...etc...
		index: 	1
		character: 	nil
	Receiver's instance variables: 



MultiByteFileStream(FileStream)>>contents
	Receiver: MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-Generat...etc...
	Arguments and temporary variables: 
		s: 	nil
		savePos: 	0
	Receiver's instance variables: 



UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'(''resource/'' , ''addon_english.txt'' ) asFileReference readS...etc...
		itsSelection: 	a Text for '(''resource/'' , ''addon_english.txt'' ) asFileRefere...etc...
		itsSelectionString: 	'(''resource/'' , ''addon_english.txt'' ) asFileReference r...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	^ ('resource/' , 'addon_english.txt') asFileReference readStream
		c...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(50576384)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result inspect ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(50576384)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(87157248)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(50576384)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@88)
		owner: 	a TransformWithLayoutMorph(708040704)
		submorphs: 	an Array(a RubCursor(740452352) a RubPrimarySelectionMorph(118704640...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (57113088) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(836983296)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(740452352)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(851923968))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(87157248)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1055894528))(a SearchMor...etc...
		lastStepTime: 	1220637
		lastStepMessage: 	nil
		lastCycleTime: 	1220658
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	1220637
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1016@675)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(763785728) a Na...etc...
		fullBounds: 	(0@0) corner: (1016@675)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1055894528))(a SearchMor...etc...
		lastStepTime: 	1220637
		lastStepMessage: 	nil
		lastCycleTime: 	1220658
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	1220637
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1055894528))(a SearchMor...etc...
		lastStepTime: 	1220637
		lastStepMessage: 	nil
		lastCycleTime: 	1220658
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	1220637
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1016@675)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(763785728) a Na...etc...
		fullBounds: 	(0@0) corner: (1016@675)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UTF8TextConverter>>errorMalformedInput
UTF8TextConverter>>nextFromStream:
MultiByteFileStream>>next
MultiByteFileStream>>next:
MultiByteFileStream(FileStream)>>contents
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
UTF8InvalidText: Invalid utf8 input detected
26 January 2018 11:35:41.170673 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

UTF8TextConverter>>errorMalformedInput
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


UTF8TextConverter>>nextFromStream:
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ec...etc...
		character1: 	$ÿ
		value1: 	255
		character2: 	$þ
		value2: 	254
		unicode: 	nil
		character3: 	$"
		value3: 	34
		character4: 	nil
		value4: 	nil
	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


MultiByteFileStream>>next
	Receiver: MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-Generat...etc...
	Arguments and temporary variables: 
		char: 	nil
		secondChar: 	nil
		state: 	nil
	Receiver's instance variables: 



MultiByteFileStream>>next:
	Receiver: MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-Generat...etc...
	Arguments and temporary variables: 
		anInteger: 	200718
		multiString: 	'                                                                 ...etc...
		index: 	1
		character: 	nil
	Receiver's instance variables: 



MultiByteFileStream(FileStream)>>contents
	Receiver: MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-Generat...etc...
	Arguments and temporary variables: 
		s: 	nil
		savePos: 	0
	Receiver's instance variables: 



UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	' (''resource/'' , ''addon_english.txt'' ) asFileReference read...etc...
		itsSelection: 	a Text for ' (''resource/'' , ''addon_english.txt'' ) asFileRefer...etc...
		itsSelectionString: 	' (''resource/'' , ''addon_english.txt'' ) asFileReference ...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	^ ('resource/' , 'addon_english.txt') asFileReference readStream
		c...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(50576384)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result inspect ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(50576384)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(87157248)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(50576384)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@88)
		owner: 	a TransformWithLayoutMorph(708040704)
		submorphs: 	an Array(a RubCursor(740452352) a RubPrimarySelectionMorph(118704640...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (57113088) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(836983296)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(740452352)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(711050240))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(87157248)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1055894528))(a SearchMor...etc...
		lastStepTime: 	1268067
		lastStepMessage: 	nil
		lastCycleTime: 	1268091
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	1268067
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1016@675)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(763785728) a Na...etc...
		fullBounds: 	(0@0) corner: (1016@675)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1055894528))(a SearchMor...etc...
		lastStepTime: 	1268067
		lastStepMessage: 	nil
		lastCycleTime: 	1268091
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	1268067
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1055894528))(a SearchMor...etc...
		lastStepTime: 	1268067
		lastStepMessage: 	nil
		lastCycleTime: 	1268091
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	1268067
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1016@675)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(763785728) a Na...etc...
		fullBounds: 	(0@0) corner: (1016@675)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UTF8TextConverter>>errorMalformedInput
UTF8TextConverter>>nextFromStream:
MultiByteFileStream>>next
MultiByteFileStream>>next:
MultiByteFileStream(FileStream)>>contents
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
UTF8InvalidText: Invalid utf8 input detected
26 January 2018 11:36:12.675352 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

UTF8TextConverter>>errorMalformedInput
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


UTF8TextConverter>>nextFromStream:
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ec...etc...
		character1: 	$ÿ
		value1: 	255
		character2: 	$þ
		value2: 	254
		unicode: 	nil
		character3: 	$"
		value3: 	34
		character4: 	nil
		value4: 	nil
	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


MultiByteFileStream>>next
	Receiver: MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-Generat...etc...
	Arguments and temporary variables: 
		char: 	nil
		secondChar: 	nil
		state: 	nil
	Receiver's instance variables: 



MultiByteFileStream>>next:
	Receiver: MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-Generat...etc...
	Arguments and temporary variables: 
		anInteger: 	200718
		multiString: 	'                                                                 ...etc...
		index: 	1
		character: 	nil
	Receiver's instance variables: 



MultiByteFileStream(FileStream)>>contents
	Receiver: MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-Generat...etc...
	Arguments and temporary variables: 
		s: 	nil
		savePos: 	0
	Receiver's instance variables: 



[ :stream | ^ stream contents ] in FileReference(AbstractFileReference)>>contents
	Receiver: File @ resource/addon_english.txt
	Arguments and temporary variables: 
		stream: 	MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ecs...etc...
	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path * 'resource' / 'addon_english.txt'


[ aBlock value: stream ] in FileReference(AbstractFileReference)>>readStreamDo:
	Receiver: File @ resource/addon_english.txt
	Arguments and temporary variables: 
		aBlock: 	[ :stream | ^ stream contents ]
		stream: 	MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ecs...etc...
	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path * 'resource' / 'addon_english.txt'


BlockClosure>>ensure:
	Receiver: [ aBlock value: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ stream close ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	FileReference(AbstractFileReference)>>readStreamDo:
		startpc: 	58
		numArgs: 	0


FileReference(AbstractFileReference)>>readStreamDo:
	Receiver: File @ resource/addon_english.txt
	Arguments and temporary variables: 
		aBlock: 	[ :stream | ^ stream contents ]
		stream: 	MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ecs...etc...
	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path * 'resource' / 'addon_english.txt'


FileReference(AbstractFileReference)>>contents
	Receiver: File @ resource/addon_english.txt
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path * 'resource' / 'addon_english.txt'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'(''resource/'' , ''addon_english.txt'' ) asFileReference conte...etc...
		itsSelection: 	a Text for '(''resource/'' , ''addon_english.txt'' ) asFileRefere...etc...
		itsSelectionString: 	'(''resource/'' , ''addon_english.txt'' ) asFileReference c...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	^ ('resource/' , 'addon_english.txt') asFileReference contents
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(50576384)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result inspect ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(50576384)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(87157248)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(50576384)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@88)
		owner: 	a TransformWithLayoutMorph(708040704)
		submorphs: 	an Array(a RubCursor(740452352) a RubPrimarySelectionMorph(118704640...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (57113088) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(836983296)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(740452352)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(656445440))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(87157248)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(466592768))(a DropList...etc...
		lastStepTime: 	1299568
		lastStepMessage: 	nil
		lastCycleTime: 	1299590
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	1299568
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1016@675)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(763785728) a Na...etc...
		fullBounds: 	(0@0) corner: (1016@675)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(466592768))(a DropList...etc...
		lastStepTime: 	1299568
		lastStepMessage: 	nil
		lastCycleTime: 	1299590
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	1299568
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(466592768))(a DropList...etc...
		lastStepTime: 	1299568
		lastStepMessage: 	nil
		lastCycleTime: 	1299590
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	1299568
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1016@675)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(763785728) a Na...etc...
		fullBounds: 	(0@0) corner: (1016@675)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UTF8TextConverter>>errorMalformedInput
UTF8TextConverter>>nextFromStream:
MultiByteFileStream>>next
MultiByteFileStream>>next:
MultiByteFileStream(FileStream)>>contents
[ :stream | ^ stream contents ] in FileReference(AbstractFileReference)>>contents
[ aBlock value: stream ] in FileReference(AbstractFileReference)>>readStreamDo:
BlockClosure>>ensure:
FileReference(AbstractFileReference)>>readStreamDo:
FileReference(AbstractFileReference)>>contents
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
UTF8InvalidText: Invalid utf8 input detected
26 January 2018 11:38:24.920172 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

UTF8TextConverter>>errorMalformedInput
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


UTF8TextConverter>>nextFromStream:
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ec...etc...
		character1: 	$ÿ
		value1: 	255
		character2: 	$þ
		value2: 	254
		unicode: 	nil
		character3: 	$"
		value3: 	34
		character4: 	nil
		value4: 	nil
	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


MultiByteFileStream>>next
	Receiver: MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-Generat...etc...
	Arguments and temporary variables: 
		char: 	nil
		secondChar: 	nil
		state: 	nil
	Receiver's instance variables: 



MultiByteFileStream>>DoIt
	Receiver: MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-Generat...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 



OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ self next
		source: 	a ReadStream
		context: 	nil
		receiver: 	MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/e...etc...
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ecsta...etc...
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(254138880)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(254138880)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(930711040)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	1431827
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	1431844
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	1431827
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	1431844
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(987696640)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1055894528))(a SearchMor...etc...
		lastStepTime: 	1431823
		lastStepMessage: 	nil
		lastCycleTime: 	1431844
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(987696640)))
		lastAlarmTime: 	1431823
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		now: 	1431844
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1055894528))(a SearchMor...etc...
		lastStepTime: 	1431823
		lastStepMessage: 	nil
		lastCycleTime: 	1431844
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(987696640)))
		lastAlarmTime: 	1431823
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1055894528))(a SearchMor...etc...
		lastStepTime: 	1431823
		lastStepMessage: 	nil
		lastCycleTime: 	1431844
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(987696640)))
		lastAlarmTime: 	1431823
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1016@675)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(743790592) a GL...etc...
		fullBounds: 	(0@0) corner: (1016@675)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1055894528))(a SearchMor...etc...
		lastStepTime: 	1431823
		lastStepMessage: 	nil
		lastCycleTime: 	1431844
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(987696640)))
		lastAlarmTime: 	1431823
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1055894528))(a SearchMor...etc...
		lastStepTime: 	1431823
		lastStepMessage: 	nil
		lastCycleTime: 	1431844
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(987696640)))
		lastAlarmTime: 	1431823
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1016@675)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(743790592) a GL...etc...
		fullBounds: 	(0@0) corner: (1016@675)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UTF8TextConverter>>errorMalformedInput
UTF8TextConverter>>nextFromStream:
MultiByteFileStream>>next
MultiByteFileStream>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
UTF8InvalidText: Invalid utf8 input detected
26 January 2018 11:39:03.236167 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

UTF8TextConverter>>errorMalformedInput
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


UTF8TextConverter>>nextFromStream:
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ec...etc...
		character1: 	$ÿ
		value1: 	255
		character2: 	$þ
		value2: 	254
		unicode: 	nil
		character3: 	$"
		value3: 	34
		character4: 	nil
		value4: 	nil
	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


MultiByteFileStream>>next
	Receiver: MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-Generat...etc...
	Arguments and temporary variables: 
		char: 	nil
		secondChar: 	nil
		state: 	nil
	Receiver's instance variables: 



UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'rs := (''resource/'' , ''addon_english.txt'' ) asFileReference...etc...
		itsSelection: 	a Text for 'rs := (''resource/'' , ''addon_english.txt'' ) asFile...etc...
		itsSelectionString: 	'rs := (''resource/'' , ''addon_english.txt'' ) asFileRefer...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	rs := ('resource/' , 'addon_english.txt') asFileReference readStream...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(50576384)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result inspect ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(50576384)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(87157248)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(50576384)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@145)
		owner: 	a TransformWithLayoutMorph(708040704)
		submorphs: 	an Array(a RubCursor(740452352) a RubPrimarySelectionMorph(118704640...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (57113088) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(836983296)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(740452352)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(40636416))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(87157248)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(466592768))(a DropList...etc...
		lastStepTime: 	1470134
		lastStepMessage: 	nil
		lastCycleTime: 	1470157
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	1470134
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1016@675)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(763785728) a Na...etc...
		fullBounds: 	(0@0) corner: (1016@675)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(466592768))(a DropList...etc...
		lastStepTime: 	1470134
		lastStepMessage: 	nil
		lastCycleTime: 	1470157
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	1470134
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(466592768))(a DropList...etc...
		lastStepTime: 	1470134
		lastStepMessage: 	nil
		lastCycleTime: 	1470157
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	1470134
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1016@675)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(763785728) a Na...etc...
		fullBounds: 	(0@0) corner: (1016@675)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UTF8TextConverter>>errorMalformedInput
UTF8TextConverter>>nextFromStream:
MultiByteFileStream>>next
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
UTF8InvalidText: Invalid utf8 input detected
26 January 2018 11:39:10.829337 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

UTF8TextConverter>>errorMalformedInput
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


UTF8TextConverter>>nextFromStream:
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ec...etc...
		character1: 	$ÿ
		value1: 	255
		character2: 	$þ
		value2: 	254
		unicode: 	nil
		character3: 	$"
		value3: 	34
		character4: 	nil
		value4: 	nil
	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


MultiByteFileStream>>next
	Receiver: MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-Generat...etc...
	Arguments and temporary variables: 
		char: 	nil
		secondChar: 	nil
		state: 	nil
	Receiver's instance variables: 



UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'rs := (''resource/'' , ''addon_english.txt'' ) asFileReference...etc...
		itsSelection: 	a Text for 'rs := (''resource/'' , ''addon_english.txt'' ) asFile...etc...
		itsSelectionString: 	'rs := (''resource/'' , ''addon_english.txt'' ) asFileRefer...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	rs := ('resource/' , 'addon_english.txt') asFileReference readStream...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(50576384)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result inspect ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(50576384)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(87157248)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(50576384)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@145)
		owner: 	a TransformWithLayoutMorph(708040704)
		submorphs: 	an Array(a RubCursor(740452352) a RubPrimarySelectionMorph(118704640...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (57113088) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(836983296)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(740452352)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(580711424))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(98.0@113.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(87157248)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(763785728))(a GLMSys...etc...
		lastStepTime: 	1477727
		lastStepMessage: 	nil
		lastCycleTime: 	1477750
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	1477727
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1016@675)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(763785728) a Na...etc...
		fullBounds: 	(0@0) corner: (1016@675)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(763785728))(a GLMSys...etc...
		lastStepTime: 	1477727
		lastStepMessage: 	nil
		lastCycleTime: 	1477750
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	1477727
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(763785728))(a GLMSys...etc...
		lastStepTime: 	1477727
		lastStepMessage: 	nil
		lastCycleTime: 	1477750
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	1477727
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1016@675)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(763785728) a Na...etc...
		fullBounds: 	(0@0) corner: (1016@675)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UTF8TextConverter>>errorMalformedInput
UTF8TextConverter>>nextFromStream:
MultiByteFileStream>>next
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
UTF8InvalidText: Invalid utf8 input detected
26 January 2018 11:40:09.424825 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

UTF8TextConverter>>errorMalformedInput
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


UTF8TextConverter>>nextFromStream:
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ec...etc...
		character1: 	$ÿ
		value1: 	255
		character2: 	$þ
		value2: 	254
		unicode: 	nil
		character3: 	$"
		value3: 	34
		character4: 	nil
		value4: 	nil
	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


MultiByteFileStream>>next
	Receiver: MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-Generat...etc...
	Arguments and temporary variables: 
		char: 	nil
		secondChar: 	nil
		state: 	nil
	Receiver's instance variables: 



UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'rs := (''resource/'' , ''addon_english.txt'' ) asFileReference...etc...
		itsSelection: 	a Text for 'rs := (''resource/'' , ''addon_english.txt'' ) asFile...etc...
		itsSelectionString: 	'rs := (''resource/'' , ''addon_english.txt'' ) asFileRefer...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	rs := ('resource/' , 'addon_english.txt') asFileReference readStream...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(50576384)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(50576384)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(87157248)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(50576384)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@145)
		owner: 	a TransformWithLayoutMorph(708040704)
		submorphs: 	an Array(a RubCursor(740452352) a RubPrimarySelectionMorph(118704640...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (57113088) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(836983296)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(740452352)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(973410816))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(87157248)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(466592768))(a DropList...etc...
		lastStepTime: 	1536320
		lastStepMessage: 	nil
		lastCycleTime: 	1536342
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	1536320
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1016@675)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(763785728) a Na...etc...
		fullBounds: 	(0@0) corner: (1016@675)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(466592768))(a DropList...etc...
		lastStepTime: 	1536320
		lastStepMessage: 	nil
		lastCycleTime: 	1536342
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	1536320
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(466592768))(a DropList...etc...
		lastStepTime: 	1536320
		lastStepMessage: 	nil
		lastCycleTime: 	1536342
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	1536320
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1016@675)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(763785728) a Na...etc...
		fullBounds: 	(0@0) corner: (1016@675)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UTF8TextConverter>>errorMalformedInput
UTF8TextConverter>>nextFromStream:
MultiByteFileStream>>next
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of FileReference did not understand #self
26 January 2018 12:00:16.878882 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

FileReference(Object)>>doesNotUnderstand: #self
	Receiver: File @ resource/addon_english.txt
	Arguments and temporary variables: 
		aMessage: 	self
		exception: 	MessageNotUnderstood: FileReference>>self
		resumeValue: 	nil
	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path * 'resource' / 'addon_english.txt'


FileReference>>DoIt
	Receiver: File @ resource/addon_english.txt
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path * 'resource' / 'addon_english.txt'


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'"File @ resource/addon_english.txt"
self
	self readStreamDo: [...etc...
		itsSelection: 	a Text for '"File @ resource/addon_english.txt"
self
	self readSt...etc...
		itsSelectionString: 	'"File @ resource/addon_english.txt"
self
	self readStreamD...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	^ self self readStreamDo: [ :stream | ^ stream next: 100 ]	DoIt
	^ s...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	File @ resource/addon_english.txt
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	File @ resource/addon_english.txt
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(144816128)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result inspect ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(144816128)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(328404480)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(144816128)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (389@88)
		owner: 	a TransformWithLayoutMorph(826227712)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1036796416) a RubCursor(75880857...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (464630784) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(783652352)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(758808576)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(802807296))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(328404480)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1055894528))(a SearchMor...etc...
		lastStepTime: 	2743765
		lastStepMessage: 	nil
		lastCycleTime: 	2743794
		alarms: 	a Heap()
		lastAlarmTime: 	2743765
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1016@675)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(136545792) a GL...etc...
		fullBounds: 	(0@0) corner: (1016@675)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1055894528))(a SearchMor...etc...
		lastStepTime: 	2743765
		lastStepMessage: 	nil
		lastCycleTime: 	2743794
		alarms: 	a Heap()
		lastAlarmTime: 	2743765
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1055894528))(a SearchMor...etc...
		lastStepTime: 	2743765
		lastStepMessage: 	nil
		lastCycleTime: 	2743794
		alarms: 	a Heap()
		lastAlarmTime: 	2743765
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1016@675)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(136545792) a GL...etc...
		fullBounds: 	(0@0) corner: (1016@675)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
FileReference(Object)>>doesNotUnderstand: #self
FileReference>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
UTF8InvalidText: Invalid utf8 input detected
26 January 2018 12:00:24.154235 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

UTF8TextConverter>>errorMalformedInput
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


UTF8TextConverter>>nextFromStream:
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ec...etc...
		character1: 	$ÿ
		value1: 	255
		character2: 	$þ
		value2: 	254
		unicode: 	nil
		character3: 	$"
		value3: 	34
		character4: 	nil
		value4: 	nil
	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


MultiByteFileStream>>next
	Receiver: MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-Generat...etc...
	Arguments and temporary variables: 
		char: 	nil
		secondChar: 	nil
		state: 	nil
	Receiver's instance variables: 



MultiByteFileStream>>next:
	Receiver: MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-Generat...etc...
	Arguments and temporary variables: 
		anInteger: 	100
		multiString: 	'                                                                 ...etc...
		index: 	1
		character: 	nil
	Receiver's instance variables: 



[ :stream | ^ stream next: 100 ] in FileReference>>DoIt
	Receiver: File @ resource/addon_english.txt
	Arguments and temporary variables: 
		stream: 	MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ecs...etc...
	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path * 'resource' / 'addon_english.txt'


[ aBlock value: stream ] in FileReference(AbstractFileReference)>>readStreamDo:
	Receiver: File @ resource/addon_english.txt
	Arguments and temporary variables: 
		aBlock: 	[ :stream | ^ stream next: 100 ]
		stream: 	MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ecs...etc...
	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path * 'resource' / 'addon_english.txt'


BlockClosure>>ensure:
	Receiver: [ aBlock value: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ stream close ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	FileReference(AbstractFileReference)>>readStreamDo:
		startpc: 	58
		numArgs: 	0


FileReference(AbstractFileReference)>>readStreamDo:
	Receiver: File @ resource/addon_english.txt
	Arguments and temporary variables: 
		aBlock: 	[ :stream | ^ stream next: 100 ]
		stream: 	MultiByteFileStream: '/Users/clementbera/Desktop/Perso/GemTDWebsite/ecs...etc...
	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path * 'resource' / 'addon_english.txt'


FileReference>>DoIt
	Receiver: File @ resource/addon_english.txt
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path * 'resource' / 'addon_english.txt'


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'self readStreamDo: [ :stream | ^ stream next: 100 ]'
		itsSelection: 	a Text for 'self readStreamDo: [ :stream | ^ stream next: 100 ]'
		itsSelectionString: 	'self readStreamDo: [ :stream | ^ stream next: 100 ]'
	Receiver's instance variables: 
		ast: 	DoIt
	^ self readStreamDo: [ :stream | ^ stream next: 100 ]
		source: 	a ReadStream
		context: 	nil
		receiver: 	File @ resource/addon_english.txt
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	File @ resource/addon_english.txt
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(144816128)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result inspect ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(144816128)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(328404480)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(144816128)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (389@69)
		owner: 	a TransformWithLayoutMorph(826227712)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1036796416) a RubCursor(75880857...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (464630784) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(783652352)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(758808576)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(554447872))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(328404480)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(466592768))(a DropList...etc...
		lastStepTime: 	2751050
		lastStepMessage: 	nil
		lastCycleTime: 	2751072
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(758808576)))
		lastAlarmTime: 	2751050
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1016@675)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(136545792) a GL...etc...
		fullBounds: 	(0@0) corner: (1016@675)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(466592768))(a DropList...etc...
		lastStepTime: 	2751050
		lastStepMessage: 	nil
		lastCycleTime: 	2751072
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(758808576)))
		lastAlarmTime: 	2751050
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(466592768))(a DropList...etc...
		lastStepTime: 	2751050
		lastStepMessage: 	nil
		lastCycleTime: 	2751072
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(758808576)))
		lastAlarmTime: 	2751050
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1016@675)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(136545792) a GL...etc...
		fullBounds: 	(0@0) corner: (1016@675)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UTF8TextConverter>>errorMalformedInput
UTF8TextConverter>>nextFromStream:
MultiByteFileStream>>next
MultiByteFileStream>>next:
[ :stream | ^ stream next: 100 ] in FileReference>>DoIt
[ aBlock value: stream ] in FileReference(AbstractFileReference)>>readStreamDo:
BlockClosure>>ensure:
FileReference(AbstractFileReference)>>readStreamDo:
FileReference>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #peek
26 January 2018 12:04:30.392803 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #peek
	Receiver: 'ÿþ" l a n g " 
 { 
 	 " L a n g u a g e " 	 " E n g l i s h " 
 	 " T o k e n s " 
 	 { 
...etc...
	Arguments and temporary variables: 
		aMessage: 	peek
		exception: 	MessageNotUnderstood: ByteString>>peek
		resumeValue: 	nil
	Receiver's instance variables: 
'ÿþ" l a n g " 
 { 
 	 " L a n g u a g e " 	 " E n g l i s h " 
 	 " T o k e n s " 
 	 { 
...etc...

GemTDParser>>skipUntilRelevant
	Receiver: a GemTDParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		readStream: 	'ÿþ" l a n g " 
 { 
 	 " L a n g u a g e " 	 " E n g l i s h " 
 	 ...etc...


GemTDParser>>parse:
	Receiver: a GemTDParser
	Arguments and temporary variables: 
		rs: 	'ÿþ" l a n g " 
 { 
 	 " L a n g u a g e " 	 " E n g l i s h " 
 	 " T o k ...etc...
	Receiver's instance variables: 
		readStream: 	'ÿþ" l a n g " 
 { 
 	 " L a n g u a g e " 	 " E n g l i s h " 
 	 ...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'
GemTDParser new parse: 
(''resource/'' , ''addon_english.txt'...etc...
		itsSelection: 	a Text for '
GemTDParser new parse: 
(''resource/'' , ''addon_eng...etc...
		itsSelectionString: 	'
GemTDParser new parse: 
(''resource/'' , ''addon_english....etc...
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDParser new
		parse:
			('resource/' , 'addon_english.txt') as...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(50576384)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result inspect ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(50576384)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(87157248)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(50576384)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@164)
		owner: 	a TransformWithLayoutMorph(708040704)
		submorphs: 	an Array(a RubCursor(740452352) a RubPrimarySelectionMorph(118704640...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (57113088) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(836983296)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(740452352)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(126808064))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(87157248)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(466592768))(a DropList...etc...
		lastStepTime: 	2997288
		lastStepMessage: 	nil
		lastCycleTime: 	2997309
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	2997288
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1016@675)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(763785728) a Na...etc...
		fullBounds: 	(0@0) corner: (1016@675)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(466592768))(a DropList...etc...
		lastStepTime: 	2997288
		lastStepMessage: 	nil
		lastCycleTime: 	2997309
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	2997288
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1016@675)
		canvas: 	a FormCanvas on: DisplayScreen(1016x675x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(466592768))(a DropList...etc...
		lastStepTime: 	2997288
		lastStepMessage: 	nil
		lastCycleTime: 	2997309
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(740452352)))
		lastAlarmTime: 	2997288
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1016@675)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(763785728) a Na...etc...
		fullBounds: 	(0@0) corner: (1016@675)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #peek
GemTDParser>>skipUntilRelevant
GemTDParser>>parse:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FileDoesNotExist: File @ /Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-Generation/scripts/npc_abilities_custom
26 January 2018 4:33:06.750359 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

FileHandle>>streamError
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-...etc...
		writable: 	false
		id: 	nil


FileHandle>>readStream
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-...etc...
		writable: 	false
		id: 	nil


FileSystem>>readStreamOn:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path * 'scripts' / 'npc_abilities_custom'
	Receiver's instance variables: 
		store: 	a MacStore


FileReference>>readStream
	Receiver: File @ scripts/npc_abilities_custom
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path * 'scripts' / 'npc_abilities_custom'


[ :id | 
GemTDParser new
	parse:
		('scripts/' , id) asFileReference readStream binary contents asString
			readStream ] in GemTDImporter>>importNPC
	Receiver: a GemTDImporter
	Arguments and temporary variables: 
		id: 	#npc_abilities_custom
	Receiver's instance variables: 
		resources: 	nil
		scripts: 	nil
		npcs: 	nil


Array(SequenceableCollection)>>collect:
	Receiver: #(#npc_abilities_custom #'.' #txt #npc_units_custom #'.' #txt)
	Arguments and temporary variables: 
		aBlock: 	[ :id | 
GemTDParser new
	parse:
		('scripts/' , id) asFileReference re...etc...
		newCollection: 	#(nil nil nil nil nil nil)
		index: 	1
	Receiver's instance variables: 
#(#npc_abilities_custom #'.' #txt #npc_units_custom #'.' #txt)

GemTDImporter>>importNPC
	Receiver: a GemTDImporter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		resources: 	nil
		scripts: 	nil
		npcs: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDImporter new importNPC
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(532101888)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result inspect ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(532101888)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(878647552)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(532101888)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(918017024)
		submorphs: 	an Array(a RubPrimarySelectionMorph(82576640) a RubCursor(93754624) ...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (594109696) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(518811136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(93754624)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(479934976))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(878647552)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(660575488))(a SearchMorp...etc...
		lastStepTime: 	241076
		lastStepMessage: 	nil
		lastCycleTime: 	241098
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(93754624)))
		lastAlarmTime: 	241076
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(834116864) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(660575488))(a SearchMorp...etc...
		lastStepTime: 	241076
		lastStepMessage: 	nil
		lastCycleTime: 	241098
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(93754624)))
		lastAlarmTime: 	241076
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(660575488))(a SearchMorp...etc...
		lastStepTime: 	241076
		lastStepMessage: 	nil
		lastCycleTime: 	241098
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(93754624)))
		lastAlarmTime: 	241076
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(834116864) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
FileHandle>>streamError
FileHandle>>readStream
FileSystem>>readStreamOn:
FileReference>>readStream
[ :id | 
GemTDParser new
	parse:
		('scripts/' , id) asFileReference readStream binary contents asString
			readStream ] in GemTDImporter>>importNPC
Array(SequenceableCollection)>>collect:
GemTDImporter>>importNPC
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FileDoesNotExist: File @ /Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-Generation/scripts/npcnpc_abilities_custom
26 January 2018 4:33:31.51109 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

FileHandle>>streamError
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-...etc...
		writable: 	false
		id: 	nil


FileHandle>>readStream
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-...etc...
		writable: 	false
		id: 	nil


FileSystem>>readStreamOn:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path * 'scripts' / 'npcnpc_abilities_custom'
	Receiver's instance variables: 
		store: 	a MacStore


FileReference>>readStream
	Receiver: File @ scripts/npcnpc_abilities_custom
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path * 'scripts' / 'npcnpc_abilities_custom'


[ :id | 
GemTDParser new
	parse:
		('scripts/npc' , id) asFileReference readStream binary contents
			asString readStream ] in GemTDImporter>>importNPC
	Receiver: a GemTDImporter
	Arguments and temporary variables: 
		id: 	#npc_abilities_custom
	Receiver's instance variables: 
		resources: 	nil
		scripts: 	nil
		npcs: 	nil


Array(SequenceableCollection)>>collect:
	Receiver: #(#npc_abilities_custom #'.' #txt #npc_units_custom #'.' #txt)
	Arguments and temporary variables: 
		aBlock: 	[ :id | 
GemTDParser new
	parse:
		('scripts/npc' , id) asFileReference...etc...
		newCollection: 	#(nil nil nil nil nil nil)
		index: 	1
	Receiver's instance variables: 
#(#npc_abilities_custom #'.' #txt #npc_units_custom #'.' #txt)

GemTDImporter>>importNPC
	Receiver: a GemTDImporter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		resources: 	nil
		scripts: 	nil
		npcs: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDImporter new importNPC
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(532101888)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result inspect ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(532101888)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(878647552)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(532101888)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(918017024)
		submorphs: 	an Array(a RubPrimarySelectionMorph(82576640) a RubCursor(93754624) ...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (594109696) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(518811136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(93754624)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(997393920))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(229.0@64.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(878647552)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(660575488))(a SearchMorp...etc...
		lastStepTime: 	265841
		lastStepMessage: 	nil
		lastCycleTime: 	265862
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(93754624)))
		lastAlarmTime: 	265841
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(834116864) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(660575488))(a SearchMorp...etc...
		lastStepTime: 	265841
		lastStepMessage: 	nil
		lastCycleTime: 	265862
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(93754624)))
		lastAlarmTime: 	265841
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(660575488))(a SearchMorp...etc...
		lastStepTime: 	265841
		lastStepMessage: 	nil
		lastCycleTime: 	265862
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(93754624)))
		lastAlarmTime: 	265841
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(834116864) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
FileHandle>>streamError
FileHandle>>readStream
FileSystem>>readStreamOn:
FileReference>>readStream
[ :id | 
GemTDParser new
	parse:
		('scripts/npc' , id) asFileReference readStream binary contents
			asString readStream ] in GemTDImporter>>importNPC
Array(SequenceableCollection)>>collect:
GemTDImporter>>importNPC
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FileDoesNotExist: File @ /Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-Generation/scripts/npcnpc_abilities_custom
26 January 2018 4:33:48.129109 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

FileHandle>>streamError
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-...etc...
		writable: 	false
		id: 	nil


FileHandle>>readStream
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-...etc...
		writable: 	false
		id: 	nil


FileSystem>>readStreamOn:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path * 'scripts' / 'npcnpc_abilities_custom'
	Receiver's instance variables: 
		store: 	a MacStore


FileReference>>readStream
	Receiver: File @ scripts/npcnpc_abilities_custom
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path * 'scripts' / 'npcnpc_abilities_custom'


[ :id | 
GemTDParser new
	parse:
		('scripts/npc' , id) asFileReference readStream binary contents
			asString readStream ] in GemTDImporter>>importNPC
	Receiver: a GemTDImporter
	Arguments and temporary variables: 
		id: 	#npc_abilities_custom
	Receiver's instance variables: 
		resources: 	nil
		scripts: 	nil
		npcs: 	nil


Array(SequenceableCollection)>>collect:
	Receiver: #(#npc_abilities_custom #'.' #txt #npc_units_custom #'.' #txt)
	Arguments and temporary variables: 
		aBlock: 	[ :id | 
GemTDParser new
	parse:
		('scripts/npc' , id) asFileReference...etc...
		newCollection: 	#(nil nil nil nil nil nil)
		index: 	1
	Receiver's instance variables: 
#(#npc_abilities_custom #'.' #txt #npc_units_custom #'.' #txt)

GemTDImporter>>importNPC
	Receiver: a GemTDImporter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		resources: 	nil
		scripts: 	nil
		npcs: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDImporter new importNPC
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(532101888)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result inspect ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(532101888)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(878647552)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(532101888)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(918017024)
		submorphs: 	an Array(a RubPrimarySelectionMorph(82576640) a RubCursor(93754624) ...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (594109696) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(518811136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(93754624)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(884471040))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(166.0@90.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(878647552)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(660575488))(a SearchMorp...etc...
		lastStepTime: 	282461
		lastStepMessage: 	nil
		lastCycleTime: 	282482
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(93754624)))
		lastAlarmTime: 	282461
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(834116864) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(660575488))(a SearchMorp...etc...
		lastStepTime: 	282461
		lastStepMessage: 	nil
		lastCycleTime: 	282482
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(93754624)))
		lastAlarmTime: 	282461
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(660575488))(a SearchMorp...etc...
		lastStepTime: 	282461
		lastStepMessage: 	nil
		lastCycleTime: 	282482
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(93754624)))
		lastAlarmTime: 	282461
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(834116864) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
FileHandle>>streamError
FileHandle>>readStream
FileSystem>>readStreamOn:
FileReference>>readStream
[ :id | 
GemTDParser new
	parse:
		('scripts/npc' , id) asFileReference readStream binary contents
			asString readStream ] in GemTDImporter>>importNPC
Array(SequenceableCollection)>>collect:
GemTDImporter>>importNPC
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FileDoesNotExist: File @ /Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-Generation/scripts/npc/npc_abilities_custom
26 January 2018 4:34:14.316041 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

FileHandle>>streamError
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-...etc...
		writable: 	false
		id: 	nil


FileHandle>>readStream
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-...etc...
		writable: 	false
		id: 	nil


FileSystem>>readStreamOn:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path * 'scripts' / 'npc' / 'npc_abilities_custom'
	Receiver's instance variables: 
		store: 	a MacStore


FileReference>>readStream
	Receiver: File @ scripts/npc/npc_abilities_custom
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path * 'scripts' / 'npc' / 'npc_abilities_custom'


[ :id | 
GemTDParser new
	parse:
		('scripts/npc/' , id) asFileReference readStream binary contents
			asString readStream ] in GemTDImporter>>importNPC
	Receiver: a GemTDImporter
	Arguments and temporary variables: 
		id: 	#npc_abilities_custom
	Receiver's instance variables: 
		resources: 	nil
		scripts: 	nil
		npcs: 	nil


Array(SequenceableCollection)>>collect:
	Receiver: #(#npc_abilities_custom #'.' #txt #npc_units_custom #'.' #txt)
	Arguments and temporary variables: 
		aBlock: 	[ :id | 
GemTDParser new
	parse:
		('scripts/npc/' , id) asFileReferenc...etc...
		newCollection: 	#(nil nil nil nil nil nil)
		index: 	1
	Receiver's instance variables: 
#(#npc_abilities_custom #'.' #txt #npc_units_custom #'.' #txt)

GemTDImporter>>importNPC
	Receiver: a GemTDImporter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		resources: 	nil
		scripts: 	nil
		npcs: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDImporter new importNPC
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result inspect ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubCursor(99587072) a RubPrimarySelectionMorph(873652992)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(213625344))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(660575488))(a SearchMorp...etc...
		lastStepTime: 	308650
		lastStepMessage: 	nil
		lastCycleTime: 	308671
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	308650
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(660575488))(a SearchMorp...etc...
		lastStepTime: 	308650
		lastStepMessage: 	nil
		lastCycleTime: 	308671
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	308650
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(660575488))(a SearchMorp...etc...
		lastStepTime: 	308650
		lastStepMessage: 	nil
		lastCycleTime: 	308671
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	308650
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
FileHandle>>streamError
FileHandle>>readStream
FileSystem>>readStreamOn:
FileReference>>readStream
[ :id | 
GemTDParser new
	parse:
		('scripts/npc/' , id) asFileReference readStream binary contents
			asString readStream ] in GemTDImporter>>importNPC
Array(SequenceableCollection)>>collect:
GemTDImporter>>importNPC
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
26 January 2018 4:38:33.257763 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDImporter>>units
	Receiver: a GemTDImporter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		resources: 	an Array(' l a n g '->a Dictionary(' L a n g u a g e '->' E n g l i ...etc...
		scripts: 	#('--å®ç³TD
--@author èå°è¾
if GemTD == nil then
	GemTD = cla...etc...
		npcs: 	an Array('DOTAAbilities'->a Dictionary(size 342) 'DOTAUnits'->a Dictionar...etc...


GemTDGod>>units
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter


GemTDGod>>generateTowers
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		towers: 	an OrderedCollection()
	Receiver's instance variables: 
		importer: 	a GemTDImporter


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1070833664))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(323.0@139.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(660575488))(a SearchMorp...etc...
		lastStepTime: 	567434
		lastStepMessage: 	nil
		lastCycleTime: 	567455
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	567434
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(660575488))(a SearchMorp...etc...
		lastStepTime: 	567434
		lastStepMessage: 	nil
		lastCycleTime: 	567455
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	567434
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(660575488))(a SearchMorp...etc...
		lastStepTime: 	567434
		lastStepMessage: 	nil
		lastCycleTime: 	567455
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	567434
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDImporter>>units
GemTDGod>>units
GemTDGod>>generateTowers
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: only integers should be used as indices
26 January 2018 4:41:05.274957 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

Array(Object)>>error:
	Receiver: an Array('DOTAAbilities'->a Dictionary(size 342) 'DOTAUnits'->a Dictionary(size 180))
	Arguments and temporary variables: 
		aString: 	'only integers should be used as indices'
	Receiver's instance variables: 
an Array('DOTAAbilities'->a Dictionary(size 342) 'DOTAUnits'->a Dictionary(size 180))

Array(Object)>>errorNonIntegerIndex
	Receiver: an Array('DOTAAbilities'->a Dictionary(size 342) 'DOTAUnits'->a Dictionary(size 180))
	Arguments and temporary variables: 

	Receiver's instance variables: 
an Array('DOTAAbilities'->a Dictionary(size 342) 'DOTAUnits'->a Dictionary(size 180))

Array(Object)>>at:
	Receiver: an Array('DOTAAbilities'->a Dictionary(size 342) 'DOTAUnits'->a Dictionary(size 180))
	Arguments and temporary variables: 
		index: 	'DOTAUnits'
	Receiver's instance variables: 
an Array('DOTAAbilities'->a Dictionary(size 342) 'DOTAUnits'->a Dictionary(size 180))

GemTDImporter>>units
	Receiver: a GemTDImporter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		resources: 	an Array(' l a n g '->a Dictionary(' L a n g u a g e '->' E n g l i ...etc...
		scripts: 	#('--å®ç³TD
--@author èå°è¾
if GemTD == nil then
	GemTD = cla...etc...
		npcs: 	an Array('DOTAAbilities'->a Dictionary(size 342) 'DOTAUnits'->a Dictionar...etc...


GemTDGod>>units
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter


GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		units: 	nil
	Receiver's instance variables: 
		importer: 	a GemTDImporter


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'GemTDGod new process '
		itsSelection: 	a Text for 'GemTDGod new process '
		itsSelectionString: 	'GemTDGod new process '
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(127600640))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(121.0@128.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(532922880))(a DropList...etc...
		lastStepTime: 	719527
		lastStepMessage: 	nil
		lastCycleTime: 	719548
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	719527
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(532922880))(a DropList...etc...
		lastStepTime: 	719527
		lastStepMessage: 	nil
		lastCycleTime: 	719548
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	719527
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(532922880))(a DropList...etc...
		lastStepTime: 	719527
		lastStepMessage: 	nil
		lastCycleTime: 	719548
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	719527
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Array(Object)>>error:
Array(Object)>>errorNonIntegerIndex
Array(Object)>>at:
GemTDImporter>>units
GemTDGod>>units
GemTDGod>>generate
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
26 January 2018 4:41:56.189245 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDGod>>unitType:
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		u: 	'gemtd_g11111'
	Receiver's instance variables: 
		importer: 	a GemTDImporter


[ :u | units := (self unitType: u) newFrom: u with: importer ] in GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		units: 	nil
		u: 	'gemtd_g11111'
	Receiver's instance variables: 
		importer: 	a GemTDImporter


Array(SequenceableCollection)>>do:
	Receiver: #('gemtd_g11111' 'gemtd_youniekesizhinu_fly' 'gemtd_y111111' 'gemtd_huangcailanbaoshi' 'ge...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :u | units := (self unitType: u) newFrom: u with: importer ]
		index: 	1
	Receiver's instance variables: 
#('gemtd_g11111' 'gemtd_youniekesizhinu_fly' 'gemtd_y111111' 'gemtd_huangcailanbaoshi' 'ge...etc...

GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		units: 	nil
	Receiver's instance variables: 
		importer: 	a GemTDImporter


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(525955328))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(100.0@150.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(392155648))(a GLMSys...etc...
		lastStepTime: 	770440
		lastStepMessage: 	nil
		lastCycleTime: 	770461
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	770440
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(392155648))(a GLMSys...etc...
		lastStepTime: 	770440
		lastStepMessage: 	nil
		lastCycleTime: 	770461
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	770440
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(392155648))(a GLMSys...etc...
		lastStepTime: 	770440
		lastStepMessage: 	nil
		lastCycleTime: 	770461
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	770440
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDGod>>unitType:
[ :u | units := (self unitType: u) newFrom: u with: importer ] in GemTDGod>>generate
Array(SequenceableCollection)>>do:
GemTDGod>>generate
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
26 January 2018 4:42:53.287773 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

[ :u | 
u halt.
units := (self unitType: u) newFrom: u with: importer ] in GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		units: 	nil
		u: 	'gemtd_g11111'
	Receiver's instance variables: 
		importer: 	a GemTDImporter


[ :association | aBlock value: association key ] in Dictionary>>keysDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u | 
u halt.
units := (self unitType: u) newFrom: u with: importer ]...etc...
		association: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Abili...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
		each: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :association | aBlock value: association key ]
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Dictionary>>keysDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u | 
u halt.
units := (self unitType: u) newFrom: u with: importer ]...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		units: 	nil
	Receiver's instance variables: 
		importer: 	a GemTDImporter


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(525955328))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(100.0@150.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(660575488))(a SearchMorp...etc...
		lastStepTime: 	827614
		lastStepMessage: 	nil
		lastCycleTime: 	827637
		alarms: 	a Heap()
		lastAlarmTime: 	827614
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(660575488))(a SearchMorp...etc...
		lastStepTime: 	827614
		lastStepMessage: 	nil
		lastCycleTime: 	827637
		alarms: 	a Heap()
		lastAlarmTime: 	827614
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(660575488))(a SearchMorp...etc...
		lastStepTime: 	827614
		lastStepMessage: 	nil
		lastCycleTime: 	827637
		alarms: 	a Heap()
		lastAlarmTime: 	827614
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ :u | 
u halt.
units := (self unitType: u) newFrom: u with: importer ] in GemTDGod>>generate
[ :association | aBlock value: association key ] in Dictionary>>keysDo:
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>keysDo:
GemTDGod>>generate
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
26 January 2018 4:43:10.175498 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

[ :u :details | 
u halt.
units := (self unitType: u) newFrom: u with: importer ] in GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		units: 	nil
		u: 	'gemtd_g11111'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
	Receiver's instance variables: 
		importer: 	a GemTDImporter


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
u halt.
units := (self unitType: u) newFrom: u with: i...etc...
		assoc: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'-...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
u halt.
units := (self unitType: u) newFrom: u with: i...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		units: 	nil
	Receiver's instance variables: 
		importer: 	a GemTDImporter


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(525955328))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(100.0@150.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(532922880))(a DropList...etc...
		lastStepTime: 	844508
		lastStepMessage: 	nil
		lastCycleTime: 	844529
		alarms: 	a Heap()
		lastAlarmTime: 	844508
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(532922880))(a DropList...etc...
		lastStepTime: 	844508
		lastStepMessage: 	nil
		lastCycleTime: 	844529
		alarms: 	a Heap()
		lastAlarmTime: 	844508
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(532922880))(a DropList...etc...
		lastStepTime: 	844508
		lastStepMessage: 	nil
		lastCycleTime: 	844529
		alarms: 	a Heap()
		lastAlarmTime: 	844508
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ :u :details | 
u halt.
units := (self unitType: u) newFrom: u with: importer ] in GemTDGod>>generate
[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>keysAndValuesDo:
GemTDGod>>generate
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of GemTDBaseTower class did not understand #newFrom:with:importer:
26 January 2018 4:46:27.272768 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDBaseTower class(Object)>>doesNotUnderstand: #newFrom:with:importer:
	Receiver: GemTDBaseTower
	Arguments and temporary variables: 
		aMessage: 	newFrom: 'gemtd_g11111' with: a Dictionary('Ability1'->'' 'Ability10'...etc...
		exception: 	MessageNotUnderstood: GemTDBaseTower class>>newFrom:with:importer:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	GemTDTower
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#GemTDBaseTower
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GemTD-Analysis'
		traitComposition: 	{}
		localSelectors: 	nil


[ :u :details | 
| cls |
cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
	ifTrue: [ u last = $1
			ifTrue: [ GemTDBaseTower ]
			ifFalse: [ GemTDAdvancedTower ] ]
	ifFalse: [ GemTDCreep ].
units := cls newFrom: u with: details importer: importer ] in GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		units: 	nil
		u: 	'gemtd_g11111'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		cls: 	GemTDBaseTower
	Receiver's instance variables: 
		importer: 	a GemTDImporter


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
cls := ((details at: 'Model') beginsWith: 'mod...etc...
		assoc: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'-...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
cls := ((details at: 'Model') beginsWith: 'mod...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		units: 	nil
	Receiver's instance variables: 
		importer: 	a GemTDImporter


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(525955328))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(100.0@150.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(532922880))(a DropList...etc...
		lastStepTime: 	1041604
		lastStepMessage: 	nil
		lastCycleTime: 	1041628
		alarms: 	a Heap()
		lastAlarmTime: 	1041604
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a NautilusWindow(1040756224) a GL...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(532922880))(a DropList...etc...
		lastStepTime: 	1041604
		lastStepMessage: 	nil
		lastCycleTime: 	1041628
		alarms: 	a Heap()
		lastAlarmTime: 	1041604
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(532922880))(a DropList...etc...
		lastStepTime: 	1041604
		lastStepMessage: 	nil
		lastCycleTime: 	1041628
		alarms: 	a Heap()
		lastAlarmTime: 	1041604
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a NautilusWindow(1040756224) a GL...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDBaseTower class(Object)>>doesNotUnderstand: #newFrom:with:importer:
[ :u :details | 
| cls |
cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
	ifTrue: [ u last = $1
			ifTrue: [ GemTDBaseTower ]
			ifFalse: [ GemTDAdvancedTower ] ]
	ifFalse: [ GemTDCreep ].
units := cls newFrom: u with: details importer: importer ] in GemTDGod>>generate
[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>keysAndValuesDo:
GemTDGod>>generate
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
26 January 2018 4:50:44.95841 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDBaseTower(GemTDElement)>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		enName: 	nil
		schName: 	nil
		tchName: 	nil
		abilities: 	nil


GemTDBaseTower(GemTDTower)>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		enName: 	nil
		schName: 	nil
		tchName: 	nil
		abilities: 	nil


GemTDBaseTower>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		enName: 	nil
		schName: 	nil
		tchName: 	nil
		abilities: 	nil


GemTDBaseTower class(GemTDElement class)>>newFrom:with:importer:
	Receiver: GemTDBaseTower
	Arguments and temporary variables: 
		codeName: 	'gemtd_g11111'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		superclass: 	GemTDTower
		methodDict: 	a MethodDictionary(#importWith:importer:->GemTDBaseTower>>#importWi...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#GemTDBaseTower
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GemTD-Analysis'
		traitComposition: 	{}
		localSelectors: 	nil


[ :u :details | 
| cls |
cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
	ifTrue: [ u last = $1
			ifTrue: [ GemTDBaseTower ]
			ifFalse: [ GemTDAdvancedTower ] ]
	ifFalse: [ GemTDCreep ].
units := cls newFrom: u with: details importer: importer ] in GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		units: 	nil
		u: 	'gemtd_g11111'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		cls: 	GemTDBaseTower
	Receiver's instance variables: 
		importer: 	a GemTDImporter


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
cls := ((details at: 'Model') beginsWith: 'mod...etc...
		assoc: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'-...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
cls := ((details at: 'Model') beginsWith: 'mod...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		units: 	nil
	Receiver's instance variables: 
		importer: 	a GemTDImporter


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'GemTDGod new process '
		itsSelection: 	a Text for 'GemTDGod new process '
		itsSelectionString: 	'GemTDGod new process '
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(212306688))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(73.0@93.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(532922880))(a DropList...etc...
		lastStepTime: 	1299198
		lastStepMessage: 	nil
		lastCycleTime: 	1299220
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1299198
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(532922880))(a DropList...etc...
		lastStepTime: 	1299198
		lastStepMessage: 	nil
		lastCycleTime: 	1299220
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1299198
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(532922880))(a DropList...etc...
		lastStepTime: 	1299198
		lastStepMessage: 	nil
		lastCycleTime: 	1299220
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1299198
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDBaseTower(GemTDElement)>>importWith:importer:
GemTDBaseTower(GemTDTower)>>importWith:importer:
GemTDBaseTower>>importWith:importer:
GemTDBaseTower class(GemTDElement class)>>newFrom:with:importer:
[ :u :details | 
| cls |
cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
	ifTrue: [ u last = $1
			ifTrue: [ GemTDBaseTower ]
			ifFalse: [ GemTDAdvancedTower ] ]
	ifFalse: [ GemTDCreep ].
units := cls newFrom: u with: details importer: importer ] in GemTDGod>>generate
[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>keysAndValuesDo:
GemTDGod>>generate
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of GemTDImporter did not understand #resources
26 January 2018 4:51:00.667702 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDImporter(Object)>>doesNotUnderstand: #resources
	Receiver: a GemTDImporter
	Arguments and temporary variables: 
		aMessage: 	resources
		exception: 	MessageNotUnderstood: GemTDImporter>>resources
		resumeValue: 	nil
	Receiver's instance variables: 
		resources: 	an Array(' l a n g '->a Dictionary(' L a n g u a g e '->' E n g l i ...etc...
		scripts: 	#('--å®ç³TD
--@author èå°è¾
if GemTD == nil then
	GemTD = cla...etc...
		npcs: 	a Dictionary('DOTAAbilities'->a Dictionary(size 342) 'DOTAUnits'->a Dicti...etc...


GemTDBaseTower(GemTDElement)>>DoItIn:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		ThisContext: 	GemTDBaseTower(GemTDElement)>>importWith:importer:
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		enName: 	nil
		schName: 	nil
		tchName: 	nil
		abilities: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoItIn: ThisContext
	^ (ThisContext namedTempAt: 2) resources
		source: 	a ReadStream
		context: 	GemTDBaseTower(GemTDElement)>>importWith:importer:
		receiver: 	a GemTDBaseTower
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	a GemTDBaseTower
		ctxt: 	GemTDBaseTower(GemTDElement)>>importWith:importer:
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(757857280)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result inspect ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(757857280)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoMethodRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoMethodRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(69470464)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(757857280)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (988@126)
		owner: 	a TransformWithLayoutMorph(584746496)
		submorphs: 	an Array(a RubCursor(986676224) a RubPrimarySelectionMorph(201524736...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (448020736) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(952680704)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(986676224)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(809797888))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoMethodRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoMethodRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(69470464)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(532922880))(a DropList...etc...
		lastStepTime: 	1314998
		lastStepMessage: 	nil
		lastCycleTime: 	1315021
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(986676224)))
		lastAlarmTime: 	1314998
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(78128640) a GLM...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(532922880))(a DropList...etc...
		lastStepTime: 	1314998
		lastStepMessage: 	nil
		lastCycleTime: 	1315021
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(986676224)))
		lastAlarmTime: 	1314998
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(532922880))(a DropList...etc...
		lastStepTime: 	1314998
		lastStepMessage: 	nil
		lastCycleTime: 	1315021
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(986676224)))
		lastAlarmTime: 	1314998
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(78128640) a GLM...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDImporter(Object)>>doesNotUnderstand: #resources
GemTDBaseTower(GemTDElement)>>DoItIn:
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoMethodRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoMethodRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
26 January 2018 4:51:52.84721 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDImporter>>reworkResources
	Receiver: a GemTDImporter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		resources: 	an Array(' l a n g '->a Dictionary(' L a n g u a g e '->' E n g l i ...etc...
		scripts: 	nil
		npcs: 	nil


GemTDImporter>>importResources
	Receiver: a GemTDImporter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		resources: 	an Array(' l a n g '->a Dictionary(' L a n g u a g e '->' E n g l i ...etc...
		scripts: 	nil
		npcs: 	nil


GemTDImporter>>importAll
	Receiver: a GemTDImporter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		resources: 	an Array(' l a n g '->a Dictionary(' L a n g u a g e '->' E n g l i ...etc...
		scripts: 	nil
		npcs: 	nil


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'GemTDGod new process '
		itsSelection: 	a Text for 'GemTDGod new process '
		itsSelectionString: 	'GemTDGod new process '
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(839435264))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(57.0@91.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(660575488))(a SearchMorp...etc...
		lastStepTime: 	1367167
		lastStepMessage: 	nil
		lastCycleTime: 	1367189
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1367167
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(660575488))(a SearchMorp...etc...
		lastStepTime: 	1367167
		lastStepMessage: 	nil
		lastCycleTime: 	1367189
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1367167
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(660575488))(a SearchMorp...etc...
		lastStepTime: 	1367167
		lastStepMessage: 	nil
		lastCycleTime: 	1367189
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1367167
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDImporter>>reworkResources
GemTDImporter>>importResources
GemTDImporter>>importAll
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
26 January 2018 4:52:20.524403 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

[ :res | res halt ] in GemTDImporter>>reworkResources
	Receiver: a GemTDImporter
	Arguments and temporary variables: 
		newDict: 	a Dictionary()
		res: 	' l a n g '->a Dictionary(' L a n g u a g e '->' E n g l i s h ' ' T o k e...etc...
	Receiver's instance variables: 
		resources: 	an Array(' l a n g '->a Dictionary(' L a n g u a g e '->' E n g l i ...etc...
		scripts: 	nil
		npcs: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(' l a n g '->a Dictionary(' L a n g u a g e '->' E n g l i s h ' ' T o k e n s '-...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :res | res halt ]
		index: 	1
	Receiver's instance variables: 
an Array(' l a n g '->a Dictionary(' L a n g u a g e '->' E n g l i s h ' ' T o k e n s '-...etc...

GemTDImporter>>reworkResources
	Receiver: a GemTDImporter
	Arguments and temporary variables: 
		newDict: 	a Dictionary()
	Receiver's instance variables: 
		resources: 	an Array(' l a n g '->a Dictionary(' L a n g u a g e '->' E n g l i ...etc...
		scripts: 	nil
		npcs: 	nil


GemTDImporter>>importResources
	Receiver: a GemTDImporter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		resources: 	an Array(' l a n g '->a Dictionary(' L a n g u a g e '->' E n g l i ...etc...
		scripts: 	nil
		npcs: 	nil


GemTDImporter>>importAll
	Receiver: a GemTDImporter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		resources: 	an Array(' l a n g '->a Dictionary(' L a n g u a g e '->' E n g l i ...etc...
		scripts: 	nil
		npcs: 	nil


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'GemTDGod new process '
		itsSelection: 	a Text for 'GemTDGod new process '
		itsSelectionString: 	'GemTDGod new process '
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(839435264))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(57.0@91.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(660575488))(a SearchMorp...etc...
		lastStepTime: 	1394859
		lastStepMessage: 	nil
		lastCycleTime: 	1394882
		alarms: 	a Heap()
		lastAlarmTime: 	1394859
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(660575488))(a SearchMorp...etc...
		lastStepTime: 	1394859
		lastStepMessage: 	nil
		lastCycleTime: 	1394882
		alarms: 	a Heap()
		lastAlarmTime: 	1394859
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(660575488))(a SearchMorp...etc...
		lastStepTime: 	1394859
		lastStepMessage: 	nil
		lastCycleTime: 	1394882
		alarms: 	a Heap()
		lastAlarmTime: 	1394859
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ :res | res halt ] in GemTDImporter>>reworkResources
Array(SequenceableCollection)>>do:
GemTDImporter>>reworkResources
GemTDImporter>>importResources
GemTDImporter>>importAll
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key 'Language' not found in Dictionary
26 January 2018 4:53:31.670109 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary(' L a n g u a g e '->' E n g l i s h ' ' T o k e n s '->a Dictionary(size 161...etc...
	Arguments and temporary variables: 
		aKey: 	'Language'
	Receiver's instance variables: 
		tally: 	2
		array: 	an Array(nil ' T o k e n s '->a Dictionary(size 1617) ' L a n g u a g e ...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary(' L a n g u a g e '->' E n g l i s h ' ' T o k e n s '->a Dictionary(size 161...etc...
	Arguments and temporary variables: 
		key: 	'Language'
	Receiver's instance variables: 
		tally: 	2
		array: 	an Array(nil ' T o k e n s '->a Dictionary(size 1617) ' L a n g u a g e ...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary(' L a n g u a g e '->' E n g l i s h ' ' T o k e n s '->a Dictionary(size 161...etc...
	Arguments and temporary variables: 
		key: 	'Language'
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	2
		array: 	an Array(nil ' T o k e n s '->a Dictionary(size 1617) ' L a n g u a g e ...etc...


Dictionary>>at:
	Receiver: a Dictionary(' L a n g u a g e '->' E n g l i s h ' ' T o k e n s '->a Dictionary(size 161...etc...
	Arguments and temporary variables: 
		key: 	'Language'
	Receiver's instance variables: 
		tally: 	2
		array: 	an Array(nil ' T o k e n s '->a Dictionary(size 1617) ' L a n g u a g e ...etc...


[ :res | newDict at: (res value at: 'Language') put: (res value at: 'Tokens') ] in GemTDImporter>>reworkResources
	Receiver: a GemTDImporter
	Arguments and temporary variables: 
		newDict: 	a Dictionary()
		res: 	' l a n g '->a Dictionary(' L a n g u a g e '->' E n g l i s h ' ' T o k e...etc...
	Receiver's instance variables: 
		resources: 	an Array(' l a n g '->a Dictionary(' L a n g u a g e '->' E n g l i ...etc...
		scripts: 	nil
		npcs: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(' l a n g '->a Dictionary(' L a n g u a g e '->' E n g l i s h ' ' T o k e n s '-...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :res | newDict at: (res value at: 'Language') put: (res value at: 'To...etc...
		index: 	1
	Receiver's instance variables: 
an Array(' l a n g '->a Dictionary(' L a n g u a g e '->' E n g l i s h ' ' T o k e n s '-...etc...

GemTDImporter>>reworkResources
	Receiver: a GemTDImporter
	Arguments and temporary variables: 
		newDict: 	a Dictionary()
	Receiver's instance variables: 
		resources: 	an Array(' l a n g '->a Dictionary(' L a n g u a g e '->' E n g l i ...etc...
		scripts: 	nil
		npcs: 	nil


GemTDImporter>>importResources
	Receiver: a GemTDImporter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		resources: 	an Array(' l a n g '->a Dictionary(' L a n g u a g e '->' E n g l i ...etc...
		scripts: 	nil
		npcs: 	nil


GemTDImporter>>importAll
	Receiver: a GemTDImporter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		resources: 	an Array(' l a n g '->a Dictionary(' L a n g u a g e '->' E n g l i ...etc...
		scripts: 	nil
		npcs: 	nil


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(778301952))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(241.0@36.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(392155648))(a GLMSys...etc...
		lastStepTime: 	1465987
		lastStepMessage: 	nil
		lastCycleTime: 	1466008
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1465987
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a GL...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(392155648))(a GLMSys...etc...
		lastStepTime: 	1465987
		lastStepMessage: 	nil
		lastCycleTime: 	1466008
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1465987
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(392155648))(a GLMSys...etc...
		lastStepTime: 	1465987
		lastStepMessage: 	nil
		lastCycleTime: 	1466008
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1465987
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a GL...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Dictionary>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in Dictionary>>at:
Dictionary>>at:ifAbsent:
Dictionary>>at:
[ :res | newDict at: (res value at: 'Language') put: (res value at: 'Tokens') ] in GemTDImporter>>reworkResources
Array(SequenceableCollection)>>do:
GemTDImporter>>reworkResources
GemTDImporter>>importResources
GemTDImporter>>importAll
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Character did not understand #do:
26 January 2018 4:54:57.481019 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

Character(Object)>>doesNotUnderstand: #do:
	Receiver: Character null
	Arguments and temporary variables: 
		aMessage: 	do: [ :each | self remove: each ]
		exception: 	MessageNotUnderstood: Character>>do:
		resumeValue: 	nil
	Receiver's instance variables: 
Character null

ByteString(Collection)>>removeAll:
	Receiver: ' l a n g '
	Arguments and temporary variables: 
		aCollection: 	Character null
	Receiver's instance variables: 
' l a n g '

GemTDParser>>parseString
	Receiver: a GemTDParser
	Arguments and temporary variables: 
		ws: 	a WriteStream
		str: 	' l a n g '
	Receiver's instance variables: 
		readStream: 	a ReadStream


GemTDParser>>parseKeyValue
	Receiver: a GemTDParser
	Arguments and temporary variables: 
		key: 	nil
		val: 	nil
	Receiver's instance variables: 
		readStream: 	a ReadStream


GemTDParser>>parse:
	Receiver: a GemTDParser
	Arguments and temporary variables: 
		rs: 	a ReadStream
	Receiver's instance variables: 
		readStream: 	a ReadStream


[ :id | 
GemTDParser new
	parse:
		('resource/' , id) asFileReference readStream binary contents asString
			readStream ] in GemTDImporter>>importResources
	Receiver: a GemTDImporter
	Arguments and temporary variables: 
		id: 	'addon_english.txt'
	Receiver's instance variables: 
		resources: 	nil
		scripts: 	nil
		npcs: 	nil


Array(SequenceableCollection)>>collect:
	Receiver: #('addon_english.txt' 'addon_schinese.txt' 'addon_tchinese.txt')
	Arguments and temporary variables: 
		aBlock: 	[ :id | 
GemTDParser new
	parse:
		('resource/' , id) asFileReference r...etc...
		newCollection: 	#(nil nil nil)
		index: 	1
	Receiver's instance variables: 
#('addon_english.txt' 'addon_schinese.txt' 'addon_tchinese.txt')

GemTDImporter>>importResources
	Receiver: a GemTDImporter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		resources: 	nil
		scripts: 	nil
		npcs: 	nil


GemTDImporter>>importAll
	Receiver: a GemTDImporter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		resources: 	nil
		scripts: 	nil
		npcs: 	nil


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'GemTDGod new process '
		itsSelection: 	a Text for 'GemTDGod new process '
		itsSelectionString: 	'GemTDGod new process '
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(523702784))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(96.0@50.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(991301376))(a DropList...etc...
		lastStepTime: 	1551813
		lastStepMessage: 	nil
		lastCycleTime: 	1551834
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1551813
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(991301376))(a DropList...etc...
		lastStepTime: 	1551813
		lastStepMessage: 	nil
		lastCycleTime: 	1551834
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1551813
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(991301376))(a DropList...etc...
		lastStepTime: 	1551813
		lastStepMessage: 	nil
		lastCycleTime: 	1551834
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1551813
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Character(Object)>>doesNotUnderstand: #do:
ByteString(Collection)>>removeAll:
GemTDParser>>parseString
GemTDParser>>parseKeyValue
GemTDParser>>parse:
[ :id | 
GemTDParser new
	parse:
		('resource/' , id) asFileReference readStream binary contents asString
			readStream ] in GemTDImporter>>importResources
Array(SequenceableCollection)>>collect:
GemTDImporter>>importResources
GemTDImporter>>importAll
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
26 January 2018 4:55:45.533536 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDBaseTower(GemTDElement)>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		enName: 	nil
		schName: 	nil
		tchName: 	nil
		abilities: 	nil


GemTDBaseTower(GemTDTower)>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		enName: 	nil
		schName: 	nil
		tchName: 	nil
		abilities: 	nil


GemTDBaseTower>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		enName: 	nil
		schName: 	nil
		tchName: 	nil
		abilities: 	nil


GemTDBaseTower class(GemTDElement class)>>newFrom:with:importer:
	Receiver: GemTDBaseTower
	Arguments and temporary variables: 
		codeName: 	'gemtd_g11111'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		superclass: 	GemTDTower
		methodDict: 	a MethodDictionary(#importWith:importer:->GemTDBaseTower>>#importWi...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#GemTDBaseTower
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GemTD-Analysis'
		traitComposition: 	{}
		localSelectors: 	nil


[ :u :details | 
| cls |
cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
	ifTrue: [ u last = $1
			ifTrue: [ GemTDBaseTower ]
			ifFalse: [ GemTDAdvancedTower ] ]
	ifFalse: [ GemTDCreep ].
units := cls newFrom: u with: details importer: importer ] in GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		units: 	nil
		u: 	'gemtd_g11111'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		cls: 	GemTDBaseTower
	Receiver's instance variables: 
		importer: 	a GemTDImporter


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
cls := ((details at: 'Model') beginsWith: 'mod...etc...
		assoc: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'-...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
cls := ((details at: 'Model') beginsWith: 'mod...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		units: 	nil
	Receiver's instance variables: 
		importer: 	a GemTDImporter


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(795947008))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(344.0@59.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(991301376))(a DropList...etc...
		lastStepTime: 	1599756
		lastStepMessage: 	nil
		lastCycleTime: 	1599779
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1599756
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(991301376))(a DropList...etc...
		lastStepTime: 	1599756
		lastStepMessage: 	nil
		lastCycleTime: 	1599779
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1599756
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(991301376))(a DropList...etc...
		lastStepTime: 	1599756
		lastStepMessage: 	nil
		lastCycleTime: 	1599779
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1599756
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDBaseTower(GemTDElement)>>importWith:importer:
GemTDBaseTower(GemTDTower)>>importWith:importer:
GemTDBaseTower>>importWith:importer:
GemTDBaseTower class(GemTDElement class)>>newFrom:with:importer:
[ :u :details | 
| cls |
cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
	ifTrue: [ u last = $1
			ifTrue: [ GemTDBaseTower ]
			ifFalse: [ GemTDAdvancedTower ] ]
	ifFalse: [ GemTDCreep ].
units := cls newFrom: u with: details importer: importer ] in GemTDGod>>generate
[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>keysAndValuesDo:
GemTDGod>>generate
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
26 January 2018 4:57:40.232255 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDBaseTower(GemTDElement)>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		enName: 	nil
		schName: 	nil
		tchName: 	nil
		abilities: 	nil


GemTDBaseTower(GemTDTower)>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		enName: 	nil
		schName: 	nil
		tchName: 	nil
		abilities: 	nil


GemTDBaseTower>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		enName: 	nil
		schName: 	nil
		tchName: 	nil
		abilities: 	nil


GemTDBaseTower class(GemTDElement class)>>newFrom:with:importer:
	Receiver: GemTDBaseTower
	Arguments and temporary variables: 
		codeName: 	'gemtd_g11111'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		superclass: 	GemTDTower
		methodDict: 	a MethodDictionary(#importWith:importer:->GemTDBaseTower>>#importWi...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#GemTDBaseTower
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GemTD-Analysis'
		traitComposition: 	{}
		localSelectors: 	nil


[ :u :details | 
| cls |
cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
	ifTrue: [ u last = $1
			ifTrue: [ GemTDBaseTower ]
			ifFalse: [ GemTDAdvancedTower ] ]
	ifFalse: [ GemTDCreep ].
units := cls newFrom: u with: details importer: importer ] in GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		units: 	nil
		u: 	'gemtd_g11111'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		cls: 	GemTDBaseTower
	Receiver's instance variables: 
		importer: 	a GemTDImporter


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
cls := ((details at: 'Model') beginsWith: 'mod...etc...
		assoc: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'-...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
cls := ((details at: 'Model') beginsWith: 'mod...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		units: 	nil
	Receiver's instance variables: 
		importer: 	a GemTDImporter


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(584683264))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(199.0@70.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(392155648))(a GLMSys...etc...
		lastStepTime: 	1714366
		lastStepMessage: 	nil
		lastCycleTime: 	1714388
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1714366
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a GL...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(392155648))(a GLMSys...etc...
		lastStepTime: 	1714366
		lastStepMessage: 	nil
		lastCycleTime: 	1714388
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1714366
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(392155648))(a GLMSys...etc...
		lastStepTime: 	1714366
		lastStepMessage: 	nil
		lastCycleTime: 	1714388
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1714366
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a GL...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDBaseTower(GemTDElement)>>importWith:importer:
GemTDBaseTower(GemTDTower)>>importWith:importer:
GemTDBaseTower>>importWith:importer:
GemTDBaseTower class(GemTDElement class)>>newFrom:with:importer:
[ :u :details | 
| cls |
cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
	ifTrue: [ u last = $1
			ifTrue: [ GemTDBaseTower ]
			ifFalse: [ GemTDAdvancedTower ] ]
	ifFalse: [ GemTDCreep ].
units := cls newFrom: u with: details importer: importer ] in GemTDGod>>generate
[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>keysAndValuesDo:
GemTDGod>>generate
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of SmallInteger are not indexable
26 January 2018 5:03:36.83595 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

SmallInteger(Object)>>error:
	Receiver: 1
	Arguments and temporary variables: 
		aString: 	'Instances of SmallInteger are not indexable'
	Receiver's instance variables: 
1

SmallInteger(Object)>>errorNotIndexable
	Receiver: 1
	Arguments and temporary variables: 

	Receiver's instance variables: 
1

SmallInteger(Object)>>size
	Receiver: 1
	Arguments and temporary variables: 

	Receiver's instance variables: 
1

ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: 'Ability'
	Arguments and temporary variables: 
		start: 	8
		stop: 	7
		replacementCollection: 	1
		newSequenceableCollection: 	nil
		newSize: 	nil
		endReplacement: 	nil
	Receiver's instance variables: 
'Ability'

ByteString(SequenceableCollection)>>,
	Receiver: 'Ability'
	Arguments and temporary variables: 
		otherCollection: 	1
	Receiver's instance variables: 
'Ability'

GemTDBaseTower(GemTDElement)>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
		ab: 	nil
		i: 	1
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		name: 	a Dictionary(#en->'perfect emerald/G5' #sch->'[váà/G5' #tch->'[...etc...
		abilities: 	an OrderedCollection()
		hiddenAbilities: 	nil


GemTDBaseTower(GemTDTower)>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		name: 	a Dictionary(#en->'perfect emerald/G5' #sch->'[váà/G5' #tch->'[...etc...
		abilities: 	an OrderedCollection()
		hiddenAbilities: 	nil


GemTDBaseTower>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		name: 	a Dictionary(#en->'perfect emerald/G5' #sch->'[váà/G5' #tch->'[...etc...
		abilities: 	an OrderedCollection()
		hiddenAbilities: 	nil


GemTDBaseTower class(GemTDElement class)>>newFrom:with:importer:
	Receiver: GemTDBaseTower
	Arguments and temporary variables: 
		codeName: 	'gemtd_g11111'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		superclass: 	GemTDTower
		methodDict: 	a MethodDictionary(#importWith:importer:->GemTDBaseTower>>#importWi...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#GemTDBaseTower
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GemTD-Analysis'
		traitComposition: 	{}
		localSelectors: 	nil


[ :u :details | 
| cls |
cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
	ifTrue: [ u last = $1
			ifTrue: [ GemTDBaseTower ]
			ifFalse: [ GemTDAdvancedTower ] ]
	ifFalse: [ GemTDCreep ].
units := cls newFrom: u with: details importer: importer ] in GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		units: 	nil
		u: 	'gemtd_g11111'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		cls: 	GemTDBaseTower
	Receiver's instance variables: 
		importer: 	a GemTDImporter


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
cls := ((details at: 'Model') beginsWith: 'mod...etc...
		assoc: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'-...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
cls := ((details at: 'Model') beginsWith: 'mod...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		units: 	nil
	Receiver's instance variables: 
		importer: 	a GemTDImporter


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(364443136))(a DropList...etc...
		lastStepTime: 	2071170
		lastStepMessage: 	nil
		lastCycleTime: 	2071191
		alarms: 	a Heap()
		lastAlarmTime: 	2071170
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a NautilusWindow(543520000) a GLM...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(364443136))(a DropList...etc...
		lastStepTime: 	2071170
		lastStepMessage: 	nil
		lastCycleTime: 	2071191
		alarms: 	a Heap()
		lastAlarmTime: 	2071170
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(364443136))(a DropList...etc...
		lastStepTime: 	2071170
		lastStepMessage: 	nil
		lastCycleTime: 	2071191
		alarms: 	a Heap()
		lastAlarmTime: 	2071170
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a NautilusWindow(543520000) a GLM...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>error:
SmallInteger(Object)>>errorNotIndexable
SmallInteger(Object)>>size
ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
ByteString(SequenceableCollection)>>,
GemTDBaseTower(GemTDElement)>>importWith:importer:
GemTDBaseTower(GemTDTower)>>importWith:importer:
GemTDBaseTower>>importWith:importer:
GemTDBaseTower class(GemTDElement class)>>newFrom:with:importer:
[ :u :details | 
| cls |
cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
	ifTrue: [ u last = $1
			ifTrue: [ GemTDBaseTower ]
			ifFalse: [ GemTDAdvancedTower ] ]
	ifFalse: [ GemTDCreep ].
units := cls newFrom: u with: details importer: importer ] in GemTDGod>>generate
[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>keysAndValuesDo:
GemTDGod>>generate
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: only integers should be used as indices
26 January 2018 5:03:54.072867 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

ByteString(Object)>>error:
	Receiver: '1'
	Arguments and temporary variables: 
		aString: 	'only integers should be used as indices'
	Receiver's instance variables: 
'1'

ByteString(Object)>>errorNonIntegerIndex
	Receiver: '1'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'1'

ByteString(Object)>>at:
	Receiver: '1'
	Arguments and temporary variables: 
		index: 	'Model'
	Receiver's instance variables: 
'1'

ByteString>>at:
	Receiver: '1'
	Arguments and temporary variables: 
		index: 	'Model'
	Receiver's instance variables: 
'1'

[ :u :details | 
| cls |
cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
	ifTrue: [ u last = $1
			ifTrue: [ GemTDBaseTower ]
			ifFalse: [ GemTDAdvancedTower ] ]
	ifFalse: [ GemTDCreep ].
units := cls newFrom: u with: details importer: importer ] in GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		units: 	a GemTDBaseTower
		u: 	'Version'
		details: 	'1'
		cls: 	nil
	Receiver's instance variables: 
		importer: 	a GemTDImporter


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
cls := ((details at: 'Model') beginsWith: 'mod...etc...
		assoc: 	'Version'->'1'
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'Version'->'1'
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	252
	Receiver's instance variables: 
an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
cls := ((details at: 'Model') beginsWith: 'mod...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		units: 	a GemTDBaseTower
	Receiver's instance variables: 
		importer: 	a GemTDImporter


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(238215168))(a SearchMorp...etc...
		lastStepTime: 	2088408
		lastStepMessage: 	nil
		lastCycleTime: 	2088431
		alarms: 	a Heap()
		lastAlarmTime: 	2088408
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a NautilusWindow(543520000) a GLM...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(238215168))(a SearchMorp...etc...
		lastStepTime: 	2088408
		lastStepMessage: 	nil
		lastCycleTime: 	2088431
		alarms: 	a Heap()
		lastAlarmTime: 	2088408
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(238215168))(a SearchMorp...etc...
		lastStepTime: 	2088408
		lastStepMessage: 	nil
		lastCycleTime: 	2088431
		alarms: 	a Heap()
		lastAlarmTime: 	2088408
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a NautilusWindow(543520000) a GLM...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
ByteString(Object)>>error:
ByteString(Object)>>errorNonIntegerIndex
ByteString(Object)>>at:
ByteString>>at:
[ :u :details | 
| cls |
cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
	ifTrue: [ u last = $1
			ifTrue: [ GemTDBaseTower ]
			ifFalse: [ GemTDAdvancedTower ] ]
	ifFalse: [ GemTDCreep ].
units := cls newFrom: u with: details importer: importer ] in GemTDGod>>generate
[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>keysAndValuesDo:
GemTDGod>>generate
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #name
26 January 2018 5:05:12.893422 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #name
	Receiver: 'gemtd_g11111'
	Arguments and temporary variables: 
		aMessage: 	name
		exception: 	MessageNotUnderstood: ByteString>>name
		resumeValue: 	nil
	Receiver's instance variables: 
'gemtd_g11111'

[ :u :details | 
| cls |
(u name beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		units: 	an OrderedCollection()
		u: 	'gemtd_g11111'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		cls: 	nil
	Receiver's instance variables: 
		importer: 	a GemTDImporter


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u name beginsWith: 'gemtd')
	ifTrue: [ cls :=...etc...
		assoc: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'-...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u name beginsWith: 'gemtd')
	ifTrue: [ cls :=...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		units: 	an OrderedCollection()
	Receiver's instance variables: 
		importer: 	a GemTDImporter


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(593163264))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(251.0@64.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(592563200))(a GLMSys...etc...
		lastStepTime: 	2167114
		lastStepMessage: 	nil
		lastCycleTime: 	2167136
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2167114
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a GL...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(592563200))(a GLMSys...etc...
		lastStepTime: 	2167114
		lastStepMessage: 	nil
		lastCycleTime: 	2167136
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2167114
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(592563200))(a GLMSys...etc...
		lastStepTime: 	2167114
		lastStepMessage: 	nil
		lastCycleTime: 	2167136
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2167114
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a GL...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #name
[ :u :details | 
| cls |
(u name beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>keysAndValuesDo:
GemTDGod>>generate
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
26 January 2018 5:05:40.308838 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(825128960))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(217.0@46.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(592563200))(a GLMSys...etc...
		lastStepTime: 	2194531
		lastStepMessage: 	nil
		lastCycleTime: 	2194554
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2194531
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a GL...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(592563200))(a GLMSys...etc...
		lastStepTime: 	2194531
		lastStepMessage: 	nil
		lastCycleTime: 	2194554
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2194531
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(592563200))(a GLMSys...etc...
		lastStepTime: 	2194531
		lastStepMessage: 	nil
		lastCycleTime: 	2194554
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2194531
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a GL...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
26 January 2018 5:05:52.988801 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(627307520))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(239.0@72.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(592563200))(a GLMSys...etc...
		lastStepTime: 	2207210
		lastStepMessage: 	nil
		lastCycleTime: 	2207231
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2207210
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a GL...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(592563200))(a GLMSys...etc...
		lastStepTime: 	2207210
		lastStepMessage: 	nil
		lastCycleTime: 	2207231
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2207210
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(592563200))(a GLMSys...etc...
		lastStepTime: 	2207210
		lastStepMessage: 	nil
		lastCycleTime: 	2207231
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2207210
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a GL...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
26 January 2018 5:06:53.340388 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDBaseTower(GemTDTower)>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		name: 	a Dictionary(#en->'perfect emerald/G5' #sch->'[váà/G5' #tch->'[...etc...
		abilities: 	an OrderedCollection([ GemTDAbility newFrom: ab importer: importer ]...etc...
		hiddenAbilities: 	an OrderedCollection()


GemTDBaseTower>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		name: 	a Dictionary(#en->'perfect emerald/G5' #sch->'[váà/G5' #tch->'[...etc...
		abilities: 	an OrderedCollection([ GemTDAbility newFrom: ab importer: importer ]...etc...
		hiddenAbilities: 	an OrderedCollection()


GemTDBaseTower class(GemTDElement class)>>newFrom:with:importer:
	Receiver: GemTDBaseTower
	Arguments and temporary variables: 
		codeName: 	'gemtd_g11111'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		superclass: 	GemTDTower
		methodDict: 	a MethodDictionary(#importWith:importer:->GemTDBaseTower>>#importWi...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#GemTDBaseTower
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GemTD-Analysis'
		traitComposition: 	{}
		localSelectors: 	nil


[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		u: 	'gemtd_g11111'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		cls: 	GemTDBaseTower
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection()


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
		assoc: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'-...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection()


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection()


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(923643648))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(188.0@88.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	2267556
		lastStepMessage: 	nil
		lastCycleTime: 	2267577
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2267556
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	2267556
		lastStepMessage: 	nil
		lastCycleTime: 	2267577
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2267556
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	2267556
		lastStepMessage: 	nil
		lastCycleTime: 	2267577
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2267556
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDBaseTower(GemTDTower)>>importWith:importer:
GemTDBaseTower>>importWith:importer:
GemTDBaseTower class(GemTDElement class)>>newFrom:with:importer:
[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>keysAndValuesDo:
GemTDGod>>generate
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
26 January 2018 5:08:55.464962 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDBaseTower>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		name: 	a Dictionary(#en->'perfect emerald/G5' #sch->'[váà/G5' #tch->'[...etc...
		abilities: 	an OrderedCollection([ GemTDAbility newFrom: ab importer: importer ]...etc...
		hiddenAbilities: 	an OrderedCollection()
		damage: 	'10'
		range: 	'500'
		rate: 	'1'
		projectileSpeed: 	'3000'
		picture: 	nil


GemTDBaseTower class(GemTDElement class)>>newFrom:with:importer:
	Receiver: GemTDBaseTower
	Arguments and temporary variables: 
		codeName: 	'gemtd_g11111'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		superclass: 	GemTDTower
		methodDict: 	a MethodDictionary(#importWith:importer:->GemTDBaseTower>>#importWi...etc...
		format: 	65545
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#GemTDBaseTower
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GemTD-Analysis'
		traitComposition: 	{}
		localSelectors: 	nil


[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		u: 	'gemtd_g11111'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		cls: 	GemTDBaseTower
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection()


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
		assoc: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'-...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection()


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection()


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(347674112))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(176.0@75.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	2389686
		lastStepMessage: 	nil
		lastCycleTime: 	2389707
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2389686
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	2389686
		lastStepMessage: 	nil
		lastCycleTime: 	2389707
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2389686
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	2389686
		lastStepMessage: 	nil
		lastCycleTime: 	2389707
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2389686
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDBaseTower>>importWith:importer:
GemTDBaseTower class(GemTDElement class)>>newFrom:with:importer:
[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>keysAndValuesDo:
GemTDGod>>generate
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
26 January 2018 5:10:49.437212 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDAdvancedTower>>importWith:importer:
	Receiver: a GemTDAdvancedTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_huangcailanbaoshi'
		name: 	a Dictionary(#en->'yellow sapphire' #sch->'Äi_Ý[ów' #tch->'Ãi_Íö[ów'...etc...
		abilities: 	an OrderedCollection([ GemTDAbility newFrom: ab importer: importer ]...etc...
		hiddenAbilities: 	an OrderedCollection()
		damage: 	'20'
		range: 	'600'
		rate: 	'1'
		projectileSpeed: 	'3000'
		picture: 	nil


GemTDAdvancedTower class(GemTDElement class)>>newFrom:with:importer:
	Receiver: GemTDAdvancedTower
	Arguments and temporary variables: 
		codeName: 	'gemtd_huangcailanbaoshi'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		superclass: 	GemTDTower
		methodDict: 	a MethodDictionary(#importWith:importer:->GemTDAdvancedTower>>#impo...etc...
		format: 	65545
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#GemTDAdvancedTower
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GemTD-Analysis'
		traitComposition: 	{}
		localSelectors: 	nil


[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		u: 	'gemtd_huangcailanbaoshi'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		cls: 	GemTDAdvancedTower
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower)


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
		assoc: 	'gemtd_huangcailanbaoshi'->a Dictionary('Ability1'->'' 'Ability10'->'' '...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'gemtd_huangcailanbaoshi'->a Dictionary('Ability1'->'' 'Ability10'->'' 'A...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	10
	Receiver's instance variables: 
an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower)


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(124878848))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(314.0@71.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(104147456))(a DropList...etc...
		lastStepTime: 	2503654
		lastStepMessage: 	nil
		lastCycleTime: 	2503675
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2503654
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(104147456))(a DropList...etc...
		lastStepTime: 	2503654
		lastStepMessage: 	nil
		lastCycleTime: 	2503675
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2503654
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(104147456))(a DropList...etc...
		lastStepTime: 	2503654
		lastStepMessage: 	nil
		lastCycleTime: 	2503675
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2503654
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDAdvancedTower>>importWith:importer:
GemTDAdvancedTower class(GemTDElement class)>>newFrom:with:importer:
[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>keysAndValuesDo:
GemTDGod>>generate
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
26 January 2018 5:11:26.26415 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(186440448))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(456.0@120.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	2540482
		lastStepMessage: 	nil
		lastCycleTime: 	2540505
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2540482
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a GL...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	2540482
		lastStepMessage: 	nil
		lastCycleTime: 	2540505
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2540482
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	2540482
		lastStepMessage: 	nil
		lastCycleTime: 	2540505
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2540482
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a GL...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of GemTDAbility class did not understand #newFrom:importer:
26 January 2018 5:12:25.975714 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDAbility class(Object)>>doesNotUnderstand: #newFrom:importer:
	Receiver: GemTDAbility
	Arguments and temporary variables: 
		aMessage: 	newFrom: 'tower_du5' importer: a GemTDImporter
		exception: 	MessageNotUnderstood: GemTDAbility class>>newFrom:importer:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	GemTDElement
		methodDict: 	a MethodDictionary()
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#GemTDAbility
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GemTD-Analysis'
		traitComposition: 	{}
		localSelectors: 	nil


GemTDBaseTower(GemTDElement)>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
		i: 	8
		ab: 	'tower_du5'
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		name: 	a Dictionary(#en->'perfect emerald/G5' #sch->'[váà/G5' #tch->'[...etc...
		abilities: 	an OrderedCollection()
		hiddenAbilities: 	nil
		damage: 	nil
		range: 	nil
		rate: 	nil
		projectileSpeed: 	nil
		picture: 	nil


GemTDBaseTower(GemTDTower)>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		name: 	a Dictionary(#en->'perfect emerald/G5' #sch->'[váà/G5' #tch->'[...etc...
		abilities: 	an OrderedCollection()
		hiddenAbilities: 	nil
		damage: 	nil
		range: 	nil
		rate: 	nil
		projectileSpeed: 	nil
		picture: 	nil


GemTDBaseTower>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		name: 	a Dictionary(#en->'perfect emerald/G5' #sch->'[váà/G5' #tch->'[...etc...
		abilities: 	an OrderedCollection()
		hiddenAbilities: 	nil
		damage: 	nil
		range: 	nil
		rate: 	nil
		projectileSpeed: 	nil
		picture: 	nil


GemTDBaseTower class(GemTDElement class)>>newFrom:with:importer:
	Receiver: GemTDBaseTower
	Arguments and temporary variables: 
		codeName: 	'gemtd_g11111'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		superclass: 	GemTDTower
		methodDict: 	a MethodDictionary(#importWith:importer:->GemTDBaseTower>>#importWi...etc...
		format: 	65545
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#GemTDBaseTower
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GemTD-Analysis'
		traitComposition: 	{}
		localSelectors: 	nil


[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		u: 	'gemtd_g11111'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		cls: 	GemTDBaseTower
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection()


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
		assoc: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'-...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection()


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection()


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(632783360))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(176.0@40.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	2600153
		lastStepMessage: 	nil
		lastCycleTime: 	2600175
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2600153
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	2600153
		lastStepMessage: 	nil
		lastCycleTime: 	2600175
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2600153
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	2600153
		lastStepMessage: 	nil
		lastCycleTime: 	2600175
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2600153
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDAbility class(Object)>>doesNotUnderstand: #newFrom:importer:
GemTDBaseTower(GemTDElement)>>importWith:importer:
GemTDBaseTower(GemTDTower)>>importWith:importer:
GemTDBaseTower>>importWith:importer:
GemTDBaseTower class(GemTDElement class)>>newFrom:with:importer:
[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>keysAndValuesDo:
GemTDGod>>generate
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of GemTDAbility did not understand #importWith:
26 January 2018 5:13:06.981684 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDAbility(Object)>>doesNotUnderstand: #importWith:
	Receiver: a GemTDAbility
	Arguments and temporary variables: 
		aMessage: 	importWith: a GemTDImporter
		exception: 	MessageNotUnderstood: GemTDAbility>>importWith:
		resumeValue: 	nil
	Receiver's instance variables: 
		codeName: 	'tower_du5'
		name: 	nil
		abilities: 	nil
		hiddenAbilities: 	nil
		tooltip: 	nil


GemTDAbility class>>newFrom:importer:
	Receiver: GemTDAbility
	Arguments and temporary variables: 
		codeName: 	'tower_du5'
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		superclass: 	GemTDElement
		methodDict: 	a MethodDictionary()
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#GemTDAbility
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GemTD-Analysis'
		traitComposition: 	{}
		localSelectors: 	nil


GemTDBaseTower(GemTDElement)>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
		i: 	8
		ab: 	'tower_du5'
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		name: 	a Dictionary(#en->'perfect emerald/G5' #sch->'[váà/G5' #tch->'[...etc...
		abilities: 	an OrderedCollection()
		hiddenAbilities: 	nil
		damage: 	nil
		range: 	nil
		rate: 	nil
		projectileSpeed: 	nil
		picture: 	nil


GemTDBaseTower(GemTDTower)>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		name: 	a Dictionary(#en->'perfect emerald/G5' #sch->'[váà/G5' #tch->'[...etc...
		abilities: 	an OrderedCollection()
		hiddenAbilities: 	nil
		damage: 	nil
		range: 	nil
		rate: 	nil
		projectileSpeed: 	nil
		picture: 	nil


GemTDBaseTower>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		name: 	a Dictionary(#en->'perfect emerald/G5' #sch->'[váà/G5' #tch->'[...etc...
		abilities: 	an OrderedCollection()
		hiddenAbilities: 	nil
		damage: 	nil
		range: 	nil
		rate: 	nil
		projectileSpeed: 	nil
		picture: 	nil


GemTDBaseTower class(GemTDElement class)>>newFrom:with:importer:
	Receiver: GemTDBaseTower
	Arguments and temporary variables: 
		codeName: 	'gemtd_g11111'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		superclass: 	GemTDTower
		methodDict: 	a MethodDictionary(#importWith:importer:->GemTDBaseTower>>#importWi...etc...
		format: 	65545
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#GemTDBaseTower
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GemTD-Analysis'
		traitComposition: 	{}
		localSelectors: 	nil


[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		u: 	'gemtd_g11111'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		cls: 	GemTDBaseTower
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection()


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
		assoc: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'-...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection()


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection()


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(809330688))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(249.0@42.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	2641199
		lastStepMessage: 	nil
		lastCycleTime: 	2641220
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2641199
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	2641199
		lastStepMessage: 	nil
		lastCycleTime: 	2641220
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2641199
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	2641199
		lastStepMessage: 	nil
		lastCycleTime: 	2641220
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2641199
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDAbility(Object)>>doesNotUnderstand: #importWith:
GemTDAbility class>>newFrom:importer:
GemTDBaseTower(GemTDElement)>>importWith:importer:
GemTDBaseTower(GemTDTower)>>importWith:importer:
GemTDBaseTower>>importWith:importer:
GemTDBaseTower class(GemTDElement class)>>newFrom:with:importer:
[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>keysAndValuesDo:
GemTDGod>>generate
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
26 January 2018 5:14:15.917298 pm

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDAbility>>importWith:
	Receiver: a GemTDAbility
	Arguments and temporary variables: 
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'tower_du5'
		name: 	nil
		abilities: 	nil
		hiddenAbilities: 	nil
		tooltip: 	nil


GemTDAbility class>>newFrom:importer:
	Receiver: GemTDAbility
	Arguments and temporary variables: 
		codeName: 	'tower_du5'
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		superclass: 	GemTDElement
		methodDict: 	a MethodDictionary(#importWith:->GemTDAbility>>#importWith: )
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#GemTDAbility
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GemTD-Analysis'
		traitComposition: 	{}
		localSelectors: 	nil


GemTDBaseTower(GemTDElement)>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
		i: 	8
		ab: 	'tower_du5'
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		name: 	a Dictionary(#en->'perfect emerald/G5' #sch->'[váà/G5' #tch->'[...etc...
		abilities: 	an OrderedCollection()
		hiddenAbilities: 	nil
		damage: 	nil
		range: 	nil
		rate: 	nil
		projectileSpeed: 	nil
		picture: 	nil


GemTDBaseTower(GemTDTower)>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		name: 	a Dictionary(#en->'perfect emerald/G5' #sch->'[váà/G5' #tch->'[...etc...
		abilities: 	an OrderedCollection()
		hiddenAbilities: 	nil
		damage: 	nil
		range: 	nil
		rate: 	nil
		projectileSpeed: 	nil
		picture: 	nil


GemTDBaseTower>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		name: 	a Dictionary(#en->'perfect emerald/G5' #sch->'[váà/G5' #tch->'[...etc...
		abilities: 	an OrderedCollection()
		hiddenAbilities: 	nil
		damage: 	nil
		range: 	nil
		rate: 	nil
		projectileSpeed: 	nil
		picture: 	nil


GemTDBaseTower class(GemTDElement class)>>newFrom:with:importer:
	Receiver: GemTDBaseTower
	Arguments and temporary variables: 
		codeName: 	'gemtd_g11111'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		superclass: 	GemTDTower
		methodDict: 	a MethodDictionary(#importWith:importer:->GemTDBaseTower>>#importWi...etc...
		format: 	65545
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#GemTDBaseTower
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GemTD-Analysis'
		traitComposition: 	{}
		localSelectors: 	nil


[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		u: 	'gemtd_g11111'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		cls: 	GemTDBaseTower
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection()


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
		assoc: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'-...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection()


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection()


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(704633600))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(43.0@97.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	2710038
		lastStepMessage: 	nil
		lastCycleTime: 	2710061
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2710038
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	2710038
		lastStepMessage: 	nil
		lastCycleTime: 	2710061
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2710038
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@1075)
		canvas: 	a FormCanvas on: DisplayScreen(1512x1075x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	2710038
		lastStepMessage: 	nil
		lastCycleTime: 	2710061
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2710038
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@1075)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@1075)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDAbility>>importWith:
GemTDAbility class>>newFrom:importer:
GemTDBaseTower(GemTDElement)>>importWith:importer:
GemTDBaseTower(GemTDTower)>>importWith:importer:
GemTDBaseTower>>importWith:importer:
GemTDBaseTower class(GemTDElement class)>>newFrom:with:importer:
[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>keysAndValuesDo:
GemTDGod>>generate
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Dictionary class did not understand #s
27 January 2018 10:22:24.411514 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

Dictionary class(Object)>>doesNotUnderstand: #s
	Receiver: Dictionary
	Arguments and temporary variables: 
		aMessage: 	s
		exception: 	MessageNotUnderstood: Dictionary class>>s
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	HashedCollection
		methodDict: 	a MethodDictionary(#=->Dictionary>>#= #add:->Dictionary>>#add: #add...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{WeakKeyDictionary. IdentityDictionary. KeyedTree. MethodDictionary...etc...
		name: 	#Dictionary
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Unordered'
		traitComposition: 	{}
		localSelectors: 	nil


GemTDAbility>>importWith:
	Receiver: a GemTDAbility
	Arguments and temporary variables: 
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'tower_du5'
		name: 	nil
		abilities: 	nil
		hiddenAbilities: 	nil
		tooltip: 	nil


GemTDAbility class>>newFrom:importer:
	Receiver: GemTDAbility
	Arguments and temporary variables: 
		codeName: 	'tower_du5'
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		superclass: 	GemTDElement
		methodDict: 	a MethodDictionary(#importWith:->GemTDAbility>>#importWith: )
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#GemTDAbility
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GemTD-Analysis'
		traitComposition: 	{}
		localSelectors: 	nil


GemTDBaseTower(GemTDElement)>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
		i: 	8
		ab: 	'tower_du5'
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		name: 	a Dictionary(#en->'perfect emerald/G5' #sch->'[váà/G5' #tch->'[...etc...
		abilities: 	an OrderedCollection()
		hiddenAbilities: 	nil
		damage: 	nil
		range: 	nil
		rate: 	nil
		projectileSpeed: 	nil
		picture: 	nil


GemTDBaseTower(GemTDTower)>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		name: 	a Dictionary(#en->'perfect emerald/G5' #sch->'[váà/G5' #tch->'[...etc...
		abilities: 	an OrderedCollection()
		hiddenAbilities: 	nil
		damage: 	nil
		range: 	nil
		rate: 	nil
		projectileSpeed: 	nil
		picture: 	nil


GemTDBaseTower>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		name: 	a Dictionary(#en->'perfect emerald/G5' #sch->'[váà/G5' #tch->'[...etc...
		abilities: 	an OrderedCollection()
		hiddenAbilities: 	nil
		damage: 	nil
		range: 	nil
		rate: 	nil
		projectileSpeed: 	nil
		picture: 	nil


GemTDBaseTower class(GemTDElement class)>>newFrom:with:importer:
	Receiver: GemTDBaseTower
	Arguments and temporary variables: 
		codeName: 	'gemtd_g11111'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		superclass: 	GemTDTower
		methodDict: 	a MethodDictionary(#importWith:importer:->GemTDBaseTower>>#importWi...etc...
		format: 	65545
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#GemTDBaseTower
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GemTD-Analysis'
		traitComposition: 	{}
		localSelectors: 	nil


[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		u: 	'gemtd_g11111'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		cls: 	GemTDBaseTower
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection()


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
		assoc: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'-...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection()


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection()


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(4579584))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(298.0@107.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	2593
		lastStepMessage: 	nil
		lastCycleTime: 	2624
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2593
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a GL...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	2593
		lastStepMessage: 	nil
		lastCycleTime: 	2624
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2593
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	2593
		lastStepMessage: 	nil
		lastCycleTime: 	2624
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	2593
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a GL...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Dictionary class(Object)>>doesNotUnderstand: #s
GemTDAbility>>importWith:
GemTDAbility class>>newFrom:importer:
GemTDBaseTower(GemTDElement)>>importWith:importer:
GemTDBaseTower(GemTDTower)>>importWith:importer:
GemTDBaseTower>>importWith:importer:
GemTDBaseTower class(GemTDElement class)>>newFrom:with:importer:
[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>keysAndValuesDo:
GemTDGod>>generate
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
27 January 2018 10:22:31.444169 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(4579584))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(298.0@107.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(351053312))(a SearchMorp...etc...
		lastStepTime: 	9762
		lastStepMessage: 	nil
		lastCycleTime: 	9784
		alarms: 	a Heap()
		lastAlarmTime: 	9762
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a GL...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(351053312))(a SearchMorp...etc...
		lastStepTime: 	9762
		lastStepMessage: 	nil
		lastCycleTime: 	9784
		alarms: 	a Heap()
		lastAlarmTime: 	9762
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(351053312))(a SearchMorp...etc...
		lastStepTime: 	9762
		lastStepMessage: 	nil
		lastCycleTime: 	9784
		alarms: 	a Heap()
		lastAlarmTime: 	9762
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a GL...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of GemTDGod did not understand #exportBaseTowers
27 January 2018 10:24:26.59684 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDGod(Object)>>doesNotUnderstand: #exportBaseTowers
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		aMessage: 	exportBaseTowers
		exception: 	MessageNotUnderstood: GemTDGod>>exportBaseTowers
		resumeValue: 	nil
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(4579584))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(298.0@107.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	124807
		lastStepMessage: 	nil
		lastCycleTime: 	124829
		alarms: 	a Heap()
		lastAlarmTime: 	124807
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a GL...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	124807
		lastStepMessage: 	nil
		lastCycleTime: 	124829
		alarms: 	a Heap()
		lastAlarmTime: 	124807
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	124807
		lastStepMessage: 	nil
		lastCycleTime: 	124829
		alarms: 	a Heap()
		lastAlarmTime: 	124807
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a GL...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDGod(Object)>>doesNotUnderstand: #exportBaseTowers
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
27 January 2018 10:34:33.599874 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDBaseTower>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		name: 	a Dictionary(#en->'perfect emerald/G5' #sch->'[váà/G5' #tch->'[...etc...
		abilities: 	an OrderedCollection(a GemTDAbility)
		hiddenAbilities: 	an OrderedCollection()
		damage: 	'10'
		range: 	'500'
		rate: 	'1'
		projectileSpeed: 	'3000'
		picture: 	nil


GemTDBaseTower class(GemTDElement class)>>newFrom:with:importer:
	Receiver: GemTDBaseTower
	Arguments and temporary variables: 
		codeName: 	'gemtd_g11111'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		superclass: 	GemTDTower
		methodDict: 	a MethodDictionary(#importWith:importer:->GemTDBaseTower>>#importWi...etc...
		format: 	65545
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#GemTDBaseTower
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GemTD-Analysis'
		traitComposition: 	{}
		localSelectors: 	nil


[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		u: 	'gemtd_g11111'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		cls: 	GemTDBaseTower
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection()


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
		assoc: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'-...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection()


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection()


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(188699392))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(3.0@70.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(712419584))(a DropList...etc...
		lastStepTime: 	731715
		lastStepMessage: 	nil
		lastCycleTime: 	731736
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	731715
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a GL...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(712419584))(a DropList...etc...
		lastStepTime: 	731715
		lastStepMessage: 	nil
		lastCycleTime: 	731736
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	731715
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(712419584))(a DropList...etc...
		lastStepTime: 	731715
		lastStepMessage: 	nil
		lastCycleTime: 	731736
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	731715
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a GL...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDBaseTower>>importWith:importer:
GemTDBaseTower class(GemTDElement class)>>newFrom:with:importer:
[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>keysAndValuesDo:
GemTDGod>>generate
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
27 January 2018 10:36:12.852225 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDGod>>exportBaseTowers
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		s: 	a WriteStream
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(229046272))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(122.0@97.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(392155648))(a GLMSys...etc...
		lastStepTime: 	831055
		lastStepMessage: 	nil
		lastCycleTime: 	831077
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	831055
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a GL...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(392155648))(a GLMSys...etc...
		lastStepTime: 	831055
		lastStepMessage: 	nil
		lastCycleTime: 	831077
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	831055
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(392155648))(a GLMSys...etc...
		lastStepTime: 	831055
		lastStepMessage: 	nil
		lastCycleTime: 	831077
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	831055
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a GL...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDGod>>exportBaseTowers
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of GemTDGod did not understand #orderedBaseTowers
27 January 2018 10:36:49.808477 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDGod(Object)>>doesNotUnderstand: #orderedBaseTowers
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		aMessage: 	orderedBaseTowers
		exception: 	MessageNotUnderstood: GemTDGod>>orderedBaseTowers
		resumeValue: 	nil
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


GemTDGod>>exportBaseTowers
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		s: 	a WriteStream
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(229046272))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(122.0@97.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(104147456))(a DropList...etc...
		lastStepTime: 	868133
		lastStepMessage: 	nil
		lastCycleTime: 	868154
		alarms: 	a Heap()
		lastAlarmTime: 	868133
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a GL...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(104147456))(a DropList...etc...
		lastStepTime: 	868133
		lastStepMessage: 	nil
		lastCycleTime: 	868154
		alarms: 	a Heap()
		lastAlarmTime: 	868133
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(104147456))(a DropList...etc...
		lastStepTime: 	868133
		lastStepMessage: 	nil
		lastCycleTime: 	868154
		alarms: 	a Heap()
		lastAlarmTime: 	868133
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a GL...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDGod(Object)>>doesNotUnderstand: #orderedBaseTowers
GemTDGod>>exportBaseTowers
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of GemTDBaseTower are not indexable
27 January 2018 10:39:55.232444 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDBaseTower(Object)>>error:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		aString: 	'Instances of GemTDBaseTower are not indexable'
	Receiver's instance variables: 
		codeName: 	'gemtd_p1'
		name: 	a Dictionary(#en->'chipped amethyst/P1' #sch->'xÂv+}vf/P1' #tch->'xÂ...etc...
		abilities: 	an OrderedCollection(a GemTDAbility)
		hiddenAbilities: 	an OrderedCollection()
		damage: 	'2'
		range: 	'500'
		rate: 	'0.6'
		projectileSpeed: 	'3000'
		picture: 	'base/P'


GemTDBaseTower(Object)>>errorNotIndexable
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 

	Receiver's instance variables: 
		codeName: 	'gemtd_p1'
		name: 	a Dictionary(#en->'chipped amethyst/P1' #sch->'xÂv+}vf/P1' #tch->'xÂ...etc...
		abilities: 	an OrderedCollection(a GemTDAbility)
		hiddenAbilities: 	an OrderedCollection()
		damage: 	'2'
		range: 	'500'
		rate: 	'0.6'
		projectileSpeed: 	'3000'
		picture: 	'base/P'


GemTDBaseTower(Object)>>size
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 

	Receiver's instance variables: 
		codeName: 	'gemtd_p1'
		name: 	a Dictionary(#en->'chipped amethyst/P1' #sch->'xÂv+}vf/P1' #tch->'xÂ...etc...
		abilities: 	an OrderedCollection(a GemTDAbility)
		hiddenAbilities: 	an OrderedCollection()
		damage: 	'2'
		range: 	'500'
		rate: 	'0.6'
		projectileSpeed: 	'3000'
		picture: 	'base/P'


[ :a :b | 
"comp type B, G, etc."
(a codeName at: 7) = (b codeName at: 7)
	ifFalse: [ (a codeName at: 7) <= (b codeName at: 7) ]
	ifTrue: [ a size < b size ] ] in GemTDGod>>orderedBaseTowers
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		baseTowers: 	an OrderedCollection(a GemTDBaseTower a GemTDBaseTower a GemTDBaseT...etc...
		a: 	a GemTDBaseTower
		b: 	a GemTDBaseTower
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


Array(SequenceableCollection)>>mergeFirst:middle:last:into:by:
	Receiver: an Array(a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTo...etc...
	Arguments and temporary variables: 
		first: 	1
		middle: 	3
		last: 	6
		dst: 	an Array(a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTow...etc...
		aBlock: 	[ :a :b | 
"comp type B, G, etc."
(a codeName at: 7) = (b codeName at: ...etc...
		i1: 	2
		i2: 	4
		val1: 	a GemTDBaseTower
		val2: 	a GemTDBaseTower
		out: 	1
	Receiver's instance variables: 
an Array(a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTo...etc...

Array(SequenceableCollection)>>mergeSortFrom:to:src:dst:by:
	Receiver: an Array(a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTo...etc...
	Arguments and temporary variables: 
		first: 	1
		last: 	6
		src: 	an Array(a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTow...etc...
		dst: 	an Array(a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTow...etc...
		aBlock: 	[ :a :b | 
"comp type B, G, etc."
(a codeName at: 7) = (b codeName at: ...etc...
		middle: 	3
	Receiver's instance variables: 
an Array(a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTo...etc...

Array(SequenceableCollection)>>mergeSortFrom:to:src:dst:by:
	Receiver: an Array(a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTo...etc...
	Arguments and temporary variables: 
		first: 	1
		last: 	12
		src: 	an Array(a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTow...etc...
		dst: 	an Array(a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTow...etc...
		aBlock: 	[ :a :b | 
"comp type B, G, etc."
(a codeName at: 7) = (b codeName at: ...etc...
		middle: 	6
	Receiver's instance variables: 
an Array(a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTo...etc...

Array(SequenceableCollection)>>mergeSortFrom:to:src:dst:by:
	Receiver: an Array(a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTo...etc...
	Arguments and temporary variables: 
		first: 	1
		last: 	24
		src: 	an Array(a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTow...etc...
		dst: 	an Array(a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTow...etc...
		aBlock: 	[ :a :b | 
"comp type B, G, etc."
(a codeName at: 7) = (b codeName at: ...etc...
		middle: 	12
	Receiver's instance variables: 
an Array(a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTo...etc...

Array(SequenceableCollection)>>mergeSortFrom:to:src:dst:by:
	Receiver: an Array(a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTo...etc...
	Arguments and temporary variables: 
		first: 	1
		last: 	48
		src: 	an Array(a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTow...etc...
		dst: 	an Array(a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTow...etc...
		aBlock: 	[ :a :b | 
"comp type B, G, etc."
(a codeName at: 7) = (b codeName at: ...etc...
		middle: 	24
	Receiver's instance variables: 
an Array(a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTo...etc...

OrderedCollection>>sort:
	Receiver: an OrderedCollection(a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a...etc...
	Arguments and temporary variables: 
		aSortBlock: 	[ :a :b | 
"comp type B, G, etc."
(a codeName at: 7) = (b codeName ...etc...
	Receiver's instance variables: 
		array: 	an Array(a GemTDBaseTower a GemTDBaseTower a GemTDBaseTower a GemTDBaseT...etc...
		firstIndex: 	1
		lastIndex: 	48


GemTDGod>>orderedBaseTowers
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		baseTowers: 	an OrderedCollection(a GemTDBaseTower a GemTDBaseTower a GemTDBaseT...etc...
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


GemTDGod>>exportBaseTowers
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		s: 	a WriteStream
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(915617024))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(206.0@34.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	1053432
		lastStepMessage: 	nil
		lastCycleTime: 	1053453
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1053432
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	1053432
		lastStepMessage: 	nil
		lastCycleTime: 	1053453
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1053432
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	1053432
		lastStepMessage: 	nil
		lastCycleTime: 	1053453
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1053432
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDBaseTower(Object)>>error:
GemTDBaseTower(Object)>>errorNotIndexable
GemTDBaseTower(Object)>>size
[ :a :b | 
"comp type B, G, etc."
(a codeName at: 7) = (b codeName at: 7)
	ifFalse: [ (a codeName at: 7) <= (b codeName at: 7) ]
	ifTrue: [ a size < b size ] ] in GemTDGod>>orderedBaseTowers
Array(SequenceableCollection)>>mergeFirst:middle:last:into:by:
Array(SequenceableCollection)>>mergeSortFrom:to:src:dst:by:
Array(SequenceableCollection)>>mergeSortFrom:to:src:dst:by:
Array(SequenceableCollection)>>mergeSortFrom:to:src:dst:by:
Array(SequenceableCollection)>>mergeSortFrom:to:src:dst:by:
OrderedCollection>>sort:
GemTDGod>>orderedBaseTowers
GemTDGod>>exportBaseTowers
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
27 January 2018 10:40:06.322986 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDGod>>exportBaseTowers
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		s: 	a WriteStream
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(359805184))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(280.0@49.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(104147456))(a DropList...etc...
		lastStepTime: 	1064508
		lastStepMessage: 	nil
		lastCycleTime: 	1064530
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1064508
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(104147456))(a DropList...etc...
		lastStepTime: 	1064508
		lastStepMessage: 	nil
		lastCycleTime: 	1064530
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1064508
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(104147456))(a DropList...etc...
		lastStepTime: 	1064508
		lastStepMessage: 	nil
		lastCycleTime: 	1064530
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1064508
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDGod>>exportBaseTowers
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FileDoesNotExist: File @ /Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-Generation/export/baseTower.pillar
27 January 2018 10:42:37.058771 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

FileHandle>>streamError
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-...etc...
		writable: 	true
		id: 	nil


FileHandle>>writeStream
	Receiver: a FileHandle
	Arguments and temporary variables: 

	Receiver's instance variables: 
		reference: 	File @ /Users/clementbera/Desktop/Perso/GemTDWebsite/ecstatic/GemTD-...etc...
		writable: 	true
		id: 	nil


FileSystem>>writeStreamOn:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path * 'export' / 'baseTower.pillar'
	Receiver's instance variables: 
		store: 	a MacStore


FileReference>>writeStream
	Receiver: File @ export/baseTower.pillar
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path * 'export' / 'baseTower.pillar'


GemTDGod>>DoItIn:
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		ThisContext: 	GemTDGod>>exportBaseTowers
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoItIn: ThisContext
	^ 'export/baseTower.pillar' asFileReference writeStre...etc...
		source: 	a ReadStream
		context: 	GemTDGod>>exportBaseTowers
		receiver: 	a GemTDGod
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	a GemTDGod
		ctxt: 	GemTDGod>>exportBaseTowers
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(97166080)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(97166080)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoMethodRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoMethodRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(223892992)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(97166080)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (988@164)
		owner: 	a TransformWithLayoutMorph(984078592)
		submorphs: 	an Array(a RubPrimarySelectionMorph(513572096) a RubCursor(870780672...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (110499840) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(564387328)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(870780672)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(672541696))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoMethodRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoMethodRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(223892992)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(712419584))(a DropList...etc...
		lastStepTime: 	1215373
		lastStepMessage: 	nil
		lastCycleTime: 	1215394
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(870780672)))
		lastAlarmTime: 	1215373
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(293190144) a GL...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(712419584))(a DropList...etc...
		lastStepTime: 	1215373
		lastStepMessage: 	nil
		lastCycleTime: 	1215394
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(870780672)))
		lastAlarmTime: 	1215373
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(712419584))(a DropList...etc...
		lastStepTime: 	1215373
		lastStepMessage: 	nil
		lastCycleTime: 	1215394
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(870780672)))
		lastAlarmTime: 	1215373
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(293190144) a GL...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
FileHandle>>streamError
FileHandle>>writeStream
FileSystem>>writeStreamOn:
FileReference>>writeStream
GemTDGod>>DoItIn:
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoMethodRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoMethodRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
27 January 2018 10:45:02.712296 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDAbility>>importWith:
	Receiver: a GemTDAbility
	Arguments and temporary variables: 
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'tower_du5'
		name: 	a Dictionary()
		abilities: 	nil
		hiddenAbilities: 	nil
		tooltip: 	nil


GemTDAbility class>>newFrom:importer:
	Receiver: GemTDAbility
	Arguments and temporary variables: 
		codeName: 	'tower_du5'
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		superclass: 	GemTDElement
		methodDict: 	a MethodDictionary(#importWith:->GemTDAbility>>#importWith: #shortE...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#GemTDAbility
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GemTD-Analysis'
		traitComposition: 	{}
		localSelectors: 	nil


GemTDBaseTower(GemTDElement)>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
		i: 	8
		ab: 	'tower_du5'
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		name: 	a Dictionary(#en->'perfect emerald/G5' #sch->'[váà/G5' #tch->'[...etc...
		abilities: 	an OrderedCollection()
		hiddenAbilities: 	nil
		damage: 	nil
		range: 	nil
		rate: 	nil
		projectileSpeed: 	nil
		picture: 	nil


GemTDBaseTower(GemTDTower)>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		name: 	a Dictionary(#en->'perfect emerald/G5' #sch->'[váà/G5' #tch->'[...etc...
		abilities: 	an OrderedCollection()
		hiddenAbilities: 	nil
		damage: 	nil
		range: 	nil
		rate: 	nil
		projectileSpeed: 	nil
		picture: 	nil


GemTDBaseTower>>importWith:importer:
	Receiver: a GemTDBaseTower
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_g11111'
		name: 	a Dictionary(#en->'perfect emerald/G5' #sch->'[váà/G5' #tch->'[...etc...
		abilities: 	an OrderedCollection()
		hiddenAbilities: 	nil
		damage: 	nil
		range: 	nil
		rate: 	nil
		projectileSpeed: 	nil
		picture: 	nil


GemTDBaseTower class(GemTDElement class)>>newFrom:with:importer:
	Receiver: GemTDBaseTower
	Arguments and temporary variables: 
		codeName: 	'gemtd_g11111'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		superclass: 	GemTDTower
		methodDict: 	a MethodDictionary(#importWith:importer:->GemTDBaseTower>>#importWi...etc...
		format: 	65545
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#GemTDBaseTower
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GemTD-Analysis'
		traitComposition: 	{}
		localSelectors: 	nil


[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		u: 	'gemtd_g11111'
		details: 	a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' 'Ability12...etc...
		cls: 	GemTDBaseTower
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection()


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
		assoc: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'-...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	2
	Receiver's instance variables: 
an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection()


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection()


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(120441600))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(192.0@39.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(104147456))(a DropList...etc...
		lastStepTime: 	1360917
		lastStepMessage: 	nil
		lastCycleTime: 	1360938
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1360917
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(104147456))(a DropList...etc...
		lastStepTime: 	1360917
		lastStepMessage: 	nil
		lastCycleTime: 	1360938
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1360917
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(104147456))(a DropList...etc...
		lastStepTime: 	1360917
		lastStepMessage: 	nil
		lastCycleTime: 	1360938
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1360917
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDAbility>>importWith:
GemTDAbility class>>newFrom:importer:
GemTDBaseTower(GemTDElement)>>importWith:importer:
GemTDBaseTower(GemTDTower)>>importWith:importer:
GemTDBaseTower>>importWith:importer:
GemTDBaseTower class(GemTDElement class)>>newFrom:with:importer:
[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>keysAndValuesDo:
GemTDGod>>generate
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key 'DOTA_Tooltip_Ability_du2' not found in Dictionary
27 January 2018 10:49:55.077126 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary(size 1617)
	Arguments and temporary variables: 
		aKey: 	'DOTA_Tooltip_Ability_du2'
	Receiver's instance variables: 
		tally: 	1617
		array: 	{nil. nil. nil. nil. nil. 'gemtd_kuaidiqingwatiaotiao'->'swift frog'. 'D...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary(size 1617)
	Arguments and temporary variables: 
		key: 	'DOTA_Tooltip_Ability_du2'
	Receiver's instance variables: 
		tally: 	1617
		array: 	{nil. nil. nil. nil. nil. 'gemtd_kuaidiqingwatiaotiao'->'swift frog'. 'D...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary(size 1617)
	Arguments and temporary variables: 
		key: 	'DOTA_Tooltip_Ability_du2'
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	1617
		array: 	{nil. nil. nil. nil. nil. 'gemtd_kuaidiqingwatiaotiao'->'swift frog'. 'D...etc...


Dictionary>>at:
	Receiver: a Dictionary(size 1617)
	Arguments and temporary variables: 
		key: 	'DOTA_Tooltip_Ability_du2'
	Receiver's instance variables: 
		tally: 	1617
		array: 	{nil. nil. nil. nil. nil. 'gemtd_kuaidiqingwatiaotiao'->'swift frog'. 'D...etc...


Dictionary>>DoIt
	Receiver: a Dictionary(size 1617)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		tally: 	1617
		array: 	{nil. nil. nil. nil. nil. 'gemtd_kuaidiqingwatiaotiao'->'swift frog'. 'D...etc...


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ self at: 'DOTA_Tooltip_Ability_du2'
		source: 	a ReadStream
		context: 	nil
		receiver: 	a Dictionary(size 1617)
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	a Dictionary(size 1617)
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1057094912)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result inspect ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(1057094912)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(217064704)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(1057094912)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (753@69)
		owner: 	a TransformWithLayoutMorph(462772736)
		submorphs: 	an Array(a RubPrimarySelectionMorph(149708800) a RubCursor(304614144...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (380052480) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(710687232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(304614144)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(926468864))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(420.0@95.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(217064704)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	1653398
		lastStepMessage: 	nil
		lastCycleTime: 	1653419
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(304614144)))
		lastAlarmTime: 	1653398
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(715837952) a GL...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	1653398
		lastStepMessage: 	nil
		lastCycleTime: 	1653419
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(304614144)))
		lastAlarmTime: 	1653398
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(471026176))(a SearchMorp...etc...
		lastStepTime: 	1653398
		lastStepMessage: 	nil
		lastCycleTime: 	1653419
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(304614144)))
		lastAlarmTime: 	1653398
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(715837952) a GL...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Dictionary>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in Dictionary>>at:
Dictionary>>at:ifAbsent:
Dictionary>>at:
Dictionary>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key 'abaddon_borrowed_time' not found in Dictionary
27 January 2018 10:51:11.050431 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary(size 342)
	Arguments and temporary variables: 
		aKey: 	'abaddon_borrowed_time'
	Receiver's instance variables: 
		tally: 	342
		array: 	an Array('e10008'->a Dictionary('AbilityBehavior'->'DOTA_ABILITY_BEHAVIO...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary(size 342)
	Arguments and temporary variables: 
		key: 	'abaddon_borrowed_time'
	Receiver's instance variables: 
		tally: 	342
		array: 	an Array('e10008'->a Dictionary('AbilityBehavior'->'DOTA_ABILITY_BEHAVIO...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary(size 342)
	Arguments and temporary variables: 
		key: 	'abaddon_borrowed_time'
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	342
		array: 	an Array('e10008'->a Dictionary('AbilityBehavior'->'DOTA_ABILITY_BEHAVIO...etc...


Dictionary>>at:
	Receiver: a Dictionary(size 342)
	Arguments and temporary variables: 
		key: 	'abaddon_borrowed_time'
	Receiver's instance variables: 
		tally: 	342
		array: 	an Array('e10008'->a Dictionary('AbilityBehavior'->'DOTA_ABILITY_BEHAVIO...etc...


GemTDAbility>>importWith:
	Receiver: a GemTDAbility
	Arguments and temporary variables: 
		importer: 	a GemTDImporter
		details: 	nil
	Receiver's instance variables: 
		codeName: 	'abaddon_borrowed_time'
		name: 	a Dictionary()
		abilities: 	nil
		hiddenAbilities: 	nil
		tooltip: 	nil


GemTDAbility class>>newFrom:importer:
	Receiver: GemTDAbility
	Arguments and temporary variables: 
		codeName: 	'abaddon_borrowed_time'
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		superclass: 	GemTDElement
		methodDict: 	a MethodDictionary(#importWith:->GemTDAbility>>#importWith: #shortE...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#GemTDAbility
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GemTD-Analysis'
		traitComposition: 	{}
		localSelectors: 	nil


GemTDCreep(GemTDElement)>>importWith:importer:
	Receiver: a GemTDCreep
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'gemtd_guai_base' 'Ability10'->'' 'Ability11'...etc...
		importer: 	a GemTDImporter
		i: 	8
		ab: 	'abaddon_borrowed_time'
	Receiver's instance variables: 
		codeName: 	'gemtd_siwangxintu'
		name: 	a Dictionary(#en->'boooofus' #sch->'Unavailable' #tch->'Unavailable' )
		abilities: 	an OrderedCollection(a GemTDAbility a GemTDAbility)
		hiddenAbilities: 	nil


GemTDCreep class(GemTDElement class)>>newFrom:with:importer:
	Receiver: GemTDCreep
	Arguments and temporary variables: 
		codeName: 	'gemtd_siwangxintu'
		details: 	a Dictionary('Ability1'->'gemtd_guai_base' 'Ability10'->'' 'Ability11'...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		superclass: 	GemTDElement
		methodDict: 	a MethodDictionary()
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#GemTDCreep
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GemTD-Analysis'
		traitComposition: 	{}
		localSelectors: 	nil


[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		u: 	'gemtd_siwangxintu'
		details: 	a Dictionary('Ability1'->'gemtd_guai_base' 'Ability10'->'' 'Ability11'...etc...
		cls: 	GemTDCreep
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
		assoc: 	'gemtd_siwangxintu'->a Dictionary('Ability1'->'gemtd_guai_base' 'Ability...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'gemtd_siwangxintu'->a Dictionary('Ability1'->'gemtd_guai_base' 'Ability1...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	44
	Receiver's instance variables: 
an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(120441600))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(192.0@39.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(712419584))(a DropList...etc...
		lastStepTime: 	1729371
		lastStepMessage: 	nil
		lastCycleTime: 	1729393
		alarms: 	a Heap()
		lastAlarmTime: 	1729371
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(712419584))(a DropList...etc...
		lastStepTime: 	1729371
		lastStepMessage: 	nil
		lastCycleTime: 	1729393
		alarms: 	a Heap()
		lastAlarmTime: 	1729371
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(712419584))(a DropList...etc...
		lastStepTime: 	1729371
		lastStepMessage: 	nil
		lastCycleTime: 	1729393
		alarms: 	a Heap()
		lastAlarmTime: 	1729371
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Dictionary>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in Dictionary>>at:
Dictionary>>at:ifAbsent:
Dictionary>>at:
GemTDAbility>>importWith:
GemTDAbility class>>newFrom:importer:
GemTDCreep(GemTDElement)>>importWith:importer:
GemTDCreep class(GemTDElement class)>>newFrom:with:importer:
[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>keysAndValuesDo:
GemTDGod>>generate
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
27 January 2018 10:51:24.580576 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDGod>>exportBaseTowers
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		s: 	a WriteStream
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(120441600))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(192.0@39.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(351053312))(a SearchMorp...etc...
		lastStepTime: 	1742898
		lastStepMessage: 	nil
		lastCycleTime: 	1742919
		alarms: 	a Heap()
		lastAlarmTime: 	1742898
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(351053312))(a SearchMorp...etc...
		lastStepTime: 	1742898
		lastStepMessage: 	nil
		lastCycleTime: 	1742919
		alarms: 	a Heap()
		lastAlarmTime: 	1742898
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(351053312))(a SearchMorp...etc...
		lastStepTime: 	1742898
		lastStepMessage: 	nil
		lastCycleTime: 	1742919
		alarms: 	a Heap()
		lastAlarmTime: 	1742898
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDGod>>exportBaseTowers
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of GemTDGod did not understand #exportAdvancedTowers
27 January 2018 10:52:29.276918 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDGod(Object)>>doesNotUnderstand: #exportAdvancedTowers
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		aMessage: 	exportAdvancedTowers
		exception: 	MessageNotUnderstood: GemTDGod>>exportAdvancedTowers
		resumeValue: 	nil
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(120441600))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(192.0@39.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(104147456))(a DropList...etc...
		lastStepTime: 	1807484
		lastStepMessage: 	nil
		lastCycleTime: 	1807505
		alarms: 	a Heap()
		lastAlarmTime: 	1807484
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(104147456))(a DropList...etc...
		lastStepTime: 	1807484
		lastStepMessage: 	nil
		lastCycleTime: 	1807505
		alarms: 	a Heap()
		lastAlarmTime: 	1807484
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(104147456))(a DropList...etc...
		lastStepTime: 	1807484
		lastStepMessage: 	nil
		lastCycleTime: 	1807505
		alarms: 	a Heap()
		lastAlarmTime: 	1807484
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDGod(Object)>>doesNotUnderstand: #exportAdvancedTowers
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
27 January 2018 10:53:54.701958 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDGod>>exportAdvancedTowers
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		s: 	a WriteStream
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(192216320))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(113.0@63.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(351053312))(a SearchMorp...etc...
		lastStepTime: 	1892903
		lastStepMessage: 	nil
		lastCycleTime: 	1892924
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1892903
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(351053312))(a SearchMorp...etc...
		lastStepTime: 	1892903
		lastStepMessage: 	nil
		lastCycleTime: 	1892924
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1892903
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(351053312))(a SearchMorp...etc...
		lastStepTime: 	1892903
		lastStepMessage: 	nil
		lastCycleTime: 	1892924
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	1892903
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDGod>>exportAdvancedTowers
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
27 January 2018 11:16:19.536361 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDCreep class>>DoIt
	Receiver: GemTDCreep
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	GemTDElement
		methodDict: 	a MethodDictionary(#exportOn:->GemTDCreep>>#exportOn: #importWith:i...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#GemTDCreep
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GemTD-Analysis'
		traitComposition: 	{}
		localSelectors: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'1halt.'
		itsSelection: 	a Text for '1halt.'
		itsSelectionString: 	'1halt.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ 1 halt
		source: 	a ReadStream
		context: 	nil
		receiver: 	GemTDCreep
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadWriteStream
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	GemTDCreep
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(285115136)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(285115136)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>evaluateSelection
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(285115136)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>doIt
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(285115136)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>doIt:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(285115136)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


[ :target | target editor doIt: nil ] in RubSmalltalkEditor class>>buildShortcutsOn:
	Receiver: RubSmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		target: 	a RubEditingArea(285115136)
	Receiver's instance variables: 
		superclass: 	RubTextEditor
		methodDict: 	a MethodDictionary(#atCompletionPosition->RubSmalltalkEditor>>#atCo...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RubSmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Rubric-Editing-Code'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [ :target | target editor doIt: nil ]
	Arguments and temporary variables: 
		anArg: 	a RubEditingArea(285115136)
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildShortcutsOn:
		startpc: 	492
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :target | target editor doIt: nil ]
	Arguments and temporary variables: 
		firstArg: 	a RubEditingArea(285115136)
		secondArg: 	a RubEditingArea(285115136)
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildShortcutsOn:
		startpc: 	492
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :target | target editor doIt: nil ]
	Arguments and temporary variables: 
		firstArg: 	a RubEditingArea(285115136)
		secondArg: 	a RubEditingArea(285115136)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildShortcutsOn:
		startpc: 	492
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#RubSmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Meta + d do [ :target | target editor doIt: nil ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a RubEditingArea(285115136)
		category: 	a KMCategory
		morph: 	a RubEditingArea(285115136)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Meta + d do [ :target | target editor doIt: nil ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#RubSmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :target | target editor doIt: nil ]
		name: 	#doIt
		shortcut: 	Meta + d
		defaultShortcut: 	Meta + d
		description: 	'Do it'


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Meta + d do [ :target | target editor doIt: nil ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :target | target editor doIt: nil ]
		name: 	#doIt
		shortcut: 	Meta + d
		defaultShortcut: 	Meta + d
		description: 	'Do it'


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Meta + d do [ :target | target editor doIt: nil ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)...etc...
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :target | target editor doIt: nil ]
		name: 	#doIt
		shortcut: 	Meta + d
		defaultShortcut: 	Meta + d
		description: 	'Do it'


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)...etc...
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Meta + d do [ :target | target editor doIt: nil ]

	Receiver's instance variables: 
		name: 	#RubSmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Windows->a KMStorage #all->a KMSt...etc...


Set>>do:
	Receiver: a Set(#printIt on Meta + p do [ :target | target editor printIt ]
 #debugIt on Meta + Shif...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	14
		each: 	#doIt on Meta + d do [ :target | target editor doIt: nil ]

	Receiver's instance variables: 
		tally: 	13
		array: 	an Array(#printIt on Meta + p do [ :target | target editor printIt ]
 #d...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)...etc...
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#RubSmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Windows->a KMStorage #all->a KMSt...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#RubSmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a RubEditingArea(285115136)
		category: 	a KMCategory
		morph: 	a RubEditingArea(285115136)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aTarget: 	aKMCategoryTarget(#RubSmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#RubTextEditor) aKMCategoryTarget(#RubSmalltal...etc...
		morph: 	a RubEditingArea(285115136)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#RubTextEditor) aKMCategoryT...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verify...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#RubTextEditor) aKMCat...etc...
		firstIndex: 	1
		lastIndex: 	4


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#RubTextEditor) aKMCategoryTarget(#RubSmalltal...etc...
		morph: 	a RubEditingArea(285115136)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a RubEditingArea(285115136)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#RubTextEditor) aKMCategoryTarget(#RubSmalltal...etc...
		morph: 	a RubEditingArea(285115136)
		directKeymaps: 	a KMCategory


RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a RubEditingArea(285115136)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (821@69)
		owner: 	a TransformWithLayoutMorph(897567744)
		submorphs: 	an Array(a RubPrimarySelectionMorph(353918976) a RubCursor(790345216...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (864031232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(425145856)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(790345216)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(489026048) a QARubTextSegm...etc...
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
	Receiver: a RubEditingArea(285115136)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (821@69)
		owner: 	a TransformWithLayoutMorph(897567744)
		submorphs: 	an Array(a RubPrimarySelectionMorph(353918976) a RubCursor(790345216...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (864031232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(425145856)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(790345216)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(489026048) a QARubTextSegm...etc...
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a RubEditingArea(285115136)
	Receiver's instance variables: 
		timeStamp: 	141316
		source: 	a HandMorph(640696320)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(-84@173)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	2


RubEditingArea(Morph)>>handleEvent:
	Receiver: a RubEditingArea(285115136)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (821@69)
		owner: 	a TransformWithLayoutMorph(897567744)
		submorphs: 	an Array(a RubPrimarySelectionMorph(353918976) a RubCursor(790345216...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (864031232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(425145856)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(790345216)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(489026048) a QARubTextSegm...etc...
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>handleFocusEvent:
	Receiver: a RubEditingArea(285115136)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (821@69)
		owner: 	a TransformWithLayoutMorph(897567744)
		submorphs: 	an Array(a RubPrimarySelectionMorph(353918976) a RubCursor(790345216...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (864031232) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(425145856)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(790345216)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(489026048) a QARubTextSegm...etc...
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(640696320)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a RubEditingArea(285115136)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(939862784) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(326@578) corner: (342@594)
		owner: 	a WorldMorph(939862784) [world]
		submorphs: 	#()
		fullBounds: 	(326@578) corner: (342@594)
		color: 	Color blue
		extension: 	a MorphExtension (24944640) [other:  (kmDispatcher -> a KMDispatcher...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(285115136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(326@578) mouseOver CMD 141295 nil]
		targetOffset: 	(-66.0@127.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 141295 326 578 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(939862784) [world]
		priorHand: 	a HandMorph(640696320)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a NautilusWindow(722959616) a GLM...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(640696320)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a RubEditingArea(285115136)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		bounds: 	(326@578) corner: (342@594)
		owner: 	a WorldMorph(939862784) [world]
		submorphs: 	#()
		fullBounds: 	(326@578) corner: (342@594)
		color: 	Color blue
		extension: 	a MorphExtension (24944640) [other:  (kmDispatcher -> a KMDispatcher...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(285115136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(326@578) mouseOver CMD 141295 nil]
		targetOffset: 	(-66.0@127.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 141295 326 578 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(640696320)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a RubEditingArea(285115136)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(326@578) corner: (342@594)
		owner: 	a WorldMorph(939862784) [world]
		submorphs: 	#()
		fullBounds: 	(326@578) corner: (342@594)
		color: 	Color blue
		extension: 	a MorphExtension (24944640) [other:  (kmDispatcher -> a KMDispatcher...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(285115136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(326@578) mouseOver CMD 141295 nil]
		targetOffset: 	(-66.0@127.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 141295 326 578 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(640696320)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(326@578) corner: (342@594)
		owner: 	a WorldMorph(939862784) [world]
		submorphs: 	#()
		fullBounds: 	(326@578) corner: (342@594)
		color: 	Color blue
		extension: 	a MorphExtension (24944640) [other:  (kmDispatcher -> a KMDispatcher...etc...
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(285115136)
		eventListenerTHERE_BE_DRAGONS_HERE
Halt
27 January 2018 11:16:26.00309 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDCreep>>importWith:importer:
	Receiver: a GemTDCreep
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'gemtd_guai_base' 'Ability10'->'' 'Ability11'...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_youniekesizhinu_fly'
		name: 	a Dictionary(#en->'ig dragon' #sch->'$\mKQ¯eKN`' #tch->'$\mKQ¯eKN`' )...etc...
		abilities: 	an OrderedCollection(a GemTDAbility)
		hiddenAbilities: 	an OrderedCollection()


GemTDCreep class(GemTDElement class)>>newFrom:with:importer:
	Receiver: GemTDCreep
	Arguments and temporary variables: 
		codeName: 	'gemtd_youniekesizhinu_fly'
		details: 	a Dictionary('Ability1'->'gemtd_guai_base' 'Ability10'->'' 'Ability11'...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		superclass: 	GemTDElement
		methodDict: 	a MethodDictionary(#exportOn:->GemTDCreep>>#exportOn: #importWith:i...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#GemTDCreep
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GemTD-Analysis'
		traitComposition: 	{}
		localSelectors: 	nil


[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		u: 	'gemtd_youniekesizhinu_fly'
		details: 	a Dictionary('Ability1'->'gemtd_guai_base' 'Ability10'->'' 'Ability11'...etc...
		cls: 	GemTDCreep
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower)


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
		assoc: 	'gemtd_youniekesizhinu_fly'->a Dictionary('Ability1'->'gemtd_guai_base' ...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'gemtd_youniekesizhinu_fly'->a Dictionary('Ability1'->'gemtd_guai_base' '...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	3
	Receiver's instance variables: 
an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower)


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(494749952)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(494749952)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1053048320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(935235328) a RubCursor(99587072)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (69351168) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(578697216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99587072)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(812990464))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(79.0@94.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(208716032)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(104147456))(a DropList...etc...
		lastStepTime: 	147654
		lastStepMessage: 	nil
		lastCycleTime: 	147677
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	147654
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(104147456))(a DropList...etc...
		lastStepTime: 	147654
		lastStepMessage: 	nil
		lastCycleTime: 	147677
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	147654
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(104147456))(a DropList...etc...
		lastStepTime: 	147654
		lastStepMessage: 	nil
		lastCycleTime: 	147677
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99587072)))
		lastAlarmTime: 	147654
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(392155648) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDCreep>>importWith:importer:
GemTDCreep class(GemTDElement class)>>newFrom:with:importer:
[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>keysAndValuesDo:
GemTDGod>>generate
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of GemTDCreep did not understand #level
27 January 2018 11:23:55.089409 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDCreep(Object)>>doesNotUnderstand: #level
	Receiver: a GemTDCreep
	Arguments and temporary variables: 
		aMessage: 	level
		exception: 	MessageNotUnderstood: GemTDCreep>>level
		resumeValue: 	nil
	Receiver's instance variables: 
		codeName: 	'gemtd_youniekesizhinu_fly'
		name: 	a Dictionary(#en->'ig dragon' #sch->'$\mKQ¯eKN`' #tch->'$\mKQ¯eKN`' )...etc...
		abilities: 	an OrderedCollection(a GemTDAbility)
		hiddenAbilities: 	an OrderedCollection()
		level: 	'28'
		ms: 	'750'
		res: 	'10'
		mc: 	'DOTA_UNIT_CAP_MOVE_FLY'
		armor: 	'8'


[ :a :b | a level asInteger < b level asInteger ] in GemTDGod>>orderedCreeps
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		creeps: 	an OrderedCollection(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCree...etc...
		a: 	a GemTDCreep
		b: 	a GemTDCreep
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


Array(SequenceableCollection)>>mergeFirst:middle:last:into:by:
	Receiver: an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a G...etc...
	Arguments and temporary variables: 
		first: 	1
		middle: 	1
		last: 	2
		dst: 	an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep ...etc...
		aBlock: 	[ :a :b | a level asInteger < b level asInteger ]
		i1: 	1
		i2: 	2
		val1: 	a GemTDCreep
		val2: 	a GemTDCreep
		out: 	0
	Receiver's instance variables: 
an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a G...etc...

Array(SequenceableCollection)>>mergeSortFrom:to:src:dst:by:
	Receiver: an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a G...etc...
	Arguments and temporary variables: 
		first: 	1
		last: 	2
		src: 	an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep ...etc...
		dst: 	an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep ...etc...
		aBlock: 	[ :a :b | a level asInteger < b level asInteger ]
		middle: 	1
	Receiver's instance variables: 
an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a G...etc...

Array(SequenceableCollection)>>mergeSortFrom:to:src:dst:by:
	Receiver: an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a G...etc...
	Arguments and temporary variables: 
		first: 	1
		last: 	3
		src: 	an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep ...etc...
		dst: 	an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep ...etc...
		aBlock: 	[ :a :b | a level asInteger < b level asInteger ]
		middle: 	2
	Receiver's instance variables: 
an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a G...etc...

Array(SequenceableCollection)>>mergeSortFrom:to:src:dst:by:
	Receiver: an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a G...etc...
	Arguments and temporary variables: 
		first: 	1
		last: 	6
		src: 	an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep ...etc...
		dst: 	an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep ...etc...
		aBlock: 	[ :a :b | a level asInteger < b level asInteger ]
		middle: 	3
	Receiver's instance variables: 
an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a G...etc...

Array(SequenceableCollection)>>mergeSortFrom:to:src:dst:by:
	Receiver: an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a G...etc...
	Arguments and temporary variables: 
		first: 	1
		last: 	11
		src: 	an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep ...etc...
		dst: 	an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep ...etc...
		aBlock: 	[ :a :b | a level asInteger < b level asInteger ]
		middle: 	6
	Receiver's instance variables: 
an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a G...etc...

Array(SequenceableCollection)>>mergeSortFrom:to:src:dst:by:
	Receiver: an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a G...etc...
	Arguments and temporary variables: 
		first: 	1
		last: 	22
		src: 	an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep ...etc...
		dst: 	an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep ...etc...
		aBlock: 	[ :a :b | a level asInteger < b level asInteger ]
		middle: 	11
	Receiver's instance variables: 
an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a G...etc...

Array(SequenceableCollection)>>mergeSortFrom:to:src:dst:by:
	Receiver: an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a G...etc...
	Arguments and temporary variables: 
		first: 	1
		last: 	43
		src: 	an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep ...etc...
		dst: 	an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep ...etc...
		aBlock: 	[ :a :b | a level asInteger < b level asInteger ]
		middle: 	22
	Receiver's instance variables: 
an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a G...etc...

Array(SequenceableCollection)>>mergeSortFrom:to:src:dst:by:
	Receiver: an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a G...etc...
	Arguments and temporary variables: 
		first: 	1
		last: 	85
		src: 	an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep ...etc...
		dst: 	an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep ...etc...
		aBlock: 	[ :a :b | a level asInteger < b level asInteger ]
		middle: 	43
	Receiver's instance variables: 
an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a G...etc...

OrderedCollection>>sort:
	Receiver: an OrderedCollection(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a Ge...etc...
	Arguments and temporary variables: 
		aSortBlock: 	[ :a :b | a level asInteger < b level asInteger ]
	Receiver's instance variables: 
		array: 	an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCree...etc...
		firstIndex: 	1
		lastIndex: 	85


GemTDGod>>orderedCreeps
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		creeps: 	an OrderedCollection(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCree...etc...
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


GemTDGod>>exportCreeps
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		s: 	a WriteStream
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(880226816)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(880226816)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(915948544)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(880226816)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1031524864)
		submorphs: 	an Array(a RubPrimarySelectionMorph(139253760) a RubCursor(758274560...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (79358464) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(206663680)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(758274560)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(194123776))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(915948544)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(490979328))(a GLMSys...etc...
		lastStepTime: 	596743
		lastStepMessage: 	nil
		lastCycleTime: 	596766
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(758274560)))
		lastAlarmTime: 	596743
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(490979328) an I...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(490979328))(a GLMSys...etc...
		lastStepTime: 	596743
		lastStepMessage: 	nil
		lastCycleTime: 	596766
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(758274560)))
		lastAlarmTime: 	596743
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(490979328))(a GLMSys...etc...
		lastStepTime: 	596743
		lastStepMessage: 	nil
		lastCycleTime: 	596766
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(758274560)))
		lastAlarmTime: 	596743
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(490979328) an I...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDCreep(Object)>>doesNotUnderstand: #level
[ :a :b | a level asInteger < b level asInteger ] in GemTDGod>>orderedCreeps
Array(SequenceableCollection)>>mergeFirst:middle:last:into:by:
Array(SequenceableCollection)>>mergeSortFrom:to:src:dst:by:
Array(SequenceableCollection)>>mergeSortFrom:to:src:dst:by:
Array(SequenceableCollection)>>mergeSortFrom:to:src:dst:by:
Array(SequenceableCollection)>>mergeSortFrom:to:src:dst:by:
Array(SequenceableCollection)>>mergeSortFrom:to:src:dst:by:
Array(SequenceableCollection)>>mergeSortFrom:to:src:dst:by:
Array(SequenceableCollection)>>mergeSortFrom:to:src:dst:by:
OrderedCollection>>sort:
GemTDGod>>orderedCreeps
GemTDGod>>exportCreeps
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
27 January 2018 11:24:08.508539 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDCreep>>exportOn:
	Receiver: a GemTDCreep
	Arguments and temporary variables: 
		s: 	a WriteStream
	Receiver's instance variables: 
		codeName: 	'gemtd_stone'
		name: 	a Dictionary(#en->'stone' #sch->'ów4Y' #tch->'ów-' )
		abilities: 	an OrderedCollection()
		hiddenAbilities: 	an OrderedCollection()
		level: 	'0'
		ms: 	'0'
		res: 	'10'
		mc: 	'DOTA_UNIT_CAP_MOVE_NONE'
		armor: 	'0'


[ :u | u exportOn: s ] in GemTDGod>>exportCreeps
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		s: 	a WriteStream
		u: 	a GemTDCreep
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a Ge...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :u | u exportOn: s ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCreep a GemTDCree...etc...
		firstIndex: 	1
		lastIndex: 	85


GemTDGod>>exportCreeps
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		s: 	a WriteStream
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(880226816)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(880226816)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(915948544)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(880226816)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(1031524864)
		submorphs: 	an Array(a RubPrimarySelectionMorph(139253760) a RubCursor(758274560...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (79358464) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(206663680)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(758274560)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(364837888))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(121@85)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(915948544)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(490979328))(a GLMSys...etc...
		lastStepTime: 	610171
		lastStepMessage: 	nil
		lastCycleTime: 	610193
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(758274560)))
		lastAlarmTime: 	610171
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(490979328) an I...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(490979328))(a GLMSys...etc...
		lastStepTime: 	610171
		lastStepMessage: 	nil
		lastCycleTime: 	610193
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(758274560)))
		lastAlarmTime: 	610171
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(490979328))(a GLMSys...etc...
		lastStepTime: 	610171
		lastStepMessage: 	nil
		lastCycleTime: 	610193
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(758274560)))
		lastAlarmTime: 	610171
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(490979328) an I...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDCreep>>exportOn:
[ :u | u exportOn: s ] in GemTDGod>>exportCreeps
OrderedCollection>>do:
GemTDGod>>exportCreeps
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
27 January 2018 11:36:04.70206 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDCreep>>importWith:importer:
	Receiver: a GemTDCreep
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'gemtd_guai_base' 'Ability10'->'' 'Ability11'...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_youniekesizhinu_fly'
		name: 	nil
		abilities: 	nil
		hiddenAbilities: 	nil
		level: 	nil
		ms: 	nil
		res: 	nil
		mc: 	nil
		armor: 	nil


GemTDCreep class(GemTDElement class)>>newFrom:with:importer:
	Receiver: GemTDCreep
	Arguments and temporary variables: 
		codeName: 	'gemtd_youniekesizhinu_fly'
		details: 	a Dictionary('Ability1'->'gemtd_guai_base' 'Ability10'->'' 'Ability11'...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		superclass: 	GemTDElement
		methodDict: 	a MethodDictionary(#armor->GemTDCreep>>#armor #armor:->GemTDCreep>>...etc...
		format: 	65545
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#GemTDCreep
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GemTD-Analysis'
		traitComposition: 	{}
		localSelectors: 	nil


[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		u: 	'gemtd_youniekesizhinu_fly'
		details: 	a Dictionary('Ability1'->'gemtd_guai_base' 'Ability10'->'' 'Ability11'...etc...
		cls: 	GemTDCreep
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower)


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
		assoc: 	'gemtd_youniekesizhinu_fly'->a Dictionary('Ability1'->'gemtd_guai_base' ...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'gemtd_youniekesizhinu_fly'->a Dictionary('Ability1'->'gemtd_guai_base' '...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	3
	Receiver's instance variables: 
an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower)


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(880226816)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(880226816)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(915948544)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(880226816)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@69)
		owner: 	a TransformWithLayoutMorph(1031524864)
		submorphs: 	an Array(a RubPrimarySelectionMorph(139253760) a RubCursor(758274560...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (79358464) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(206663680)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(758274560)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(452388864))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(915948544)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(648829952))(a DropList...etc...
		lastStepTime: 	1326373
		lastStepMessage: 	nil
		lastCycleTime: 	1326396
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(758274560)))
		lastAlarmTime: 	1326373
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(490979328) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(648829952))(a DropList...etc...
		lastStepTime: 	1326373
		lastStepMessage: 	nil
		lastCycleTime: 	1326396
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(758274560)))
		lastAlarmTime: 	1326373
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(648829952))(a DropList...etc...
		lastStepTime: 	1326373
		lastStepMessage: 	nil
		lastCycleTime: 	1326396
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(758274560)))
		lastAlarmTime: 	1326373
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(490979328) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDCreep>>importWith:importer:
GemTDCreep class(GemTDElement class)>>newFrom:with:importer:
[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>keysAndValuesDo:
GemTDGod>>generate
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
27 January 2018 11:36:47.139825 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDAbility>>importWith:
	Receiver: a GemTDAbility
	Arguments and temporary variables: 
		importer: 	a GemTDImporter
		details: 	nil
	Receiver's instance variables: 
		codeName: 	'gemtd_guai_base'
		name: 	nil
		abilities: 	nil
		hiddenAbilities: 	nil
		tooltip: 	nil


GemTDAbility class>>newFrom:importer:
	Receiver: GemTDAbility
	Arguments and temporary variables: 
		codeName: 	'gemtd_guai_base'
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		superclass: 	GemTDElement
		methodDict: 	a MethodDictionary(#importWith:->GemTDAbility>>#importWith: #shortE...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#GemTDAbility
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GemTD-Analysis'
		traitComposition: 	{}
		localSelectors: 	nil


GemTDCreep(GemTDElement)>>importWith:importer:
	Receiver: a GemTDCreep
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'gemtd_guai_base' 'Ability10'->'' 'Ability11'...etc...
		importer: 	a GemTDImporter
		i: 	1
		ab: 	'gemtd_guai_base'
	Receiver's instance variables: 
		codeName: 	'gemtd_youniekesizhinu_fly'
		name: 	a Dictionary(#en->'ig dragon' #sch->'$\mKQ¯eKN`' #tch->'$\mKQ¯eKN`' )...etc...
		abilities: 	an OrderedCollection()
		hiddenAbilities: 	nil
		level: 	nil
		ms: 	nil
		res: 	nil
		mc: 	nil
		armor: 	nil


GemTDCreep>>importWith:importer:
	Receiver: a GemTDCreep
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'gemtd_guai_base' 'Ability10'->'' 'Ability11'...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_youniekesizhinu_fly'
		name: 	a Dictionary(#en->'ig dragon' #sch->'$\mKQ¯eKN`' #tch->'$\mKQ¯eKN`' )...etc...
		abilities: 	an OrderedCollection()
		hiddenAbilities: 	nil
		level: 	nil
		ms: 	nil
		res: 	nil
		mc: 	nil
		armor: 	nil


GemTDCreep class(GemTDElement class)>>newFrom:with:importer:
	Receiver: GemTDCreep
	Arguments and temporary variables: 
		codeName: 	'gemtd_youniekesizhinu_fly'
		details: 	a Dictionary('Ability1'->'gemtd_guai_base' 'Ability10'->'' 'Ability11'...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		superclass: 	GemTDElement
		methodDict: 	a MethodDictionary(#armor->GemTDCreep>>#armor #armor:->GemTDCreep>>...etc...
		format: 	65545
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#GemTDCreep
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GemTD-Analysis'
		traitComposition: 	{}
		localSelectors: 	nil


[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		u: 	'gemtd_youniekesizhinu_fly'
		details: 	a Dictionary('Ability1'->'gemtd_guai_base' 'Ability10'->'' 'Ability11'...etc...
		cls: 	GemTDCreep
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower)


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
		assoc: 	'gemtd_youniekesizhinu_fly'->a Dictionary('Ability1'->'gemtd_guai_base' ...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'gemtd_youniekesizhinu_fly'->a Dictionary('Ability1'->'gemtd_guai_base' '...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	3
	Receiver's instance variables: 
an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower)


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(880226816)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(880226816)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(915948544)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(880226816)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@69)
		owner: 	a TransformWithLayoutMorph(1031524864)
		submorphs: 	an Array(a RubPrimarySelectionMorph(139253760) a RubCursor(758274560...etc...
		fullBounds: 	(0@0) corner: (580@69)
		color: 	Color transparent
		extension: 	a MorphExtension (79358464) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(206663680)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(758274560)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(452388864))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(915948544)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(648087040))(a SearchMorp...etc...
		lastStepTime: 	1368920
		lastStepMessage: 	nil
		lastCycleTime: 	1368941
		alarms: 	a Heap()
		lastAlarmTime: 	1368920
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a NautilusWindow(178083840) a GLM...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(648087040))(a SearchMorp...etc...
		lastStepTime: 	1368920
		lastStepMessage: 	nil
		lastCycleTime: 	1368941
		alarms: 	a Heap()
		lastAlarmTime: 	1368920
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(648087040))(a SearchMorp...etc...
		lastStepTime: 	1368920
		lastStepMessage: 	nil
		lastCycleTime: 	1368941
		alarms: 	a Heap()
		lastAlarmTime: 	1368920
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a NautilusWindow(178083840) a GLM...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDAbility>>importWith:
GemTDAbility class>>newFrom:importer:
GemTDCreep(GemTDElement)>>importWith:importer:
GemTDCreep>>importWith:importer:
GemTDCreep class(GemTDElement class)>>newFrom:with:importer:
[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>keysAndValuesDo:
GemTDGod>>generate
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
27 January 2018 11:42:20.074844 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDCreep>>importWith:importer:
	Receiver: a GemTDCreep
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'gemtd_guai_base' 'Ability10'->'' 'Ability11'...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_youniekesizhinu_fly'
		name: 	nil
		abilities: 	nil
		hiddenAbilities: 	nil
		level: 	nil
		ms: 	nil
		res: 	nil
		mc: 	nil
		armor: 	nil


GemTDCreep class(GemTDElement class)>>newFrom:with:importer:
	Receiver: GemTDCreep
	Arguments and temporary variables: 
		codeName: 	'gemtd_youniekesizhinu_fly'
		details: 	a Dictionary('Ability1'->'gemtd_guai_base' 'Ability10'->'' 'Ability11'...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		superclass: 	GemTDElement
		methodDict: 	a MethodDictionary(#armor->GemTDCreep>>#armor #armor:->GemTDCreep>>...etc...
		format: 	65545
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#GemTDCreep
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GemTD-Analysis'
		traitComposition: 	{}
		localSelectors: 	nil


[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		u: 	'gemtd_youniekesizhinu_fly'
		details: 	a Dictionary('Ability1'->'gemtd_guai_base' 'Ability10'->'' 'Ability11'...etc...
		cls: 	GemTDCreep
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower)


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
		assoc: 	'gemtd_youniekesizhinu_fly'->a Dictionary('Ability1'->'gemtd_guai_base' ...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'gemtd_youniekesizhinu_fly'->a Dictionary('Ability1'->'gemtd_guai_base' '...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	3
	Receiver's instance variables: 
an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower)


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(880226816)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(880226816)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(915948544)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(880226816)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@69)
		owner: 	a TransformWithLayoutMorph(1031524864)
		submorphs: 	an Array(a RubPrimarySelectionMorph(139253760) a RubCursor(758274560...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (79358464) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(206663680)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(758274560)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(658913280))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(915948544)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(648829952))(a DropList...etc...
		lastStepTime: 	1701735
		lastStepMessage: 	nil
		lastCycleTime: 	1701758
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(758274560)))
		lastAlarmTime: 	1701735
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(490979328) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(648829952))(a DropList...etc...
		lastStepTime: 	1701735
		lastStepMessage: 	nil
		lastCycleTime: 	1701758
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(758274560)))
		lastAlarmTime: 	1701735
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(648829952))(a DropList...etc...
		lastStepTime: 	1701735
		lastStepMessage: 	nil
		lastCycleTime: 	1701758
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(758274560)))
		lastAlarmTime: 	1701735
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(490979328) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDCreep>>importWith:importer:
GemTDCreep class(GemTDElement class)>>newFrom:with:importer:
[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>keysAndValuesDo:
GemTDGod>>generate
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #s
27 January 2018 11:48:13.87873 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #s
	Receiver: 'Note: Some creeps may not be used by default in the game.'
	Arguments and temporary variables: 
		aMessage: 	s
		exception: 	MessageNotUnderstood: ByteString>>s
		resumeValue: 	nil
	Receiver's instance variables: 
'Note: Some creeps may not be used by default in the game.'

GemTDGod>>exportCreeps
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		s: 	a WriteStream
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower a GemTDCreep a GemTDBaseTower a Ge...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(880226816)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(880226816)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(915948544)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(880226816)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@69)
		owner: 	a TransformWithLayoutMorph(1031524864)
		submorphs: 	an Array(a RubPrimarySelectionMorph(139253760) a RubCursor(758274560...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (79358464) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(206663680)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(758274560)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(187873024))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(915948544)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(162139904))(a SearchMorp...etc...
		lastStepTime: 	74783
		lastStepMessage: 	nil
		lastCycleTime: 	74806
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(758274560)))
		lastAlarmTime: 	74783
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(490979328) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(162139904))(a SearchMorp...etc...
		lastStepTime: 	74783
		lastStepMessage: 	nil
		lastCycleTime: 	74806
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(758274560)))
		lastAlarmTime: 	74783
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(162139904))(a SearchMorp...etc...
		lastStepTime: 	74783
		lastStepMessage: 	nil
		lastCycleTime: 	74806
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(758274560)))
		lastAlarmTime: 	74783
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(490979328) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #s
GemTDGod>>exportCreeps
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
27 January 2018 11:51:38.193232 am

VM: Mac OS - x64 - 1011.6 - CoInterpreter VMMaker.oscog-eem.2265 uuid: 76b62109-629a-4c39-9641-67b53321df9a Aug 27 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2262 uuid: 8b531242-de02-48aa-b418-8d2dde0bec6c Aug 27 2017
VM: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Sun Aug 27 21:55:26 2017 +0200 $ Plugins: 201708271955 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo7.0alpha [Build information: Pharo-7.0+alpha.build.456.sha.63e0b3f29bf7f31011770e9738c537cbf48fca1f (64 Bit)]

GemTDCreep>>importWith:importer:
	Receiver: a GemTDCreep
	Arguments and temporary variables: 
		details: 	a Dictionary('Ability1'->'gemtd_guai_base' 'Ability10'->'' 'Ability11'...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		codeName: 	'gemtd_youniekesizhinu_fly'
		name: 	a Dictionary(#en->'ig dragon' #sch->'$\mKQ¯eKN`' #tch->'$\mKQ¯eKN`' )...etc...
		abilities: 	an OrderedCollection(a GemTDAbility)
		hiddenAbilities: 	an OrderedCollection()
		level: 	nil
		ms: 	nil
		res: 	nil
		mc: 	nil
		armor: 	nil


GemTDCreep class(GemTDElement class)>>newFrom:with:importer:
	Receiver: GemTDCreep
	Arguments and temporary variables: 
		codeName: 	'gemtd_youniekesizhinu_fly'
		details: 	a Dictionary('Ability1'->'gemtd_guai_base' 'Ability10'->'' 'Ability11'...etc...
		importer: 	a GemTDImporter
	Receiver's instance variables: 
		superclass: 	GemTDElement
		methodDict: 	a MethodDictionary(#armor->GemTDCreep>>#armor #armor:->GemTDCreep>>...etc...
		format: 	65545
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#GemTDCreep
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GemTD-Analysis'
		traitComposition: 	{}
		localSelectors: 	nil


[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 
		u: 	'gemtd_youniekesizhinu_fly'
		details: 	a Dictionary('Ability1'->'gemtd_guai_base' 'Ability10'->'' 'Ability11'...etc...
		cls: 	GemTDCreep
	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower)


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
		assoc: 	'gemtd_youniekesizhinu_fly'->a Dictionary('Ability1'->'gemtd_guai_base' ...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	'gemtd_youniekesizhinu_fly'->a Dictionary('Ability1'->'gemtd_guai_base' '...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	3
	Receiver's instance variables: 
an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->'' 'Ability11'->'' '...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(size 180)
	Arguments and temporary variables: 
		aBlock: 	[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((de...etc...
	Receiver's instance variables: 
		tally: 	180
		array: 	an Array(nil 'gemtd_g11111'->a Dictionary('Ability1'->'' 'Ability10'->''...etc...


GemTDGod>>generate
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower)


GemTDGod>>process
	Receiver: a GemTDGod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		importer: 	a GemTDImporter
		units: 	an OrderedCollection(a GemTDBaseTower)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ GemTDGod new process
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(880226816)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(880226816)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(915948544)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(880226816)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@69)
		owner: 	a TransformWithLayoutMorph(1031524864)
		submorphs: 	an Array(a RubPrimarySelectionMorph(139253760) a RubCursor(758274560...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (79358464) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(206663680)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(758274560)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(691132672))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(915948544)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(490979328))(a GLMSys...etc...
		lastStepTime: 	9766
		lastStepMessage: 	nil
		lastCycleTime: 	9790
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(758274560)))
		lastAlarmTime: 	9766
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(490979328) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(490979328))(a GLMSys...etc...
		lastStepTime: 	9766
		lastStepMessage: 	nil
		lastCycleTime: 	9790
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(758274560)))
		lastAlarmTime: 	9766
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(939862784) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(640696320))
		viewBox: 	(0@0) corner: (1512@979)
		canvas: 	a FormCanvas on: DisplayScreen(1512x979x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(490979328))(a GLMSys...etc...
		lastStepTime: 	9766
		lastStepMessage: 	nil
		lastCycleTime: 	9790
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(758274560)))
		lastAlarmTime: 	9766
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(640696320)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(939862784) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1512@979)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(620569088) a GLMSystemWindow(490979328) a Na...etc...
		fullBounds: 	(0@0) corner: (1512@979)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (877807104) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#CursorOwnerWorld->a WorldMorph(939862784) [world] #Ext...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
GemTDCreep>>importWith:importer:
GemTDCreep class(GemTDElement class)>>newFrom:with:importer:
[ :u :details | 
| cls |
(u beginsWith: 'gemtd')
	ifTrue: [ cls := ((details at: 'Model') beginsWith: 'models/items/wards/')
			ifTrue: [ u last = $1
					ifTrue: [ GemTDBaseTower ]
					ifFalse: [ GemTDAdvancedTower ] ]
			ifFalse: [ GemTDCreep ].
		units add: (cls newFrom: u with: details importer: importer) ] ] in GemTDGod>>generate
[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>keysAndValuesDo:
GemTDGod>>generate
GemTDGod>>process
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

